import{_ as n,W as s,X as a,a0 as t}from"./framework-4f54a744.js";const p="/docs/assets/image-20230531154540329-f1e3781f.png",e="/docs/assets/image-20230531161402547-bc0b2bf2.png",o="/docs/assets/image-20230531163513234-e0675a1f.png",c="/docs/assets/image-20230531163614451-6221e230.png",i="/docs/assets/image-20230531164027257-5a50c84b.png",l="/docs/assets/image-20230531164512071-c650983d.png",u="/docs/assets/image-20230531164854061-a56eace5.png",r="/docs/assets/image-20230601135149216-c52e198b.png",k="/docs/assets/image-20230601140349536-97a4c858.png",d="/docs/assets/image-20230601140618830-3871c1cf.png",m="/docs/assets/image-20230601140848331-0482709a.png",v="/docs/assets/image-20230601141347696-0481dde6.png",b="/docs/assets/image-20230601141802571-b969ec25.png",h="/docs/assets/image-20230601145735271-2af6e3c8.png",g="/docs/assets/image-20230601145926598-b3b2f850.png",y="/docs/assets/image-20230601163149390-936347ea.png",w="/docs/assets/image-20230601163433220-6121618d.png",_="/docs/assets/image-20230601164726748-f73cb84e.png",f="/docs/assets/image-20230601165134407-0b1f247a.png",q="/docs/assets/image-20230601165651843-8e6aa943.png",x={},P=t('<h1 id="并发编程" tabindex="-1"><a class="header-anchor" href="#并发编程" aria-hidden="true">#</a> 并发编程</h1><h2 id="程序提速方法" tabindex="-1"><a class="header-anchor" href="#程序提速方法" aria-hidden="true">#</a> 程序提速方法</h2><ol><li>单线程串行</li><li>多线程并发</li><li>多 CPU 并行</li><li>多机器并行</li></ol><p><img src="'+p+'" alt="image-20230531154540329"></p><h2 id="python-对并发编程的支持" tabindex="-1"><a class="header-anchor" href="#python-对并发编程的支持" aria-hidden="true">#</a> python 对并发编程的支持</h2><ul><li>多线程：threading，利用CPU和IO可以同时执行的原理，让CPU不会干巴巴等待IO完成</li><li>多进程：multiprocessing，利用多核CPU的能力，真正的并行执行任务</li><li>异步IO：asyncio，在单线程利用CPU和IO同时执行的原理，实现函数异步执行</li><li>使用Lock对资源加锁，防止冲突访问</li><li>使用Queue实现不同线程/进程之间的数据通信，实现生产者-消费者模式</li><li>使用线程池Pool/进程池Pool，简化线程/进程的任务提交、等待结束、获取结果</li><li>使用subprocess启动外部程序的进程，并进行输入输出交互</li></ul><h2 id="多线程thread、多进程process、多协程coroutine" tabindex="-1"><a class="header-anchor" href="#多线程thread、多进程process、多协程coroutine" aria-hidden="true">#</a> 多线程Thread、多进程Process、多协程Coroutine</h2><h3 id="cpu密集型计算、io密集型计算" tabindex="-1"><a class="header-anchor" href="#cpu密集型计算、io密集型计算" aria-hidden="true">#</a> CPU密集型计算、IO密集型计算</h3><ul><li><p>CPU密集型（CPU-bound）：也叫计算密集型，简单来说就是程序中需要CPU进行大量的计算和处理，而I/O在很短时间内就能完成。特点是CPU占用率相当高。</p><p>如：压缩解压缩、加密解密、正则表达式搜索、</p></li><li><p>IO密集型（I/O bound）：指程序运行中，大部分情况都是CPU等待IO（硬盘/内存）的读写操作，CPU占用率很低。</p><p>如：文件处理程序、网络爬虫程序、读写数据库程序</p></li></ul><h3 id="多线程、多进程、多协程的比较" tabindex="-1"><a class="header-anchor" href="#多线程、多进程、多协程的比较" aria-hidden="true">#</a> 多线程、多进程、多协程的比较</h3><p>多线程：</p><ul><li>优点：可以利用多核CPU并行运算</li><li>缺点：占用资源最多、可启动数目比线程少</li><li>适合：CPU密集型计算</li></ul><p>多进程：</p><ul><li>优点：相比进程，更轻量、占用资源少</li><li>缺点： <ul><li>相比进程：多线程只能并发执行，不能利用多CPU（GIL）</li><li>相比协程：启动数目有限制，占用内存资源，有线程切换开销</li></ul></li><li>适合：IO密集型计算、同时运行的任务数目要求不多</li></ul><p>多协程：</p><ul><li>优点：内存开销最少、启动协程数量最多</li><li>缺点：支持的库有限制（aiohttp vs requests）、代码实现复杂</li><li>适合：IO密集型计算、需要超多任务运行、但有线程库支持的场景</li></ul><blockquote><p>一个进程中可以启动多个线程，一个线程中可以启动多个协程</p></blockquote><h2 id="创建多线程的方法" tabindex="-1"><a class="header-anchor" href="#创建多线程的方法" aria-hidden="true">#</a> 创建多线程的方法</h2><p><img src="'+e+`" alt="image-20230531161402547"></p><h2 id="简单比较单线程和多线程的速度" tabindex="-1"><a class="header-anchor" href="#简单比较单线程和多线程的速度" aria-hidden="true">#</a> 简单比较单线程和多线程的速度</h2><p>创建爬取内容的文件</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># cnblog_spider.py</span>

<span class="token keyword">import</span> requests

urls <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token string-interpolation"><span class="token string">f&quot;https://www.cnblogs.com#p</span><span class="token interpolation"><span class="token punctuation">{</span>page<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span>
  <span class="token keyword">for</span> page <span class="token keyword">in</span>  <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span>
<span class="token keyword">def</span> <span class="token function">craw</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>
  r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>单线程：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> cnblog_spider <span class="token keyword">import</span> urls<span class="token punctuation">,</span> craw
<span class="token keyword">import</span> threading
<span class="token keyword">import</span> time

<span class="token comment"># 单线程爬取</span>
<span class="token keyword">def</span> <span class="token function">single_thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;single_thread start&quot;</span><span class="token punctuation">)</span>
  <span class="token keyword">for</span> url <span class="token keyword">in</span> urls<span class="token punctuation">:</span>
    craw<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;single_thread end&quot;</span><span class="token punctuation">)</span>
  
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
  start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
  single_thread<span class="token punctuation">(</span><span class="token punctuation">)</span>
  end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;sigle time: </span><span class="token interpolation"><span class="token punctuation">{</span>end <span class="token operator">-</span> start<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
  <span class="token keyword">pass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用时如下：</p><p><img src="`+o+`" alt="image-20230531163513234"></p></li><li><p>多线程</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> cnblog_spider <span class="token keyword">import</span> urls<span class="token punctuation">,</span> craw
<span class="token keyword">import</span> threading
<span class="token keyword">import</span> time
  
<span class="token comment"># 多线程爬取</span>
<span class="token keyword">def</span> <span class="token function">multi_thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;multi_thread start&quot;</span><span class="token punctuation">)</span>
  threads <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">for</span> url <span class="token keyword">in</span> urls<span class="token punctuation">:</span>
    <span class="token comment"># 创建多线程</span>
    threads<span class="token punctuation">.</span>append<span class="token punctuation">(</span>
      <span class="token comment"># 因为这个 args 是个元组，所以这里加了个逗号</span>
      threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>craw<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
  <span class="token comment"># 开启多线程</span>
  <span class="token keyword">for</span> thread <span class="token keyword">in</span> threads<span class="token punctuation">:</span>
    thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment"># 等待多线程结束</span>
  <span class="token keyword">for</span> thread <span class="token keyword">in</span> threads<span class="token punctuation">:</span>
    thread<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;multi_thread end&quot;</span><span class="token punctuation">)</span>
  
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
  start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
  multi_thread<span class="token punctuation">(</span><span class="token punctuation">)</span>
  end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;multi time: </span><span class="token interpolation"><span class="token punctuation">{</span>end <span class="token operator">-</span> start<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
  <span class="token keyword">pass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用时如下：</p><p><img src="`+c+'" alt="image-20230531163614451"></p></li></ol><blockquote><p>可以看到，多线程比单线程用时快了<code>8.29 / 0.28 = 29.6</code>倍。</p><p>测试时使用的CPU为：i5-12400f</p></blockquote><h2 id="实现生产者-消费者模式爬虫架构" tabindex="-1"><a class="header-anchor" href="#实现生产者-消费者模式爬虫架构" aria-hidden="true">#</a> 实现生产者-消费者模式爬虫架构</h2><h3 id="多组件的pipeline技术架构" tabindex="-1"><a class="header-anchor" href="#多组件的pipeline技术架构" aria-hidden="true">#</a> 多组件的Pipeline技术架构</h3><p>复杂的事情不会一步到位，一般会有很多的中间步骤，用以降低整体的复杂度。</p><p>下面这个流程就叫Pipeline，其中的每个处理器就叫Processor：</p><p><img src="'+i+'" alt="image-20230531164027257"></p><p>上面这个流程中，处理器1就是生产者，它的作用是获取输入数据，然后生成结果给下一个处理器。最后一个处理器就是消费者，它的作用是获取中间数据，生成输出数据返回。</p><h3 id="生产者-消费者爬虫架构" tabindex="-1"><a class="header-anchor" href="#生产者-消费者爬虫架构" aria-hidden="true">#</a> 生产者-消费者爬虫架构</h3><p><img src="'+l+'" alt="image-20230531164512071"></p><p>简单说就是：生产者通过读取待爬取的url列表，将内容下载下来，然后将下载好的网页队列给到中间处理器进行解析，最后将所有的解析结果给到消费者，它将这些内容存入文件或数据库。</p><h3 id="多线程数据通信" tabindex="-1"><a class="header-anchor" href="#多线程数据通信" aria-hidden="true">#</a> 多线程数据通信</h3><p>queue.Queue可以用于多线程之间的、线程安全的数据通信。</p><p><img src="'+u+`" alt="image-20230531164854061"></p><blockquote><p><code>q.put()</code>会阻塞主线程，即当q已经满了的情况下，它不会向其中put内容，直到有一个数据被取出，空出空间后才会继续put。</p><p><code>q.get()</code>也会阻塞主线程，即当q中没有数据时，它会卡住，直到q中有内容能获取，才会继续get。</p></blockquote><h3 id="生产者-消费者爬虫简单实例" tabindex="-1"><a class="header-anchor" href="#生产者-消费者爬虫简单实例" aria-hidden="true">#</a> 生产者-消费者爬虫简单实例</h3><p>爬虫程序</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># cnblog_spider.py</span>

<span class="token keyword">import</span> requests
<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup

urls <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token string-interpolation"><span class="token string">f&quot;https://www.cnblogs.com#p</span><span class="token interpolation"><span class="token punctuation">{</span>page<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span>
  <span class="token keyword">for</span> page <span class="token keyword">in</span>  <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span>
<span class="token keyword">def</span> <span class="token function">craw</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>
  r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
  <span class="token comment"># print(url, len(r.text))</span>
  <span class="token keyword">return</span> r<span class="token punctuation">.</span>text
  
<span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">:</span>
  soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">&quot;html.parser&quot;</span><span class="token punctuation">)</span>
  links <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&quot;class&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;post-item-title&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>link<span class="token punctuation">[</span><span class="token string">&quot;href&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> link<span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> link <span class="token keyword">in</span> links<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用threading和queue实现生产者-消费者功能</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> queue
<span class="token keyword">from</span> cnblog_spider <span class="token keyword">import</span> craw<span class="token punctuation">,</span> parse<span class="token punctuation">,</span> urls
<span class="token keyword">import</span> time
<span class="token keyword">import</span> random
<span class="token keyword">import</span> threading

<span class="token comment"># 生产者线程执行函数</span>
<span class="token keyword">def</span> <span class="token function">do_craw</span><span class="token punctuation">(</span>url_queue<span class="token punctuation">:</span> queue<span class="token punctuation">.</span>Queue<span class="token punctuation">,</span> html_queue<span class="token punctuation">:</span> queue<span class="token punctuation">.</span>Queue<span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    url <span class="token operator">=</span> url_queue<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>
    html <span class="token operator">=</span> craw<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
    html_queue<span class="token punctuation">.</span>put<span class="token punctuation">(</span>html<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f&quot;craw </span><span class="token interpolation"><span class="token punctuation">{</span>url<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f&quot;url_queue.size=</span><span class="token interpolation"><span class="token punctuation">{</span>url_queue<span class="token punctuation">.</span>qsize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 消费者线程执行函数</span>
<span class="token keyword">def</span> <span class="token function">do_parse</span><span class="token punctuation">(</span>html_queue<span class="token punctuation">:</span> queue<span class="token punctuation">.</span>Queue<span class="token punctuation">,</span> fout<span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token comment"># fout 是写入内容的文件</span>
  <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    html <span class="token operator">=</span> html_queue<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>
    res <span class="token operator">=</span> parse<span class="token punctuation">(</span>html<span class="token punctuation">)</span>
    <span class="token keyword">for</span> result <span class="token keyword">in</span> res<span class="token punctuation">:</span>
      fout<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f&quot;res.size </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token builtin">len</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f&quot;html_queue.size=</span><span class="token interpolation"><span class="token punctuation">{</span>html_queue<span class="token punctuation">.</span>qsize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
  <span class="token comment"># 创建 url 队列和 html 队列</span>
  url_queue <span class="token operator">=</span> queue<span class="token punctuation">.</span>Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>
  html_queue <span class="token operator">=</span> queue<span class="token punctuation">.</span>Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>
  
  <span class="token comment"># 向 url 队列存入 url 数据</span>
  <span class="token keyword">for</span> url <span class="token keyword">in</span> urls<span class="token punctuation">:</span>
    url_queue<span class="token punctuation">.</span>put<span class="token punctuation">(</span>url<span class="token punctuation">)</span>

  <span class="token comment"># 生产者线程</span>
  <span class="token keyword">for</span> idx <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    t <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>do_craw<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>url_queue<span class="token punctuation">,</span> html_queue<span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f&quot;craw</span><span class="token interpolation"><span class="token punctuation">{</span>idx<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
  
  <span class="token comment"># 消费者线程</span>
  fout <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;producer_consumer_spider.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;w&quot;</span><span class="token punctuation">)</span>
  <span class="token keyword">for</span> idx <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    t <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>do_parse<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>html_queue<span class="token punctuation">,</span> fout<span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f&quot;parse</span><span class="token interpolation"><span class="token punctuation">{</span>idx<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="python-线程安全问题和解决方案" tabindex="-1"><a class="header-anchor" href="#python-线程安全问题和解决方案" aria-hidden="true">#</a> python 线程安全问题和解决方案</h2><h3 id="线程安全" tabindex="-1"><a class="header-anchor" href="#线程安全" aria-hidden="true">#</a> 线程安全</h3><p>线程安全指某个函数、函数库在多线程环境中被调用时，能够正确地处理多个线程之间的共享变量，使程序功能正确完成。</p><p>由于线程的执行随时会发生切换，就造成了不可预料的结果，出现线程不安全。</p><p>如一个 if 判断，在第一个线程中进入了 if，而还没执行 if 中的语句，第二个线程也进入了 if（但是实际想要的情况是第一个线程的 if 执行了后，第二个线程的 if 条件就不满足了，无法进入），这样就会导致出现错误。</p><h3 id="lock-用于解决线程安全问题" tabindex="-1"><a class="header-anchor" href="#lock-用于解决线程安全问题" aria-hidden="true">#</a> Lock 用于解决线程安全问题</h3><p><img src="`+r+`" alt="image-20230601135149216"></p><ul><li><p>没有加锁的情况</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> threading
<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep

<span class="token keyword">class</span> <span class="token class-name">Account</span><span class="token punctuation">:</span>
  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> balance<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    self<span class="token punctuation">.</span>balance <span class="token operator">=</span> balance
    
<span class="token keyword">def</span> <span class="token function">draw</span><span class="token punctuation">(</span>account<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">if</span> account<span class="token punctuation">.</span>balance <span class="token operator">&gt;=</span> amount<span class="token punctuation">:</span>
    <span class="token comment"># sleep 会导致线程的阻塞，从而切换线程</span>
    sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">&quot;取钱成功&quot;</span><span class="token punctuation">)</span>
    account<span class="token punctuation">.</span>balance <span class="token operator">-=</span> amount
    <span class="token keyword">print</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f&quot;余额：</span><span class="token interpolation"><span class="token punctuation">{</span>account<span class="token punctuation">.</span>balance<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
  <span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">&quot;取钱失败，余额不足&quot;</span><span class="token punctuation">)</span>
    

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
  account <span class="token operator">=</span> Account<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>
  <span class="token comment"># 创建两个线程</span>
  ta <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;ta&quot;</span><span class="token punctuation">,</span> target<span class="token operator">=</span>draw<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>account<span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  tb <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;tb&quot;</span><span class="token punctuation">,</span> target<span class="token operator">=</span>draw<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>account<span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  
  ta<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
  tb<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+k+`" alt="image-20230601140349536"></p></li><li><p>加锁的情况</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> threading
<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep

<span class="token comment"># 实例化线程锁</span>
lock <span class="token operator">=</span> threading<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Account</span><span class="token punctuation">:</span>
  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> balance<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    self<span class="token punctuation">.</span>balance <span class="token operator">=</span> balance
    
<span class="token keyword">def</span> <span class="token function">draw</span><span class="token punctuation">(</span>account<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token comment"># 添加线程锁</span>
  <span class="token keyword">with</span> lock<span class="token punctuation">:</span>
    <span class="token keyword">if</span> account<span class="token punctuation">.</span>balance <span class="token operator">&gt;=</span> amount<span class="token punctuation">:</span>
      <span class="token comment"># sleep 会导致线程的阻塞，从而切换线程</span>
      sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>
      <span class="token keyword">print</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">&quot;取钱成功&quot;</span><span class="token punctuation">)</span>
      account<span class="token punctuation">.</span>balance <span class="token operator">-=</span> amount
      <span class="token keyword">print</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f&quot;余额：</span><span class="token interpolation"><span class="token punctuation">{</span>account<span class="token punctuation">.</span>balance<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
      <span class="token keyword">print</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">&quot;取钱失败，余额不足&quot;</span><span class="token punctuation">)</span>
    

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
  account <span class="token operator">=</span> Account<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>
  <span class="token comment"># 启动两个线程</span>
  ta <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;ta&quot;</span><span class="token punctuation">,</span> target<span class="token operator">=</span>draw<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>account<span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  tb <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;tb&quot;</span><span class="token punctuation">,</span> target<span class="token operator">=</span>draw<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>account<span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  
  ta<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
  tb<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+d+'" alt="image-20230601140618830"></p></li></ul><h2 id="python好用的线程池threadpoolexecutor" tabindex="-1"><a class="header-anchor" href="#python好用的线程池threadpoolexecutor" aria-hidden="true">#</a> python好用的线程池ThreadPoolExecutor</h2><h3 id="线程池的原理" tabindex="-1"><a class="header-anchor" href="#线程池的原理" aria-hidden="true">#</a> 线程池的原理</h3><p><img src="'+m+'" alt="image-20230601140848331"></p><p>上图是线程的生命周期图。</p><p>因为程序中可能会有很多的线程，因此每次新建线程时，就需要分配资源，每次终止线程时，就需要回收资源。这样新建和终止都有一些时间开销，如果一个线程我们可以拿来重用，则可以去除新建和终止的时间开销了，这就是线程池基于的原理。</p><p><img src="'+v+'" alt="image-20230601141347696"></p><h3 id="使用线程池的好处" tabindex="-1"><a class="header-anchor" href="#使用线程池的好处" aria-hidden="true">#</a> 使用线程池的好处</h3><ol><li>提升性能：因为去掉了大量新建、终止线程的开销，重用了线程资源；</li><li>适用场景：适合处理突发性大量请求或需要大量线程完成任务、但实际任务处理时间较短；</li><li>防御功能：能有效避免系统因为创建线程过多，而导致系统负荷过大相应变慢等问题；</li><li>代码优势：使用线程池的语法比自己新建线程执行线程更加简洁。</li></ol><h3 id="threadpoolexecutor的使用语法" tabindex="-1"><a class="header-anchor" href="#threadpoolexecutor的使用语法" aria-hidden="true">#</a> ThreadPoolExecutor的使用语法</h3><p><img src="'+b+`" alt="image-20230601141802571"></p><p>使用线程池的代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> concurrent<span class="token punctuation">.</span>futures
<span class="token comment"># 从前面的爬虫程序中导入方法和变量</span>
<span class="token keyword">from</span> cnblog_spider <span class="token keyword">import</span> craw<span class="token punctuation">,</span> parse<span class="token punctuation">,</span> urls

<span class="token comment"># craw</span>
<span class="token keyword">with</span> concurrent<span class="token punctuation">.</span>futures<span class="token punctuation">.</span>ThreadPoolExecutor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pool<span class="token punctuation">:</span>
  <span class="token comment"># urls 是一个列表</span>
  htmls <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>craw<span class="token punctuation">,</span> urls<span class="token punctuation">)</span>
  htmls <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>urls<span class="token punctuation">,</span> htmls<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">for</span> url<span class="token punctuation">,</span> html <span class="token keyword">in</span> htmls<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">)</span>
    
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;craw over&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># parse</span>
<span class="token keyword">with</span> concurrent<span class="token punctuation">.</span>futures<span class="token punctuation">.</span>ThreadPoolExecutor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pool<span class="token punctuation">:</span>
  futures <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">for</span> url<span class="token punctuation">,</span> html <span class="token keyword">in</span> htmls<span class="token punctuation">:</span>
    future <span class="token operator">=</span> pool<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>parse<span class="token punctuation">,</span> html<span class="token punctuation">)</span>
    futures<span class="token punctuation">[</span>future<span class="token punctuation">]</span> <span class="token operator">=</span> url
  
  <span class="token comment"># 按顺序执行和输出</span>
  <span class="token keyword">for</span> future<span class="token punctuation">,</span> url <span class="token keyword">in</span> futures<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> future<span class="token punctuation">.</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  
  <span class="token comment"># 谁先执行完，谁先输出，乱序的</span>
  <span class="token keyword">for</span> future <span class="token keyword">in</span> concurrent<span class="token punctuation">.</span>futures<span class="token punctuation">.</span>as_completed<span class="token punctuation">(</span>futures<span class="token punctuation">)</span><span class="token punctuation">:</span>
    url <span class="token operator">=</span> futures<span class="token punctuation">[</span>future<span class="token punctuation">]</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> future<span class="token punctuation">.</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="在-web-服务中使用线程池实现加速" tabindex="-1"><a class="header-anchor" href="#在-web-服务中使用线程池实现加速" aria-hidden="true">#</a> 在 Web 服务中使用线程池实现加速</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI
<span class="token keyword">import</span> uvicorn
<span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ThreadPoolExecutor
<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep

app <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>
pool <span class="token operator">=</span> ThreadPoolExecutor<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">read_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token string">&quot;file done&quot;</span>

<span class="token keyword">def</span> <span class="token function">read_db</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  sleep<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token string">&quot;db done&quot;</span>

<span class="token keyword">def</span> <span class="token function">read_api</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  sleep<span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token string">&quot;api done&quot;</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">root</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token comment"># 不使用线程池加速的情况下，这三个任务总耗时为三个任务之和，即大概 600ms</span>
  <span class="token comment"># 使用线程池加速的情况下，这三个任务总耗时为三个任务中耗时最长的任务，即大概300ms</span>
  res_file <span class="token operator">=</span> pool<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>read_file<span class="token punctuation">)</span>
  res_db <span class="token operator">=</span> pool<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>read_db<span class="token punctuation">)</span>
  res_api <span class="token operator">=</span> pool<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>read_api<span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;res_file&quot;</span><span class="token punctuation">:</span> res_file<span class="token punctuation">.</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string">&quot;res_db&quot;</span><span class="token punctuation">:</span> res_db<span class="token punctuation">.</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string">&quot;res_api&quot;</span><span class="token punctuation">:</span> res_api<span class="token punctuation">.</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
  
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
  uvicorn<span class="token punctuation">.</span>run<span class="token punctuation">(</span>
    app<span class="token operator">=</span><span class="token string">&quot;web_thread_pool:app&quot;</span><span class="token punctuation">,</span>
    host<span class="token operator">=</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">,</span>
    port<span class="token operator">=</span><span class="token number">8000</span><span class="token punctuation">,</span>
    <span class="token builtin">reload</span><span class="token operator">=</span><span class="token boolean">True</span>
  <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用多进程-multiprocessing-模块加速程序" tabindex="-1"><a class="header-anchor" href="#使用多进程-multiprocessing-模块加速程序" aria-hidden="true">#</a> 使用多进程 multiprocessing 模块加速程序</h2><h3 id="为什么有了多线程-还要使用多进程" tabindex="-1"><a class="header-anchor" href="#为什么有了多线程-还要使用多进程" aria-hidden="true">#</a> 为什么有了多线程，还要使用多进程</h3><p><img src="`+h+'" alt="image-20230601145735271"></p><p>上图中的每个 check，都会增加性能损耗，导致减慢运行速度，因此需要多进程。</p><h3 id="多进程知识梳理" tabindex="-1"><a class="header-anchor" href="#多进程知识梳理" aria-hidden="true">#</a> 多进程知识梳理</h3><p>多进程知识对比多线程，我们会发现除了类名之外，其他使用方式几乎一样：</p><p><img src="'+g+`" alt="image-20230601145926598"></p><h2 id="在-web-服务中使用多进程加速" tabindex="-1"><a class="header-anchor" href="#在-web-服务中使用多进程加速" aria-hidden="true">#</a> 在 web 服务中使用多进程加速</h2><p>这跟使用多线程类似，但是有一个很关键的区别：<strong>多进程创建进程池的代码必须写在 main 中（如果使用的是flask框架，我测试fastapi框架时没有问题）</strong>，如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> flask
<span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ProcessPoolExecutor

app <span class="token operator">=</span> flask<span class="token punctuation">.</span>Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>
<span class="token comment"># 如果写在这里会报错</span>
<span class="token comment"># pool = ProcessPoolExecutor()</span>

<span class="token comment"># ... 这里省略其他业务代码</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
  <span class="token comment"># 写在这里就可以正常运行</span>
	pool <span class="token operator">=</span> ProcessPoolExecutor<span class="token punctuation">(</span><span class="token punctuation">)</span>
 	app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="异步io实现并发爬虫" tabindex="-1"><a class="header-anchor" href="#异步io实现并发爬虫" aria-hidden="true">#</a> 异步IO实现并发爬虫</h2><h3 id="协程-在单线程中实现并发" tabindex="-1"><a class="header-anchor" href="#协程-在单线程中实现并发" aria-hidden="true">#</a> 协程：在单线程中实现并发</h3><p>核心原理：用一个超级循环，即 while True，配合IO多路复用原理（IO执行时，CPU可以执行其他任务）</p><p><img src="`+y+'" alt="image-20230601163149390"></p><h3 id="异步io库-asyncio" tabindex="-1"><a class="header-anchor" href="#异步io库-asyncio" aria-hidden="true">#</a> 异步IO库：asyncio</h3><p><img src="'+w+`" alt="image-20230601163433220"></p><h3 id="异步io爬虫示例" tabindex="-1"><a class="header-anchor" href="#异步io爬虫示例" aria-hidden="true">#</a> 异步IO爬虫示例：</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> asyncio
<span class="token comment"># 因为 requests 不支持 asyncio，因此需要 aiohttp 这个库</span>
<span class="token keyword">import</span> aiohttp
<span class="token keyword">import</span> time

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">async_craw</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;craw url: </span><span class="token interpolation"><span class="token punctuation">{</span>url<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
  <span class="token keyword">async</span> <span class="token keyword">with</span> aiohttp<span class="token punctuation">.</span>ClientSession<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> session<span class="token punctuation">:</span>
    <span class="token keyword">async</span> <span class="token keyword">with</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token keyword">as</span> resp<span class="token punctuation">:</span>
      <span class="token comment"># 这里的 await 等待时，会触发下一个任务的执行</span>
      result <span class="token operator">=</span> <span class="token keyword">await</span> resp<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;craw url: </span><span class="token interpolation"><span class="token punctuation">{</span>url<span class="token punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token builtin">len</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
      
loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># url列表：包含所有要爬取的页面</span>
urls <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token string-interpolation"><span class="token string">f&quot;https://www.cnblogs.com#p</span><span class="token interpolation"><span class="token punctuation">{</span>page<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span>
  <span class="token keyword">for</span> page <span class="token keyword">in</span>  <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span>
<span class="token comment"># 任务列表：给每个网页的爬取都创建一个任务</span>
tasks <span class="token operator">=</span> <span class="token punctuation">[</span>
  loop<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>async_craw<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">for</span> url <span class="token keyword">in</span> urls
<span class="token punctuation">]</span>

start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># 执行任务，直到全部完成</span>
loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token punctuation">)</span>
end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;time is: </span><span class="token interpolation"><span class="token punctuation">{</span>end <span class="token operator">-</span> start<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+_+'" alt="image-20230601164726748"></p><h3 id="使用信号量控制异步io的并发量" tabindex="-1"><a class="header-anchor" href="#使用信号量控制异步io的并发量" aria-hidden="true">#</a> 使用信号量控制异步IO的并发量</h3><p><img src="'+f+`" alt="image-20230601165134407"></p><p>上面的代码的改造：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> asyncio
<span class="token keyword">import</span> aiohttp
<span class="token keyword">import</span> time

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">async_craw</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token comment"># 控制并发量  </span>
  <span class="token keyword">async</span> <span class="token keyword">with</span> sem<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;craw url: </span><span class="token interpolation"><span class="token punctuation">{</span>url<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">async</span> <span class="token keyword">with</span> aiohttp<span class="token punctuation">.</span>ClientSession<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> session<span class="token punctuation">:</span>
      <span class="token keyword">async</span> <span class="token keyword">with</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token keyword">as</span> resp<span class="token punctuation">:</span>
        result <span class="token operator">=</span> <span class="token keyword">await</span> resp<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;craw url: </span><span class="token interpolation"><span class="token punctuation">{</span>url<span class="token punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token builtin">len</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
      
loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># 控制并发量</span>
sem <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>Semaphore<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
urls <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token string-interpolation"><span class="token string">f&quot;https://www.cnblogs.com#p</span><span class="token interpolation"><span class="token punctuation">{</span>page<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span>
  <span class="token keyword">for</span> page <span class="token keyword">in</span>  <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span>
tasks <span class="token operator">=</span> <span class="token punctuation">[</span>
  loop<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>async_craw<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">for</span> url <span class="token keyword">in</span> urls
<span class="token punctuation">]</span>

start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token punctuation">)</span>
end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;time is: </span><span class="token interpolation"><span class="token punctuation">{</span>end <span class="token operator">-</span> start<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+q+'" alt="image-20230601165651843"></p>',88),C=[P];function I(T,O){return s(),a("div",null,C)}const E=n(x,[["render",I],["__file","并发编程.html.vue"]]);export{E as default};
