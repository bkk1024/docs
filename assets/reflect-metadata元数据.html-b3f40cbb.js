import{_ as n,W as a,X as s,a0 as t}from"./framework-4f54a744.js";const e={},p=t(`<h1 id="reflect-metadata-元数据" tabindex="-1"><a class="header-anchor" href="#reflect-metadata-元数据" aria-hidden="true">#</a> Reflect Metadata 元数据</h1><p>Reflect Metadata 是 ES7 的一个提案，它<strong>主要用来在声明的时候添加和读取元数据</strong>。TypeScript 在 1.5+ 的版本已经支持它，你只需要：</p><ul><li><code>npm i reflect-metadata --save</code></li><li>在<code>tsconfig.json</code>里配置<code>emitDecoratorMetadata</code>选项。</li><li>最后<code>import &#39;reflect-metadata&#39;</code>引入即可</li></ul><h2 id="metadata方法" tabindex="-1"><a class="header-anchor" href="#metadata方法" aria-hidden="true">#</a> metadata方法</h2><p><code>@Reflect.metadata</code>可以用于类或者类的属性上，当作<code>Decorator</code>使用：</p><ul><li>当修饰类时，在类上添加元数据</li><li>当修饰类属性时，在类原型的属性上添加元数据</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token string">&quot;reflect-metadata&quot;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Reflect</span></span><span class="token punctuation">.</span><span class="token function">metadata</span><span class="token punctuation">(</span><span class="token string">&quot;Class&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Test&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
	<span class="token decorator"><span class="token at operator">@</span><span class="token function">Reflect</span></span><span class="token punctuation">.</span><span class="token function">metadata</span><span class="token punctuation">(</span><span class="token string">&quot;Method&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span>
	<span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token string">&quot;hello world&quot;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token string">&quot;Class&quot;</span><span class="token punctuation">,</span> Test<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Test</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token string">&quot;Method&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Hello World</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>metadata</code>方法的定义如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">/**
* @param {string} metadataKey 元数据入口的key
* @param {*} metadataValue 元数据入口的value
* @returns 装饰器函数
*/</span>
<span class="token keyword">function</span> <span class="token function">metadata</span><span class="token punctuation">(</span>metadataKey<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> metadataValue<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">{</span>
	<span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
	<span class="token punctuation">(</span>target<span class="token operator">:</span> Object<span class="token punctuation">,</span> propertyKey<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">symbol</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>这个函数定义了一个函数重载，它接受两个参数 metadataKey 和 metadataValue，这两个参数分别用于表示元数据的键和值。</p><p>该函数重载定义了两个不同的函数签名，具体如下：</p><ol><li>第一个签名接受一个参数 target，该参数是一个函数，且返回值为 void。当只传入一个参数时，该函数应该被调用。这个签名的作用是为一个类添加元数据。</li><li>第二个签名接受两个参数 target 和 propertyKey，分别表示目标对象和属性名。当传入两个参数时，该函数应该被调用。这个签名的作用是为类的某个属性添加元数据。</li></ol><p>通过这两个函数签名的组合，我们可以使用 metadata 函数为类及其属性添加元数据。这个功能通常用于实现装饰器模式和注解。</p></div><h2 id="getmetadata方法" tabindex="-1"><a class="header-anchor" href="#getmetadata方法" aria-hidden="true">#</a> getMetadata方法</h2><p>使用<code>Reflect.getMetadata()</code>方法可以获取元数据值，它会往原型链上找。</p><p>在上面一节的代码中也可以看到使用方式。</p><p>定义如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">/**
 * @param metadataKey 要获取的元数据的 key
 * @param target 从这个对象上获取元数据
 * @param propertyKey 从这个属性上获取元数据
 */</span>
<span class="token keyword">function</span> <span class="token function">getMetadata</span><span class="token punctuation">(</span>metadataKey<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> target<span class="token operator">:</span> Object<span class="token punctuation">,</span> propertyKey<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">symbol</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注</p><p>这里不是<code>@Reflect.getMetadata()</code>，只有<code>metadata</code>方法才当作装饰器使用，其他方法都是<code>Reflect.方法</code>。</p></div><h2 id="definemetadata方法" tabindex="-1"><a class="header-anchor" href="#definemetadata方法" aria-hidden="true">#</a> defineMetadata方法</h2><p>这个方法是<code>metadata</code>方法的定义版本，即非<code>@Reflect</code>版本，会多传递一个<code>target</code>参数，表示待装饰的对象。</p><p>定义如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">/**
 * @param metadataKey 元数据的键名，用于指定要定义的元数据类型。
 * @param metadataValue 元数据的值，用于描述元数据的具体内容。
 * @param target 从这个对象上获取元数据
 * @param propertyKey 从这个属性上获取元数据
 */</span>
<span class="token keyword">function</span> <span class="token function">defineMetadata</span><span class="token punctuation">(</span>metadataKey<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> metadataValue<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> target<span class="token operator">:</span> Object<span class="token punctuation">,</span> propertyKey<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">symbol</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
	<span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token keyword">static</span> <span class="token function">world</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token keyword">static</span> url<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;/api/list&quot;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> metadataKey <span class="token operator">=</span> <span class="token string">&quot;key&quot;</span>

Reflect<span class="token punctuation">.</span><span class="token function">defineMetadata</span><span class="token punctuation">(</span>metadataKey<span class="token punctuation">,</span> <span class="token string">&quot;class&quot;</span><span class="token punctuation">,</span> Test<span class="token punctuation">)</span>
Reflect<span class="token punctuation">.</span><span class="token function">defineMetadata</span><span class="token punctuation">(</span>metadataKey<span class="token punctuation">,</span> <span class="token string">&quot;method&quot;</span><span class="token punctuation">,</span> Test<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>hello<span class="token punctuation">)</span>
Reflect<span class="token punctuation">.</span><span class="token function">defineMetadata</span><span class="token punctuation">(</span>metadataKey<span class="token punctuation">,</span> <span class="token string">&quot;staticMethod&quot;</span><span class="token punctuation">,</span> Test<span class="token punctuation">.</span>world<span class="token punctuation">)</span>
Reflect<span class="token punctuation">.</span><span class="token function">defineMetadata</span><span class="token punctuation">(</span>metadataKey<span class="token punctuation">,</span> <span class="token string">&quot;staticProperty&quot;</span><span class="token punctuation">,</span> Test<span class="token punctuation">,</span> Test<span class="token punctuation">.</span>url<span class="token punctuation">)</span>

<span class="token keyword">const</span> meta1 <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span>metadataKey<span class="token punctuation">,</span> Test<span class="token punctuation">)</span>
<span class="token keyword">const</span> meta2 <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span>metadataKey<span class="token punctuation">,</span> Test<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>hello<span class="token punctuation">)</span>
<span class="token keyword">const</span> meta3 <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span>metadataKey<span class="token punctuation">,</span> Test<span class="token punctuation">.</span>world<span class="token punctuation">)</span>
<span class="token keyword">const</span> meta4 <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span>metadataKey<span class="token punctuation">,</span> Test<span class="token punctuation">,</span> Test<span class="token punctuation">.</span>url<span class="token punctuation">)</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>meta1<span class="token punctuation">)</span> <span class="token comment">// class</span>
<span class="token class-name"><span class="token builtin">console</span></span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>meta2<span class="token punctuation">)</span> <span class="token comment">// method</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>meta3<span class="token punctuation">)</span> <span class="token comment">// staticMethod</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>meta4<span class="token punctuation">)</span> <span class="token comment">// staticProperty</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="hasmetadata方法" tabindex="-1"><a class="header-anchor" href="#hasmetadata方法" aria-hidden="true">#</a> hasMetadata方法</h2><p>返回一个<code>boolean</code>，表明这个<code>target</code>上是否有元数据。</p><p>定义如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">/**
 * @param metadataKey 要查找的元数据的 key
 * @param target 从这个对象上查找元数据
 * @param propertyKey 从这个属性上查找元数据
 */</span>
<span class="token keyword">function</span> <span class="token function">hasMetadata</span><span class="token punctuation">(</span>metadataKey<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> target<span class="token operator">:</span> Object<span class="token punctuation">,</span> propertyKey<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">symbol</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
	<span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> metadataKey <span class="token operator">=</span> <span class="token string">&quot;key&quot;</span>

Reflect<span class="token punctuation">.</span><span class="token function">defineMetadata</span><span class="token punctuation">(</span>metadataKey<span class="token punctuation">,</span> <span class="token string">&quot;class&quot;</span><span class="token punctuation">,</span> Test<span class="token punctuation">)</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">hasMetadata</span><span class="token punctuation">(</span>metadataKey<span class="token punctuation">,</span> Test<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="hasownmetadata方法" tabindex="-1"><a class="header-anchor" href="#hasownmetadata方法" aria-hidden="true">#</a> hasOwnMetadata方法</h2><p>跟<code>Object.prototype.hasOwnProperty</code>类似, 是<strong>只查找对象上的元数据, 而不会继续向上查找原型链上的</strong>, 其余的跟hasMetadata一致。</p><h2 id="getownmetadata方法" tabindex="-1"><a class="header-anchor" href="#getownmetadata方法" aria-hidden="true">#</a> getOwnMetadata方法</h2><p>与<code>hasOwnMetadata</code>和<code>hasMetadata</code>的区别一样, 是否往原型链上找。</p><h2 id="getmetadatakeys方法" tabindex="-1"><a class="header-anchor" href="#getmetadatakeys方法" aria-hidden="true">#</a> getMetadataKeys方法</h2><p>获取该<code>target</code>以及原型链上的<code>target</code>的所有元数据的<code>key</code>。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Reflect</span></span><span class="token punctuation">.</span><span class="token function">metadata</span><span class="token punctuation">(</span><span class="token string">&quot;Person&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;person&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
	name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Reflect</span></span><span class="token punctuation">.</span><span class="token function">metadata</span><span class="token punctuation">(</span><span class="token string">&quot;Man&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;man&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
	gender<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;male&quot;</span>
<span class="token punctuation">}</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">getMetadataKeys</span><span class="token punctuation">(</span>Man<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [ &#39;Man&#39;, &#39;Person&#39; ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="getownmetadatakeys方法" tabindex="-1"><a class="header-anchor" href="#getownmetadatakeys方法" aria-hidden="true">#</a> getOwnMetadataKeys方法</h2><p>与<code>getMetadataKeys</code>方法类似，只是只找自己的，不往原型链上找</p><h2 id="deletemetadata方法" tabindex="-1"><a class="header-anchor" href="#deletemetadata方法" aria-hidden="true">#</a> deleteMetadata方法</h2><p>用于删除<code>target</code>上的元数据。</p><p>定义如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">/**
 * @param metadataKey 要删除的元数据的 key
 * @param target 从这个对象上删除元数据
 * @param propertyKey 从这个属性上删除元数据
 */</span>
<span class="token keyword">function</span> <span class="token function">deleteMetadata</span><span class="token punctuation">(</span>metadataKey<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> target<span class="token operator">:</span> Object<span class="token punctuation">,</span> propertyKey<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">symbol</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Reflect</span></span><span class="token punctuation">.</span><span class="token function">metadata</span><span class="token punctuation">(</span><span class="token string">&quot;Person&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;person&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
	name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Reflect</span></span><span class="token punctuation">.</span><span class="token function">metadata</span><span class="token punctuation">(</span><span class="token string">&quot;Man&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;man&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
	gender<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;male&quot;</span>
<span class="token punctuation">}</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">getMetadataKeys</span><span class="token punctuation">(</span>Man<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [ &#39;Man&#39;, &#39;Person&#39; ]</span>

Reflect<span class="token punctuation">.</span><span class="token function">deleteMetadata</span><span class="token punctuation">(</span><span class="token string">&quot;Man&quot;</span><span class="token punctuation">,</span> Man<span class="token punctuation">)</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">getMetadataKeys</span><span class="token punctuation">(</span>Man<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [ &#39;Person&#39; ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,43),o=[p];function c(l,i){return a(),s("div",null,o)}const d=n(e,[["render",c],["__file","reflect-metadata元数据.html.vue"]]);export{d as default};
