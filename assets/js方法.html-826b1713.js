import{_ as p,W as o,X as c,Y as n,Z as s,$ as t,a0 as e,C as l}from"./framework-4f54a744.js";const i="/docs/assets/image-20221228153917416-4aad0805.png",u={},r=e(`<h1 id="js-方法" tabindex="-1"><a class="header-anchor" href="#js-方法" aria-hidden="true">#</a> js 方法</h1><h2 id="_1、手机号分割" tabindex="-1"><a class="header-anchor" href="#_1、手机号分割" aria-hidden="true">#</a> 1、手机号分割</h2><p>将手机号 <code>12345678900</code> 转换为 <code>123 4567 8900</code> 。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">formateTel</span><span class="token punctuation">(</span><span class="token parameter">tel</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\d{3})(\\d{4})(\\d{4})</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span> <span class="token comment">// 将手机号分割为三个部分</span>
	<span class="token keyword">return</span> <span class="token function">String</span><span class="token punctuation">(</span>tel<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">&quot;$1 $2 $3&quot;</span><span class="token punctuation">)</span> <span class="token comment">// $1, $2, $3 分别为正则表达式分割的三个部分</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2、检验密码是否合规" tabindex="-1"><a class="header-anchor" href="#_2、检验密码是否合规" aria-hidden="true">#</a> 2、检验密码是否合规</h2><p>如这里有个要求：密码格式位： <code>长度为 8-16 位，且必须包含大小写字母、数字、特殊字符@、#、$ </code> 。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">checkPassword</span><span class="token punctuation">(</span><span class="token parameter">password</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$])[a-zA-Z0-9@#$]{8,16}$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
	<span class="token keyword">return</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这里使用 <code>正向肯定预查</code> 模式，并使用 <code>.</code> 排除换行符，使用 <code>*</code> 匹配 0 次或多次。</p></blockquote><h2 id="_3、千分位分隔符" tabindex="-1"><a class="header-anchor" href="#_3、千分位分隔符" aria-hidden="true">#</a> 3、千分位分隔符</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">formateNumThousand</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?!^)(?=(\\d{3})+$)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
	<span class="token keyword">return</span> <span class="token function">String</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>/(?=(\\d{3})+$)/g</code> 表示每三位一匹配，但是会有一个问题，它会在数字最前方也加上一个逗号，因此需要使用 <code>(?!^)</code> 去除头部逗号，它表示忽略开头。</p></blockquote><h2 id="_4、初始化数组" tabindex="-1"><a class="header-anchor" href="#_4、初始化数组" aria-hidden="true">#</a> 4、初始化数组</h2><h3 id="初始化一个一维数组" tabindex="-1"><a class="header-anchor" href="#初始化一个一维数组" aria-hidden="true">#</a> 初始化一个一维数组</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* 
	params: 
		len: 数组长度
		content: 填充内容
*/</span>
<span class="token keyword">function</span> <span class="token function">initArray1</span><span class="token punctuation">(</span><span class="token parameter">len<span class="token punctuation">,</span> content</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">Array</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="初始化一个二维数组" tabindex="-1"><a class="header-anchor" href="#初始化一个二维数组" aria-hidden="true">#</a> 初始化一个二维数组</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* 
	params: 
		len1: 第一层数组长度
		len2: 第二层数组长度
		content: 填充内容
*/</span>
<span class="token keyword">function</span> <span class="token function">initArray2</span><span class="token punctuation">(</span><span class="token parameter">len1<span class="token punctuation">,</span> len2<span class="token punctuation">,</span> content</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">Array</span><span class="token punctuation">(</span>len1<span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">Array</span><span class="token punctuation">(</span>len2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5、计算代码运行时间" tabindex="-1"><a class="header-anchor" href="#_5、计算代码运行时间" aria-hidden="true">#</a> 5、计算代码运行时间</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">codeRunTime</span><span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> startTime <span class="token operator">=</span> performance<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	cb <span class="token operator">&amp;&amp;</span> <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">const</span> endTime <span class="token operator">=</span> performance<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> endTime <span class="token operator">-</span> startTime
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6、检验手机号" tabindex="-1"><a class="header-anchor" href="#_6、检验手机号" aria-hidden="true">#</a> 6、检验手机号</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">checkTel</span><span class="token punctuation">(</span><span class="token parameter">tel</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(13[0-9]|14[01456879]|15[0-35-9]|16[2567]|17[0-8]|18[0-9]|19[0-35-9])\\d{8}$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
	<span class="token keyword">return</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>tel<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7、检验身份证号" tabindex="-1"><a class="header-anchor" href="#_7、检验身份证号" aria-hidden="true">#</a> 7、检验身份证号</h2><p>身份证号(15 位、18 位数字)，最后一位是校验位，可能为数字或字符 X|x</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">checkIdCard</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(^\\d{15}$)|(^\\d{18}$)|(^\\d{17}(\\d|X|x)$)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
	<span class="token keyword">return</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8、检验-qq-号" tabindex="-1"><a class="header-anchor" href="#_8、检验-qq-号" aria-hidden="true">#</a> 8、检验 QQ 号</h2><p>腾讯 QQ 号从 10000 开始</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">checkQQ</span><span class="token punctuation">(</span><span class="token parameter"><span class="token constant">QQ</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[1-9][0-9]{4,}</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
	<span class="token keyword">return</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token constant">QQ</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9、检验邮政编码" tabindex="-1"><a class="header-anchor" href="#_9、检验邮政编码" aria-hidden="true">#</a> 9、检验邮政编码</h2><p>中国邮政编码为 6 位数字</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">checkPostalCode</span><span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[1-9]\\d{5}(?!\\d)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
	<span class="token keyword">return</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10、检验邮箱地址" tabindex="-1"><a class="header-anchor" href="#_10、检验邮箱地址" aria-hidden="true">#</a> 10、检验邮箱地址</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">checkEmail</span><span class="token punctuation">(</span><span class="token parameter">email</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
	<span class="token keyword">return</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_11、检验中文" tabindex="-1"><a class="header-anchor" href="#_11、检验中文" aria-hidden="true">#</a> 11、检验中文</h2><p>只检验中文，就算包含中文符号如逗号都返回 false</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">checkChinese</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[\\u4e00-\\u9fa5]*$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
	<span class="token keyword">return</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_12、字典顺序" tabindex="-1"><a class="header-anchor" href="#_12、字典顺序" aria-hidden="true">#</a> 12、字典顺序</h2><p>将一些字符按照字典中的顺序进行排列</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/*
	params: 
		arr: 纯字符串数组
*/</span>
<span class="token keyword">function</span> <span class="token function">orderByDictionary</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span><span class="token function">localeCompare</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;上海&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;北京&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;广州&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;杭州&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;深圳&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;武汉&quot;</span><span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">orderByDictionary</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;北京&#39;, &#39;广州&#39;, &#39;杭州&#39;, &#39;上海&#39;, &#39;深圳&#39;, &#39;武汉&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong><code>a.localeCompare(b)</code></strong> 方法返回一个 <strong>数字</strong> 来表示 a 的排序在 b 的前面或后面。</p></blockquote><h2 id="_13、深克隆" tabindex="-1"><a class="header-anchor" href="#_13、深克隆" aria-hidden="true">#</a> 13、深克隆</h2><h3 id="传统深克隆方法" tabindex="-1"><a class="header-anchor" href="#传统深克隆方法" aria-hidden="true">#</a> 传统深克隆方法</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> objectMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">const</span> <span class="token function-variable function">_deepClone</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> type <span class="token operator">=</span> <span class="token keyword">typeof</span> value
		<span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">!==</span> <span class="token string">&quot;object&quot;</span> <span class="token operator">||</span> type <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> value
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>objectMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> objectMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">const</span> result <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
		objectMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> result<span class="token punctuation">)</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			result<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">_deepClone</span><span class="token punctuation">(</span>value<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> result
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token function">_deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用-messagechannel-方法" tabindex="-1"><a class="header-anchor" href="#使用-messagechannel-方法" aria-hidden="true">#</a> 使用 <code>MessageChannel()</code> 方法</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> <span class="token punctuation">{</span> port1<span class="token punctuation">,</span> port2 <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		port1<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
		port2<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
			<span class="token function">resolve</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,43),d=n("code",null,"MessageChannel",-1),k={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/MessagePort",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"MessagePort",-1),m=n("strong",null,[n("code",null,"MessagePort")],-1),b={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/MessageChannel",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"MessageChannel",-1),h=n("code",null,"port1.postMessage(value)",-1),f=n("code",null,"port2.onmessage = msg => msg.data",-1),y=n("p",null,"MessageChannel.port1 和 MessageChannel.port2 这两个属性是只读的。",-1),w=e(`<h2 id="_14、禁用复制或者更改复制内容" tabindex="-1"><a class="header-anchor" href="#_14、禁用复制或者更改复制内容" aria-hidden="true">#</a> 14、禁用复制或者更改复制内容</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">changeCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;copy&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 禁用复制功能</span>
		<span class="token comment">// e.clipboardData.setData(&quot;text/plain&quot;, window.getSelection().toString() + &#39;哈哈哈哈&#39;) // 更改用户复制内容</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>e.clipboardData.setData(&quot;text/plain&quot;, value)</code> 向用户剪切板写入内容。</p><p><code>window.getSelection().toString()</code> 获取用户复制的内容。</p></blockquote><h2 id="_15、监听-localstorage-值的变化" tabindex="-1"><a class="header-anchor" href="#_15、监听-localstorage-值的变化" aria-hidden="true">#</a> 15、监听 localStorage 值的变化</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;storage&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_16、取消请求" tabindex="-1"><a class="header-anchor" href="#_16、取消请求" aria-hidden="true">#</a> 16、取消请求</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> controller <span class="token operator">=</span> <span class="token keyword">null</span>
input<span class="token punctuation">.</span><span class="token function-variable function">oninput</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	controller <span class="token operator">&amp;&amp;</span> controller<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 取消前面的请求</span>
	controller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AbortController</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 给本次请求创建一个 controller</span>
	<span class="token keyword">try</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>
			url<span class="token punctuation">,</span>
			<span class="token punctuation">{</span> <span class="token literal-property property">signal</span><span class="token operator">:</span> controller<span class="token punctuation">.</span>signal <span class="token punctuation">}</span> <span class="token comment">// 标记本次请求</span>
		<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token comment">// 其他代码</span>
	<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;已取消&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>类似在短期内多次快速进行网络请求时，就可以用到取消请求，如搜索框中实时展示用户输入内容相关联的搜索内容时。</p><p>需要用到的原因是：网络请求为异步操作，而短时间内的多次请求时，我们需要展示用户最后一次请求的内容，而由于请求响应时间的问题，我们实际最后返回的响应内容可能不是用户最后一次请求的响应，而是被响应时间较长的前次请求的结果覆盖了，导致展示内容与实际需要内容不符合的情况。</p><p>代码中使用 try catch 是因为每个被取消掉的请求都会进行报错，因此使用 trt catch 来获取错误，不让其显示在控制台中。</p><p>请求中的 signal 是进行标记请求的，因为 controller 需要知道取消的是哪一个请求。</p></blockquote><h3 id="axios-取消请求" tabindex="-1"><a class="header-anchor" href="#axios-取消请求" aria-hidden="true">#</a> axios 取消请求</h3>`,9),x=n("code",null,"v0.22.0",-1),q={href:"https://developer.mozilla.org/en-US/docs/Web/API/AbortController",target:"_blank",rel:"noopener noreferrer"},j=n("code",null,"AbortController",-1),_=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> controller <span class="token operator">=</span> <span class="token keyword">null</span>
input<span class="token punctuation">.</span><span class="token function-variable function">oninput</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	controller <span class="token operator">&amp;&amp;</span> controller<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	controller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AbortController</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">try</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">signal</span><span class="token operator">:</span> controller<span class="token punctuation">.</span>signal <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token comment">// 其他代码</span>
	<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;已取消&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Axios 的 cancel token API 取消请求从 <code>v0.22.0</code> 开始被弃用，不应在新项目中使用。</p></blockquote><h2 id="_17、fetch-分块加载大数据" tabindex="-1"><a class="header-anchor" href="#_17、fetch-分块加载大数据" aria-hidden="true">#</a> 17、fetch 分块加载大数据</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&quot;flower.jpg&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> reader <span class="token operator">=</span> response<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">getReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">/*
  	done: 返回布尔值，表示请求是否结束
  	value: 返回一个 arrayBuffer 数组，表示内容块的内容
  */</span>
	<span class="token keyword">const</span> <span class="token punctuation">{</span> done<span class="token punctuation">,</span> value <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">break</span>
	<span class="token punctuation">}</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>Response.body</code>属性是 Response 对象暴露出的底层接口，返回一个 ReadableStream 对象，供用户操作。</p><p>它可以用来分块读取内容，应用之一就是显示下载的进度。</p><p>上面示例中，<code>response.body.getReader()</code>方法返回一个遍历器。这个遍历器的<code>read()</code>方法每次返回一个对象，表示本次读取的内容块。</p></blockquote><h2 id="_18、字符串截取-码点和码元" tabindex="-1"><a class="header-anchor" href="#_18、字符串截取-码点和码元" aria-hidden="true">#</a> 18、字符串截取，码点和码元</h2><p>解决某些特殊情况下，使用 slice 等字符串截取方法返回的值包含乱码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&quot;😍测试码元码点&quot;</span>

<span class="token class-name">String</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sliceByPoint</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">pStart<span class="token punctuation">,</span> pEnd</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token string">&quot;&quot;</span> <span class="token comment">// 截取的结果</span>
	<span class="token keyword">let</span> pIndex <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// 码点的指针</span>
	<span class="token keyword">let</span> cIndex <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// 码元的指针</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 当截取到用户输入的结束的index 或者 截取到了整个字符串长度时，跳出循环</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>pIndex <span class="token operator">&gt;=</span> pEnd <span class="token operator">||</span> cIndex <span class="token operator">&gt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 返回值是在字符串中的给定索引的 Unicode 编码点值的非负整数</span>
		<span class="token keyword">const</span> point <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">codePointAt</span><span class="token punctuation">(</span>cIndex<span class="token punctuation">)</span>
		<span class="token comment">// 当循环到用户输入的开始截取的 index 时，开始截取字符串</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>pIndex <span class="token operator">&gt;=</span> pStart<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 返回使用指定的 Unicode 编码位置创建的字符串</span>
			result <span class="token operator">+=</span> String<span class="token punctuation">.</span><span class="token function">fromCodePoint</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 码点指针指向下一个</span>
		pIndex<span class="token operator">++</span>
		<span class="token comment">// 码元指针指向下一个，通过当前这个字符的编码是否大于4位16进制值来判断其占一个码元还是两个码元</span>
		cIndex <span class="token operator">+=</span> point <span class="token operator">&gt;</span> <span class="token number">0xffff</span> <span class="token operator">?</span> <span class="token number">2</span> <span class="token operator">:</span> <span class="token number">1</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> result
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">sliceByPoint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 😍</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// �</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// �</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>&#39;哈&#39; 这个字的 length 为 1，即它的码元为 1，但是它的码点为 1</p><p>&#39;𠮷&#39; 这个字的 length 为 2，即它的码元为 2，但是它的码点为 1</p><p>&#39;😍&#39; 这个字符的 length 为 2，即它的码元为 2，但是它的码点为 1</p><p><code>码元</code> ：js 对字符的编码一开始使用的规范是<code>ucs-2</code>。 <strong>ucs-2 规定每一个字符对应 16 位（二进制编码）的空间</strong> ，这 <strong>16 位的空间被称之为码元</strong> ，即一个文字对应一个码元。但是随着生僻字越来越多，还加入了 emoji 表情，16 位的空间不够用了。于是 js 把编码方式换成了<code>utf-16</code>， <strong>utf-16 允许一个字符可以占用 16 位空间，即一个码元，也可以占用 32 位（二进制编码）的空间，也就是两个码元</strong> 。这样一来，这些 <strong>生僻字或者 emoji 表情就占用了两个码元</strong> 。</p><p><code>码点</code> ：码点可以对应 16 位空间，也可以对应 32 位空间， <strong>一个字符就是一个码点</strong> 。</p><p>字符串的 length 其实统计的就是码元，而 js 的截取字符串的方法也是截取的码元位置，因此在一些特殊情况下，截取内容可能会包含乱码。</p></blockquote><p><img src="`+i+`" alt="image-20221228153917416"></p><h2 id="_19、将下载链接转换为迅雷下载链接-触发迅雷下载" tabindex="-1"><a class="header-anchor" href="#_19、将下载链接转换为迅雷下载链接-触发迅雷下载" aria-hidden="true">#</a> 19、将下载链接转换为迅雷下载链接，触发迅雷下载</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">turnLinkToThunder</span><span class="token punctuation">(</span><span class="token parameter">link</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 在原链接前后两端添加特殊字符，然后进行 base64 编码，最后加上迅雷下载协议</span>
	<span class="token keyword">const</span> newLink <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">thunder://</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">btoa</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">AA</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>link<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">ZZ</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
	<span class="token keyword">return</span> newLink
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在使用上述方法将链接转换为迅雷下载协议链接后，还需要在点击下载的元素上加上 <code>data-thunder</code> 属性，如：</p><p><code>&lt;a data-thunder herf=&quot;转换后的下载链接&quot;&gt;&lt;/a&gt;</code></p></blockquote><h2 id="_20、前端文件下载的几种方式" tabindex="-1"><a class="header-anchor" href="#_20、前端文件下载的几种方式" aria-hidden="true">#</a> 20、前端文件下载的几种方式</h2><h3 id="a-标签" tabindex="-1"><a class="header-anchor" href="#a-标签" aria-hidden="true">#</a> a 标签</h3><p>通过 <code>a</code> 标签的 <code>download</code> 属性来实现文件下载</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>下载链接<span class="token punctuation">&quot;</span></span> <span class="token attr-name">download</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>文件名称<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>下载<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>缺点：<code>a</code> 标签只能下载同源的文件，如果是跨域的文件，包括图片、音频、视频等媒体文件，都只能预览，无法下载。</p></blockquote><h3 id="window-open" tabindex="-1"><a class="header-anchor" href="#window-open" aria-hidden="true">#</a> window.open</h3><p>这种方法与使用 <code>a</code> 标签效果一样</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;下载链接&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;_blank&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>缺点：类似 <code>a</code> 标签不能下载跨域文件、媒体文件，同时也不能下载<code>.html .htm .xml .xhtml</code> 等文件，因为这些文件会被当成 <code>.html</code> 文件来处理，会直接在当前页面打开预览。</p></blockquote><h3 id="location-href" tabindex="-1"><a class="header-anchor" href="#location-href" aria-hidden="true">#</a> location.href</h3><p>这种方式和<code>window.open(url)</code>是一样的</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">&quot;下载链接&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>缺点：这种方式拥有<code>window.open</code>的所有缺陷</p></blockquote><h3 id="location-其他属性" tabindex="-1"><a class="header-anchor" href="#location-其他属性" aria-hidden="true">#</a> location.? 其他属性</h3><p>这里的其他指代的都是能跳转页面的属性，比如<code>location.assign</code>、<code>location.replace</code>、<code>location.reload</code>等，这些属性都是可以实现文件下载</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>location<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token string">&quot;下载链接&quot;</span><span class="token punctuation">)</span>
location<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;下载链接&quot;</span><span class="token punctuation">)</span>
location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token string">&quot;下载链接&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这里的<code>location.reload</code>是有点特殊的，它的作用是重新加载当前页面，但是它也可以接受一个参数，这个参数就是要跳转的页面，所以也可以实现文件下载。</p><p>缺点：当然同<code>location.href</code>一样，这些方式的缺点都一样，同时还有属于每个属性自身的特性，这里只当拓展知识，不做过多的讲解。</p></blockquote><h3 id="xmlhttprequest" tabindex="-1"><a class="header-anchor" href="#xmlhttprequest" aria-hidden="true">#</a> XMLHttpRequest</h3><p>这种方式就是常说的 <code>ajax</code> 下载，包括 <code>axios | fetch</code> 等都是相同的</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;下载链接&quot;</span><span class="token punctuation">)</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

xhr<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">/*
  	
  	这里获取文件的类型有两种办法：
  		1、和接口提供者进行协商
  		2、通过 response 的 header 来获取文件的 type
  */</span>
	<span class="token comment">// 这里通过 response 的 header 来获取文件的type</span>
	<span class="token comment">// const type = xhr.response.headers[&quot;content-type&quot;]</span>
	<span class="token keyword">const</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;text/html&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token keyword">const</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span>
	a<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span>
	a<span class="token punctuation">.</span>download <span class="token operator">=</span> <span class="token string">&quot;文件名称&quot;</span>
	a<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>Blob</code>：Blob 对象表示一个不可变、原始数据的类文件对象。它的数据可以按文件或二进制的格式进行读取，也可以转换成 <code>ReadableStream</code> 来用于数据操作。Blob 表示的不一定是 js 原生格式的数据。<code>File</code> 接口基于 Blob，继承了 Blob 的功能并将其扩展以支持用户系统上的文件。</p><p><code>URL.createObjectURL</code>：URL.createObjectURL() 静态方法会创建一个 DOMString，其中包含一个表示参数中给出的对象的 URL。这个 URL 的生命周期和创建它的窗口中的 document 绑定。这个新的 URL 对象表示指定的 File 对象或 Blob 对象。</p><p><code>URL.createObjectURL(blob)</code>：这个方法的作用就是把一个 blob 对象转换为一个 url ，这个 url 可以用来下载文件，也可以用来预览文件。</p></blockquote><ul><li><p>注：blob 中的 type 为文件类型，这里是写死的，但是如果文件类型没有确定，我们就需要获取文件的 type。</p><p>这里获取文件的类型有两种办法：</p><ol><li><p>和接口提供者进行协商</p></li><li><p>通过 response 的 header 来获取文件的 type</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> type <span class="token operator">=</span> response<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">&quot;content-type&quot;</span><span class="token punctuation">]</span>

<span class="token keyword">const</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>response<span class="token punctuation">.</span>data<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> type <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>content-type</code> 也可能是 <code>application/octet-stream</code> ，这个时候就需要通过 <code>file-type</code> 来获取文件的 type</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> fileTypeFromStream <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;file-type&quot;</span>

<span class="token keyword">const</span> type <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fileTypeFromStream</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span>
<span class="token keyword">const</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>response<span class="token punctuation">.</span>data<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> type <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>file-type</code> 要通过 npm 安装</p></blockquote></li></ol></li></ul><h2 id="_21、平滑滚动到特定元素" tabindex="-1"><a class="header-anchor" href="#_21、平滑滚动到特定元素" aria-hidden="true">#</a> 21、平滑滚动到特定元素</h2><p><code>Element.scrollIntoView()</code> 方法将指定元素滚动到窗口显示部分。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;element-id&quot;</span><span class="token punctuation">)</span>

element<span class="token punctuation">.</span><span class="token function">scrollIntoView</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">behavior</span><span class="token operator">:</span> <span class="token string">&quot;smooth&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,38);function C(A,M){const a=l("ExternalLinkIcon");return o(),c("div",null,[r,n("blockquote",null,[n("p",null,[s("Channel Messaging API 的 "),d,s(" 接口允许我们创建一个新的消息通道，并通过它的两个"),n("a",k,[v,t(a)]),s(" 属性发送数据。")]),n("p",null,[m,s(" 接口代表 "),n("a",b,[g,t(a)]),s(" 的两个端口之一，它可以让你从一个端口发送消息，并在消息到达的另一个端口监听它们，即使用 "),h,s(" 用以发送 value，"),f,s(" 用来接收 value。")]),y]),w,n("p",null,[s("从 "),x,s(" 开始，Axios 支持以 fetch API 方式—— "),n("a",q,[j,t(a)]),s(" 取消请求：")]),_])}const I=p(u,[["render",C],["__file","js方法.html.vue"]]);export{I as default};
