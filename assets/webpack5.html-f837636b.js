import{_ as p,W as o,X as l,Y as n,Z as s,$ as t,a0 as e,C as i}from"./framework-4f54a744.js";const c={},r=n("h1",{id:"webpack5",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#webpack5","aria-hidden":"true"},"#"),s(" webpack5")],-1),u={href:"https://www.webpackjs.com/concepts/",target:"_blank",rel:"noopener noreferrer"},d=e('<p><code>webpack</code>是一个静态资源打包工具，它会以一个或多个文件作为打包的入口，将整个项目的所有文件编译组合成一个或多个文件输出出去。输出的文件就是编译好的文件(即浏览器能识别的文件)，就可以在浏览器端运行了。</p><p>我们将<code>webpack</code>输出的文件叫做<code>bundle</code>。</p><h2 id="功能介绍" tabindex="-1"><a class="header-anchor" href="#功能介绍" aria-hidden="true">#</a> 功能介绍</h2><p><code>webpack</code>本身功能是有限的：</p><ul><li>开发模式：仅能编译 JS 中的<code>ES Module</code>语法</li><li>生产模式：能编译 JS 中的<code>ES Module</code>语法，还能压缩 JS 代码</li></ul><h2 id="基本配置" tabindex="-1"><a class="header-anchor" href="#基本配置" aria-hidden="true">#</a> 基本配置</h2><h3 id="_5-大核心概念" tabindex="-1"><a class="header-anchor" href="#_5-大核心概念" aria-hidden="true">#</a> 5 大核心概念</h3><ol><li>entry（入口）：指示<code>webpack</code>从哪个文件开始打包</li><li>output（输出）：指示<code>webpack</code>打包完之后的文件输出到哪里去，如何命名等</li><li>loader（加载器）：<code>webpack</code>本身只能处理 JS、JSON、等资源，其他资源需要借助 loader，<code>webpack</code>才能解析</li><li>plugins（插件）：拓展<code>webpack</code>的功能</li><li>mode（默认）：主要有两种模式：开发模式（development）、生产模式（production）</li></ol><h3 id="准备-webpack-配置文件" tabindex="-1"><a class="header-anchor" href="#准备-webpack-配置文件" aria-hidden="true">#</a> 准备 webpack 配置文件</h3><p>在项目根目录下创建文件：<code>webpack.config.js</code></p><h2 id="处理-css-less-sass-资源" tabindex="-1"><a class="header-anchor" href="#处理-css-less-sass-资源" aria-hidden="true">#</a> 处理 css/less/sass 资源</h2>',11),k={href:"https://www.webpackjs.com/loaders/css-loader/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.webpackjs.com/loaders/less-loader/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.webpackjs.com/loaders/sass-loader/",target:"_blank",rel:"noopener noreferrer"},b=e(`<p><code>webpack</code>本身是不能识别样式资源的，因此我们需要借助 loader 来解析样式资源。</p><p>我们找 loader 都应该去官方文档中找到对应的 loader ，然后使用。官方文档中没有的话可以去社区的 github 中搜索查询。</p><h3 id="css" tabindex="-1"><a class="header-anchor" href="#css" aria-hidden="true">#</a> css</h3><ol><li><p>下载包</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install --save-dev css-loader style-loader
// 官方中只让我们下载 css-loader，但是下面配置时其实还使用了 style-loader，所以这里同时也需要下载 style-loader
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>引入 css 文件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* main.js 中引入，这里文件其实也不一定叫 main.js，主要看你自己的入口文件命名 */</span>
<span class="token keyword">import</span> <span class="token string">&quot;common.css&quot;</span> <span class="token comment">// 这里的文件路径写自己的 css 文件的路径，我们这里只是演示所以就只写了文件名</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* 在 webpack.config.js 中进行配置 */</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
			<span class="token punctuation">{</span>
				<span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span> <span class="token comment">// 这里使用正则匹配所有文件后缀为 .css 的文件，i 用来忽略大小写</span>
				<span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;style-loader&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;css-loader&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// loader 的执行顺序是从后往前，即先 css-loader</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="less-和-sass" tabindex="-1"><a class="header-anchor" href="#less-和-sass" aria-hidden="true">#</a> less 和 sass</h3><p><code>less 和 sass</code>的整体流程与<code>css</code>一致，只是下载的 loader 有所区别</p><ol><li><p>下载包</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/* less */
npm install less less-loader css-loader style-loader --save-dev
// 因为 less 文件最终会被编译成 css 文件，因此我们也需要下载 css-loader 和 style-loader

/* sass */
npm install sass-loader sass css-loader style-loader --save-dev
// 因为 sass 文件最终会被编译成 css 文件，因此我们也需要下载 css-loader 和 style-loader

// 上面的步骤都安装了 css-loader 和 style-loader，如果你已经提前安装过了，可以将这个 npm 语句中的对应 loader 删除掉，以免重复安装
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>引入文件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* main.js 中引入 */</span>
<span class="token keyword">import</span> <span class="token string">&quot;common.less&quot;</span> <span class="token comment">// 这里的文件路径写自己的文件的路径，我们这里只是演示所以就只写了文件名</span>
<span class="token keyword">import</span> <span class="token string">&quot;common.sass&quot;</span>
<span class="token keyword">import</span> <span class="token string">&quot;common.scss&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* 在 webpack.config.js 中进行配置 */</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
			<span class="token punctuation">{</span>
				<span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.less$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>
				<span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;style-loader&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;css-loader&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;less-loader&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token punctuation">{</span>
				<span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.s[ac]ss$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span> <span class="token comment">// sass 文件的后缀可能是 sass 也可能是 scss</span>
				<span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;style-loader&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;css-loader&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;sass-loader&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="处理图片资源" tabindex="-1"><a class="header-anchor" href="#处理图片资源" aria-hidden="true">#</a> 处理图片资源</h2>`,8),g=n("code",null,"webpack5",-1),h={href:"https://www.webpackjs.com/guides/asset-modules#general-asset-type",target:"_blank",rel:"noopener noreferrer"},y=e(`<p>当文件被转换为 base64 格式之后，其大小可能会比原先大 1/3 左右。对于一些较大的文件，这样做无疑是不好的，但是对一些小文件，其转为 base64 格式后也只增大了几 kb，这样对于包大小的影响不大，但是可以较少请求数量，减轻一些服务器的压力，无疑是可取的。</p><ul><li><p>配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
			<span class="token punctuation">{</span>
				<span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(png|jpe?g|gif|webp|svg)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
				<span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;asset&quot;</span><span class="token punctuation">,</span>
				<span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token punctuation">{</span>
					<span class="token literal-property property">dataUrlCondition</span><span class="token operator">:</span> <span class="token punctuation">{</span>
						<span class="token literal-property property">maxSize</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token comment">// 10kb 以内的图片文件，会转换为 base64</span>
					<span class="token punctuation">}</span><span class="token punctuation">,</span>
				<span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="修改输出文件目录" tabindex="-1"><a class="header-anchor" href="#修改输出文件目录" aria-hidden="true">#</a> 修改输出文件目录</h2><p>在打包后将对应的文件输出到对应的文件夹下，<code>filename</code>配置可以指定输出路径。</p><p>这里处理 js 文件和图片文件，其他文件后续会有</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;dist&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;static/js/main.js&quot;</span><span class="token punctuation">,</span> <span class="token comment">// js 文件输出到 js 文件夹下</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
			<span class="token punctuation">{</span>
				<span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(png|jpe?g|gif|webp|svg)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
				<span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;asset&quot;</span><span class="token punctuation">,</span>
				<span class="token literal-property property">paeser</span><span class="token operator">:</span> <span class="token punctuation">{</span>
					<span class="token literal-property property">dataUrlCondition</span><span class="token operator">:</span> <span class="token punctuation">{</span>
						<span class="token literal-property property">maxSize</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token comment">// 10kb 以内的图片文件，会转换为 base64</span>
					<span class="token punctuation">}</span><span class="token punctuation">,</span>
				<span class="token punctuation">}</span><span class="token punctuation">,</span>
				<span class="token literal-property property">generator</span><span class="token operator">:</span> <span class="token punctuation">{</span>
					<span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;static/images/[hash][ext][query]&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 图片资源输出到 images 文件夹下</span>
				<span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自动清空上次打包内容" tabindex="-1"><a class="header-anchor" href="#自动清空上次打包内容" aria-hidden="true">#</a> 自动清空上次打包内容</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;dist&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;static/js/main.js&quot;</span><span class="token punctuation">,</span>
		<span class="token literal-property property">clean</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 自动清空上次打包内容</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="处理字体图标资源" tabindex="-1"><a class="header-anchor" href="#处理字体图标资源" aria-hidden="true">#</a> 处理字体图标资源</h2><p>在阿里矢量库中下载字体图标资源，将其放入到对应的文件夹下：</p><ul><li><p>将 iconfont.css 文件放入项目 css 文件夹下</p></li><li><p>将 .ttf .woff .woff2 字体文件放入项目 font 文件夹下</p></li><li><p>修改 iconfont.css 文件中引入的字体文件路径</p></li><li><p>配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
			<span class="token punctuation">{</span>
				<span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(ttf|woff2?)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
				<span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;asset/resource&quot;</span><span class="token punctuation">,</span>
				<span class="token literal-property property">generator</span><span class="token operator">:</span> <span class="token punctuation">{</span>
					<span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;static/media/[hash][ext][query]&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 字体资源输出到 media 文件夹下</span>
				<span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="处理其他资源" tabindex="-1"><a class="header-anchor" href="#处理其他资源" aria-hidden="true">#</a> 处理其他资源</h2><p>开发中可能还存在一些其他资源，如音频视频等。</p><p>在上面处理字体图标的配置中添加上响应的文件类型就行了</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
			<span class="token punctuation">{</span>
				<span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(ttf|woff2?|mp3|mp4|avi)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
				<span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;asset/resource&quot;</span><span class="token punctuation">,</span>
				<span class="token literal-property property">generator</span><span class="token operator">:</span> <span class="token punctuation">{</span>
					<span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;static/media/[hash][ext][query]&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 字体资源输出到 media 文件夹下</span>
				<span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="处理-js-资源" tabindex="-1"><a class="header-anchor" href="#处理-js-资源" aria-hidden="true">#</a> 处理 js 资源</h2><p><code>webpack</code>其实已经对 js 资源有了自己默认的处理方式，但是其对 js 资源的处理是有限的，有时候我们为了兼容一些低版本的浏览器，也需要再对 js 做一些其他的处理。其次，在开发中，不同的人有不同的开发习惯，我们需要对其进行格式统一，因此也需要使用其他的一些工具。</p><h3 id="eslint" tabindex="-1"><a class="header-anchor" href="#eslint" aria-hidden="true">#</a> eslint</h3><p>解决代码格式问题</p><ol><li><p>配置文件：eslint 的配置文件有很多写法：<code>.eslintrc | .eslintrc.js | .eslintrc.json</code> ，它们的区别在于格式不同</p></li><li><p>具体配置：这里以<code>.eslintrc.js</code>为例</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token comment">// 解析选项</span>
	<span class="token literal-property property">parserOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">ecmaVersion</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token comment">// ES 语法版本</span>
		<span class="token literal-property property">sourceType</span><span class="token operator">:</span> <span class="token string">&quot;module&quot;</span><span class="token punctuation">,</span> <span class="token comment">// ES 模块化</span>
		<span class="token literal-property property">ecmaFeatures</span><span class="token operator">:</span> <span class="token punctuation">{</span>
			<span class="token comment">// ES 其他特性</span>
			<span class="token literal-property property">jsx</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 如果是 React 项目，就需要开启 jsx 语法</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token comment">// 具体规则</span>
	<span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token comment">/*
        	&quot;off&quot; 或 0 - 关闭规则
			&quot;warn&quot; 或 1 - 开启规则，使用警告级别的错误：warn (不会导致程序退出)
			&quot;error&quot; 或 2 - 开启规则，使用错误级别的错误：error (当被触发的时候，程序会退出)
			规则文档：https://eslint.bootcss.com/docs/rules/
        */</span>
		<span class="token literal-property property">semi</span><span class="token operator">:</span> <span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 禁止使用分号</span>
		<span class="token string-property property">&quot;array-callback-return&quot;</span><span class="token operator">:</span> <span class="token string">&quot;warn&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 强制数组方法的回调函数中有 return 语句，否则警告</span>
		<span class="token string-property property">&quot;default-case&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
			<span class="token string">&quot;warn&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 要求 switch 语句中有 default 分支，否则警告</span>
			<span class="token punctuation">{</span> <span class="token literal-property property">commentPattern</span><span class="token operator">:</span> <span class="token string">&quot;^no default$&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 允许在最后注释 no default, 就不会有警告了</span>
		<span class="token punctuation">]</span><span class="token punctuation">,</span>
		<span class="token literal-property property">eqeqeq</span><span class="token operator">:</span> <span class="token punctuation">[</span>
			<span class="token string">&quot;warn&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 强制使用 === 和 !==，否则警告</span>
			<span class="token string">&quot;smart&quot;</span><span class="token punctuation">,</span> <span class="token comment">// https://eslint.bootcss.com/docs/rules/eqeqeq#smart 除了少数情况下不会有警告</span>
		<span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token comment">// 继承</span>
	<span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span>
		<span class="token comment">/*
        	Eslint 官方的规则：eslint:recommended
        		https://eslint.bootcss.com/docs/rules/
			Vue Cli 官方的规则：plugin:vue/essential
				https://github.com/vuejs/vue-cli/tree/dev/packages/@vue/cli-plugin-eslint
			React Cli 官方的规则：react-app
				https://github.com/facebook/create-react-app/tree/main/packages/eslint-config-react-app
        */</span>
		<span class="token string">&quot;eslint:recommended&quot;</span><span class="token punctuation">,</span>
	<span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token comment">// ...</span>
	<span class="token comment">// 其他详见 https://eslint.bootcss.com/docs/user-guide/configuring</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>因为开发中一点点写规则太费劲了，因此我们一般继承一个现有的规则，然后添加一点我们自己写的规则进行覆盖即可。</p></li></ol><h4 id="eslint-在-webpack-中的使用" tabindex="-1"><a class="header-anchor" href="#eslint-在-webpack-中的使用" aria-hidden="true">#</a> eslint 在 webpack 中的使用</h4>`,21),x={href:"https://www.webpackjs.com/plugins/eslint-webpack-plugin/#root",target:"_blank",rel:"noopener noreferrer"},q=e(`<ol><li><p>安装 eslint 插件</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install eslint-webpack-plugin --save-dev

// 如果未安装的 eslint&gt;=7，那么还要先安装 eslint
// npm install eslint --save-dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用：插件都需要在配置文件中先引入，然后进行 new 调用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* webpack.config.js */</span>
<span class="token keyword">const</span> ESLintPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;eslint-webpack-plugin&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
		<span class="token keyword">new</span> <span class="token class-name">ESLintPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
			<span class="token comment">// 检测哪些文件</span>
			<span class="token literal-property property">context</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;src&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在项目根目录创建<code>.eslintrc.js</code>文件，然后编写检测规则：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;eslint:recommended&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token literal-property property">env</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">node</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 启用 node 中全局变量</span>
		<span class="token literal-property property">borwser</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 启用浏览器中全局变量</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token literal-property property">parserOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">ecmaVersion</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token comment">// ES6</span>
		<span class="token literal-property property">sourceType</span><span class="token operator">:</span> <span class="token string">&quot;module&quot;</span><span class="token punctuation">,</span> <span class="token comment">// ES module</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token string-property property">&quot;no-var&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">// 不能使用 var 创建变量</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>.eslintignore</code>文件可以让我们在 vscode 中安装的 eslint 插件忽视某些文件夹中的检测</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>dist
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h3 id="babel" tabindex="-1"><a class="header-anchor" href="#babel" aria-hidden="true">#</a> babel</h3><p>解决兼容性问题，它可以将一些高版本的 js 语法转换为低版本的 js 语法，以兼容低版本浏览器</p><h4 id="具体配置" tabindex="-1"><a class="header-anchor" href="#具体配置" aria-hidden="true">#</a> 具体配置：</h4><p>我们以<code>babel.config.js</code>文件配置为例</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token comment">// 预设</span>
	<span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>presets 预设简单说就是一组 babel 插件，拓展功能</li><li><code>@babel/preset-env</code>: 一个智能预设，允许您使用最新的 JavaScript。</li><li><code>@babel/preset-react</code>：一个用来编译 React jsx 语法的预设</li><li><code>@babel/preset-typescript</code>：一个用来编译 TypeScript 语法的预设</li></ul><h4 id="在-webpack-中使用" tabindex="-1"><a class="header-anchor" href="#在-webpack-中使用" aria-hidden="true">#</a> 在 webpack 中使用</h4>`,8),j={href:"https://www.webpackjs.com/loaders/babel-loader/",target:"_blank",rel:"noopener noreferrer"},f=e(`<ol><li><p>安装</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install -D babel-loader @babel/core @babel/preset-env
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
			<span class="token punctuation">{</span>
				<span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
				<span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 不处理 node_modules 文件夹下的 js 文件</span>
				<span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">{</span>
					<span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&quot;babel-loader&quot;</span><span class="token punctuation">,</span>
					<span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
						<span class="token comment">// options 选项可以写在这里，也可以写在 babel.config.js 文件中，写在外部文件中主要是为了以后修改更加方便</span>
						<span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;@babel/preset-env&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
					<span class="token punctuation">}</span><span class="token punctuation">,</span>
				<span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在<code>babel.config.js</code>中写配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* babel.config.js */</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;@babel/preset-env&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 能编译 ES6 语法</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="处理-html" tabindex="-1"><a class="header-anchor" href="#处理-html" aria-hidden="true">#</a> 处理 html</h2><p>使用插件让其能自动引入我们处理好的文件，如 js 文件，css 文件</p>`,3),w={href:"https://www.webpackjs.com/plugins/html-webpack-plugin/#root",target:"_blank",rel:"noopener noreferrer"},_=e(`<ol><li><p>安装</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install --save-dev html-webpack-plugin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>使用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;html-webpack-plugin&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
		<span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
			<span class="token comment">// template：让插件生成 html 时以原先的 html 为模板</span>
			<span class="token literal-property property">template</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;public/index.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="搭建开发服务器" tabindex="-1"><a class="header-anchor" href="#搭建开发服务器" aria-hidden="true">#</a> 搭建开发服务器</h2>`,2),E={href:"https://www.webpackjs.com/configuration/dev-server/#root",target:"_blank",rel:"noopener noreferrer"},P={href:"https://github.com/webpack/webpack-dev-server",target:"_blank",rel:"noopener noreferrer"},S=e(`<ol><li><p>安装</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install webpack-dev-server --save-dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>使用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&quot;localhost&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 域名</span>
		<span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token string">&quot;3000&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 端口号</span>
		<span class="token literal-property property">open</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 自动打开浏览器</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>启动命令：<code>npx webpack server</code></p></li></ol><h2 id="提取-css-成单独文件" tabindex="-1"><a class="header-anchor" href="#提取-css-成单独文件" aria-hidden="true">#</a> 提取 css 成单独文件</h2><p>目前 css 是被打包在了 js 文件中，当 js 文件加载时，会创建一个 style 来生成样式，这样对网站来说会出现闪屏现象，对用户体验不好，因此我们需要将 css 文件单独打包成一个文件，然后通过 link 标签来引入。</p>`,3),C={href:"https://www.webpackjs.com/plugins/mini-css-extract-plugin/",target:"_blank",rel:"noopener noreferrer"},M=n("div",{class:"language-text line-numbers-mode","data-ext":"text"},[n("pre",{class:"language-text"},[n("code",null,`npm install mini-css-extract-plugin --save-dev
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),z=e(`<li><p>使用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;mini-css-extract-plugin&quot;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
		<span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
			<span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;static/css/main.css&quot;</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
			<span class="token punctuation">{</span>
				<span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
				<span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token string">&quot;css-loader&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
				<span class="token comment">// 这里将 style-loader 改成了 MiniCssExtractPlugin.loader，配置中其他用到了 style-loader 的地方也要相应的进行修改</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),W=e(`<h2 id="样式兼容性处理" tabindex="-1"><a class="header-anchor" href="#样式兼容性处理" aria-hidden="true">#</a> 样式兼容性处理</h2><p>使用<code>postcss</code>进行样式处理，让其能兼容低版本浏览器</p><ol><li><p>安装</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install --save-dev postcss-loader postcss postcss-preset-env
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>使用：<code>postcss</code>的配置需要写在 css-loader 配置的下面，less-loader 等的配置的上面</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token punctuation">{</span>
                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
                <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                    MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span>
                    <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">,</span>
                    <span class="token comment">// postcss 的配置，这个配置不光要写在 css 文件处理这里，如果用到了 less、sass 等，在它们的配置处也需要写</span>
                    <span class="token punctuation">{</span>
                        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;postcss-loader&#39;</span><span class="token punctuation">,</span>
                        <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                            <span class="token literal-property property">postcssOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                                <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                                    <span class="token string">&#39;postcss-preset-env&#39;</span> <span class="token comment">// postcss 的预设，能解决大多数样式兼容问题</span>
                                <span class="token punctuation">]</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.less$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>
                <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                    MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span>
                    <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">,</span>
                    <span class="token comment">// postcss 的配置</span>
                    <span class="token punctuation">{</span>
                        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;postcss-loader&#39;</span><span class="token punctuation">,</span>
                        <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                            <span class="token literal-property property">postcssOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                                <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                                    <span class="token string">&#39;postcss-preset-env&#39;</span> <span class="token comment">// postcss 的预设，能解决大多数样式兼容问题</span>
                                <span class="token punctuation">]</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                    <span class="token string">&#39;less-loader&#39;</span><span class="token punctuation">,</span>
                <span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>上面的配置中，虽然我们使用了 postcss 的预设，但是并没有规定样式兼容要做到什么程度，因此，我们需要在<code>package.json</code>文件中添加一项配置：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
	<span class="token comment">// ...</span>
	<span class="token property">&quot;browserslist&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
		<span class="token comment">// &#39;ie &gt;= 8&#39; // 兼容性做到 ie8 及以上</span>
		<span class="token comment">/* 实际我们一般不会做到 ie8 级别的兼容性，因此会用以下写法 */</span>
		<span class="token string">&quot;last 2 version&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 每个浏览器的最近两个版本</span>
		<span class="token string">&quot;&gt; 1%&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 覆盖 99% 的浏览器</span>
		<span class="token string">&quot;not dead&quot;</span> <span class="token comment">// 在发布过程中没有死掉的浏览器的版本</span>
		<span class="token comment">// 最后的兼容会在这三个条件中取交集</span>
	<span class="token punctuation">]</span>
	<span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="封装样式-loader-函数" tabindex="-1"><a class="header-anchor" href="#封装样式-loader-函数" aria-hidden="true">#</a> 封装样式 loader 函数</h2><p>即将一些重复性的配置代码提取出来封装为一个函数，函数中返回响应配置，这样能让配置文件更小一点</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 获取处理样式的 loader</span>
<span class="token keyword">function</span> <span class="token function">getStyleLoader</span><span class="token punctuation">(</span><span class="token parameter">pre</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token punctuation">[</span>
		MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span>
		<span class="token string">&quot;css-loader&quot;</span><span class="token punctuation">,</span>
		<span class="token punctuation">{</span>
			<span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&quot;postcss-loader&quot;</span><span class="token punctuation">,</span>
			<span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
				<span class="token literal-property property">postcssOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
					<span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
						<span class="token string">&quot;postcss-preset-env&quot;</span><span class="token punctuation">,</span> <span class="token comment">// postcss 的预设，能解决大多数样式兼容问题</span>
					<span class="token punctuation">]</span><span class="token punctuation">,</span>
				<span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		pre<span class="token punctuation">,</span>
	<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span> <span class="token comment">// 用来过滤是否传参</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
			<span class="token punctuation">{</span>
				<span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
				<span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token function">getStyleLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token punctuation">{</span>
				<span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
				<span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token function">getStyleLoader</span><span class="token punctuation">(</span><span class="token string">&quot;less-loader&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="css-压缩" tabindex="-1"><a class="header-anchor" href="#css-压缩" aria-hidden="true">#</a> css 压缩</h2>`,7),O={href:"https://www.webpackjs.com/plugins/css-minimizer-webpack-plugin/#root",target:"_blank",rel:"noopener noreferrer"},D=e(`<ol><li><p>安装</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install css-minimizer-webpack-plugin --save-dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>使用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;mini-css-extract-plugin&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> CssMinimizerPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;css-minimizer-webpack-plugin&quot;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token punctuation">{</span>
                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
                <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token string">&quot;css-loader&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">minimizer</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token keyword">new</span> <span class="token class-name">CssMinimizerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="html-和-js-压缩" tabindex="-1"><a class="header-anchor" href="#html-和-js-压缩" aria-hidden="true">#</a> html 和 js 压缩</h2><p>默认生产模式就会进行 html 和 js 压缩。</p><h2 id="sourcemap" tabindex="-1"><a class="header-anchor" href="#sourcemap" aria-hidden="true">#</a> SourceMap</h2><p>默认情况下，运行的代码经过编译后是非常难以阅读的，所有的文件都合并成了一个文件，因此一旦代码出错，我们要定位错误时是非常困难的，因此我们就需要 SourceMap，让后续代码出错后浏览器能快速的告诉我们具体出错的地方，以便我们进行错误定位，并进行修改。</p><p>SourceMap 会生成一个编译后的代码和源代码的一个映射文件（xxx.map），它能将编译后的代码和源代码联系起来。</p>`,6),A={href:"https://www.webpackjs.com/configuration/devtool/",target:"_blank",rel:"noopener noreferrer"},R=e(`<ul><li><p>开发模式下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&quot;development&quot;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">devtool</span><span class="token operator">:</span> <span class="token string">&quot;cheap-module-source-map&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>生产模式下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">devtool</span><span class="token operator">:</span> <span class="token string">&#39;source-map&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="提升构建打包速度" tabindex="-1"><a class="header-anchor" href="#提升构建打包速度" aria-hidden="true">#</a> 提升构建打包速度</h2><h3 id="hmr-hotmodulereplacement" tabindex="-1"><a class="header-anchor" href="#hmr-hotmodulereplacement" aria-hidden="true">#</a> HMR（HotModuleReplacement）</h3>`,3),V={href:"https://www.webpackjs.com/configuration/dev-server/#devserverhot",target:"_blank",rel:"noopener noreferrer"},$=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&quot;localhost&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 域名</span>
		<span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token string">&quot;3000&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 端口号</span>
		<span class="token literal-property property">open</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 自动打开浏览器</span>
		<span class="token literal-property property">hot</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 开启webpack的热模块替换特性</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),I=e(`<p>这个特性从 webpack4 开始都是默认开启的，但是在这里，我们的 css 样式是经过 style-loader 处理过的，已经具备了 HMR 功能了，但是 js 还不行，因此我们可以在 main.js 文件中进行一步配置：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* main.js */</span>
<span class="token keyword">import</span> demo <span class="token keyword">from</span> <span class="token string">&quot;js/demo&quot;</span>

<span class="token comment">// 判断是否支持 HMR 功能</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>module<span class="token punctuation">.</span>hot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">&quot;js/demo&quot;</span><span class="token punctuation">)</span>
	<span class="token comment">// 后续如果有其他 js 文件需要实现 HMR 功能的，也需要添加进来</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),L={href:"https://github.com/vuejs/vue-loader",target:"_blank",rel:"noopener noreferrer"},N={href:"https://github.com/gaearon/react-hot-loader",target:"_blank",rel:"noopener noreferrer"},B=e(`<h3 id="oneof" tabindex="-1"><a class="header-anchor" href="#oneof" aria-hidden="true">#</a> OneOf</h3><p>我们在<code>webpack.config.js</code>中配置了很多的 loader ，在默认情况下，每个文件都会按顺序去比对这些 loader ，这样是非常消耗性能的，因为每种文件都只有对应的一个 loader 能处理它，所以它根本就不需要去对比每一个 loader。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
			<span class="token punctuation">{</span>
				<span class="token literal-property property">oneOf</span><span class="token operator">:</span> <span class="token punctuation">[</span>
					<span class="token punctuation">{</span>
						<span class="token comment">/* loader 配置 */</span>
					<span class="token punctuation">}</span><span class="token punctuation">,</span>
					<span class="token comment">// ...</span>
				<span class="token punctuation">]</span><span class="token punctuation">,</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="include-exclude" tabindex="-1"><a class="header-anchor" href="#include-exclude" aria-hidden="true">#</a> Include &amp; Exclude</h3><p>我们在开发项目时，会用到很多的第三方库，这些第三方库都会被下载到<code>mode_modules</code>文件夹下，而这些文件时不需要进行编译可以直接使用的。因此我们在对文件进行处理时，要排除掉<code>node_modules</code>。</p><ul><li>Include：只处理某些文件</li><li>Exclude：不处理某些文件</li><li>上面这两个只能写一个，要么包含，要么排除，同时使用会报错</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> ESLintPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;eslint-webpack-plugin&quot;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
			<span class="token punctuation">{</span>
				<span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
				<span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&quot;babel-loader&quot;</span><span class="token punctuation">,</span>
				<span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 排除 node_modules</span>
				<span class="token comment">// include: path.resolve(__dirname, &#39;../src&#39;)</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
		<span class="token keyword">new</span> <span class="token class-name">ESLintPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
			<span class="token literal-property property">context</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;../src&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			<span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 默认值</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="eslint-和-babel-的缓存" tabindex="-1"><a class="header-anchor" href="#eslint-和-babel-的缓存" aria-hidden="true">#</a> Eslint 和 Babel 的缓存</h3><p>每次打包时，js 文件都要进行 eslint 检查和 babel 编译，速度比较慢，因此我们可以缓存之前的检查和编译结果，以便后续加快后续打包速度。</p><ul><li><p>babel</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* webpack.config.js */</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
			<span class="token punctuation">{</span>
				<span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
				<span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
				<span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&quot;babel-loader&quot;</span><span class="token punctuation">,</span>
				<span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
					<span class="token comment">// 开启 babel 缓存</span>
					<span class="token literal-property property">cacheDirectory</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
					<span class="token comment">// 关闭缓存文件压缩</span>
					<span class="token literal-property property">cacheCompression</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
				<span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>eslint</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* webpack.config.js */</span>

<span class="token keyword">const</span> ESLintPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;eslint-webpack-plugin&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
		<span class="token keyword">new</span> <span class="token class-name">ESLintPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
			<span class="token literal-property property">context</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;./src&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			<span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token string">&quot;node_modules&quot;</span><span class="token punctuation">,</span>
			<span class="token literal-property property">cache</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 开启缓存</span>
			<span class="token literal-property property">cacheLocation</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;./node_modules/.cache/eslintcache&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 设置缓存保存位置</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="多进程打包" tabindex="-1"><a class="header-anchor" href="#多进程打包" aria-hidden="true">#</a> 多进程打包</h3><p>当项目越来越大时，打包速度就会越来越慢，我们想要继续提升打包速度，其实就是要提升 js 文件的打包速度，因为 js 文件是整个项目中最多的。而对 js 文件处理主要就是 eslint、babel、terser 三个工具，所以我们要提升它们的运行速度。</p><p>我们可以开启多进程打包，它的速度比单进程打包要快很多。</p><blockquote><p>注：</p><ol><li>多进程打包要在项目打包特别耗时时使用，因为每个进程启动就要大约耗时 600ms。</li><li>启动的进程数量就是 cpu 的核心数量，不同的 cpu 的核心数量不一样，因此不要开多了。</li></ol></blockquote><ol><li><p>获取 cpu 的核心数量，nodejs 的<code>os</code>模块可以直接使用，它能用来获取 cpu 信息。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> os <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;os&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> threads <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">cpus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token comment">// 获取 cpu 核心数量</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>安装包</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install thread-loader --save-dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>使用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* webpack.config.js */</span>

<span class="token keyword">const</span> os <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;os&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> threads <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">cpus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token comment">// 获取 cpu 核心数量</span>
<span class="token comment">// terser-webpack-plugin 这个插件是 webpack 内置的，不需要进行安装</span>
<span class="token comment">// https://www.webpackjs.com/plugins/terser-webpack-plugin/#root</span>
<span class="token keyword">const</span> TerserWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;terser-webpack-plugin&quot;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
			<span class="token punctuation">{</span>
				<span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
				<span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
				<span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
					<span class="token punctuation">{</span>
						<span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&quot;thread-loader&quot;</span><span class="token punctuation">,</span>
						<span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
							<span class="token literal-property property">workers</span><span class="token operator">:</span> threads<span class="token punctuation">,</span> <span class="token comment">// 开启多进程数量</span>
						<span class="token punctuation">}</span><span class="token punctuation">,</span>
					<span class="token punctuation">}</span><span class="token punctuation">,</span>
					<span class="token punctuation">{</span>
						<span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&quot;babel-loader&quot;</span><span class="token punctuation">,</span>
						<span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
							<span class="token literal-property property">cacheDirectory</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
							<span class="token comment">// ...</span>
						<span class="token punctuation">}</span><span class="token punctuation">,</span>
					<span class="token punctuation">}</span><span class="token punctuation">,</span>
				<span class="token punctuation">]</span><span class="token punctuation">,</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
		<span class="token keyword">new</span> <span class="token class-name">ESLintPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
			<span class="token literal-property property">context</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;./src&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			<span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token string">&quot;node_modules&quot;</span><span class="token punctuation">,</span>
			<span class="token literal-property property">cache</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 开启缓存</span>
			<span class="token literal-property property">cacheLocation</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;./node_modules/.cache/eslintcache&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			threads<span class="token punctuation">,</span> <span class="token comment">// 开启多线程</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token comment">// 这个插件用来压缩 js，是 webpack 内置的，虽然它可以用这种写法，但是我们更推荐下面的写法</span>
		<span class="token comment">// new TerserWebpackPlugin({</span>
		<span class="token comment">//     parallel: threads, // 开启多进程</span>
		<span class="token comment">// }),</span>
	<span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">minimize</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
		<span class="token literal-property property">minimizer</span><span class="token operator">:</span> <span class="token punctuation">[</span>
			<span class="token keyword">new</span> <span class="token class-name">TerserWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
				<span class="token literal-property property">parallel</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 开启多进程</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			<span class="token comment">// ... 这里还有压缩 css 等就省略了</span>
		<span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="减少代码体积" tabindex="-1"><a class="header-anchor" href="#减少代码体积" aria-hidden="true">#</a> 减少代码体积</h2><p>开发时我们定义了一些工具函数库，或者会引入第三方库。而这些库中的方法或组件我们可能并不会全部用上，但是在打包时，如果没有特殊处理的话，将这些库全部引入打包，这样就会造成打包的文件很大，但是实际上其中有很多没用的内容。因此我们就需要减少打包后的代码体积。</p><h3 id="treeshaking" tabindex="-1"><a class="header-anchor" href="#treeshaking" aria-hidden="true">#</a> TreeShaking</h3><p><code>Tree Shaking</code>是一个术语，通常用于描述移除 js 中没有使用的代码。它依赖<code>ES Module</code>。</p><p><em>webpack 以及默认开启了这个功能，无需其他的配置</em></p><h3 id="减少-babel-生成文件体积" tabindex="-1"><a class="header-anchor" href="#减少-babel-生成文件体积" aria-hidden="true">#</a> 减少 Babel 生成文件体积</h3><p>babel 会为每个编译的文件插入辅助代码，这样会使得代码体积过大。我们需要将这些辅助代码单独打包为一个模块，以免重复使用。</p><p><code>@babel/plugin-transform-runtime</code>: 禁用了 Babel 自动对每个文件的 runtime 注入，而是引入 <code>@babel/plugin-transform-runtime</code> 并且使所有辅助代码从这里引用。</p><ol><li><p>下载包：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install @babel/plugin-transform-runtime --save-dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
			<span class="token punctuation">{</span>
				<span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
				<span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
				<span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
					<span class="token comment">// ...</span>
					<span class="token punctuation">{</span>
						<span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&quot;babel-loader&quot;</span><span class="token punctuation">,</span>
						<span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
							<span class="token literal-property property">cacheDirectory</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
							<span class="token literal-property property">cacheCompression</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
							<span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;@babel/plugin-transform-runtime&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 使用插件</span>
						<span class="token punctuation">}</span><span class="token punctuation">,</span>
					<span class="token punctuation">}</span><span class="token punctuation">,</span>
				<span class="token punctuation">]</span><span class="token punctuation">,</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="压缩图片" tabindex="-1"><a class="header-anchor" href="#压缩图片" aria-hidden="true">#</a> 压缩图片</h3><p>开发时如果引入了大量的图片，那么图片资源的体积会很大，将来请求时速度也会比较慢，因此我们可以对图片进行压缩，减少图片体积。</p><blockquote><p>注：这里压缩的是项目本地的图片资源。</p></blockquote>`,27),T={href:"https://www.webpackjs.com/plugins/image-minimizer-webpack-plugin/#root",target:"_blank",rel:"noopener noreferrer"},F=n("p",null,"图片压缩有两种模式：",-1),H=e(`<li><p>无损压缩：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install imagemin-gifsicle imagemin-jpegtran imagemin-optipng imagemin-svgo -D
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>有损压缩：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install imagemin-gifsicle imagemin-mozjpeg imagemin-pngquant imagemin-svgo -D
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li>`,2),U={href:"https://baike.baidu.com/item/%E6%97%A0%E6%8D%9F%E3%80%81%E6%9C%89%E6%8D%9F%E5%8E%8B%E7%BC%A9",target:"_blank",rel:"noopener noreferrer"},J=e(`<li><p>使用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> ImageMinimizerPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;image-minimizer-webpack-plugin&quot;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">minimizer</span><span class="token operator">:</span> <span class="token punctuation">[</span>
			<span class="token comment">// ... 这里有 css 和 js 压缩配置</span>
			<span class="token comment">// 这里使用的是无损压缩</span>
			<span class="token keyword">new</span> <span class="token class-name">ImageMinimizerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
				<span class="token literal-property property">minimizer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
					<span class="token literal-property property">implementation</span><span class="token operator">:</span> ImageMinimizerPlugin<span class="token punctuation">.</span>imageminGenerate<span class="token punctuation">,</span>
					<span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
						<span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
							<span class="token punctuation">[</span><span class="token string">&quot;gifsicle&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">interlaced</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
							<span class="token punctuation">[</span><span class="token string">&quot;jpegtran&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">progressive</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
							<span class="token punctuation">[</span><span class="token string">&quot;optipng&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">optimizationLevel</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
							<span class="token punctuation">[</span>
								<span class="token string">&quot;svgo&quot;</span><span class="token punctuation">,</span>
								<span class="token punctuation">{</span>
									<span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
										<span class="token string">&quot;preset-default&quot;</span><span class="token punctuation">,</span>
										<span class="token string">&quot;prefixIds&quot;</span><span class="token punctuation">,</span>
										<span class="token punctuation">{</span>
											<span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;sortAttrs&quot;</span><span class="token punctuation">,</span>
											<span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span>
												<span class="token literal-property property">xmlnsOrder</span><span class="token operator">:</span> <span class="token string">&quot;alphabetical&quot;</span><span class="token punctuation">,</span>
											<span class="token punctuation">}</span><span class="token punctuation">,</span>
										<span class="token punctuation">}</span><span class="token punctuation">,</span>
									<span class="token punctuation">]</span><span class="token punctuation">,</span>
								<span class="token punctuation">}</span><span class="token punctuation">,</span>
							<span class="token punctuation">]</span><span class="token punctuation">,</span>
						<span class="token punctuation">]</span><span class="token punctuation">,</span>
					<span class="token punctuation">}</span><span class="token punctuation">,</span>
				<span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),G=e(`<p>配置完成后进行打包可能会出现报错</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Error: Error with &#39;src\\images\\1.jpeg&#39;: &#39;&quot;C:\\Users\\86176\\Desktop\\webpack\\webpack_code\\node_modules\\jpegtran-bin\\vendor\\jpegtran.exe&quot;&#39;
Error with &#39;src\\images\\3.gif&#39;: spawn C:\\Users\\86176\\Desktop\\webpack\\webpack_code\\node_modules\\optipng-bin\\vendor\\optipng.exe ENOENT
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里报错的原因是有两个文件没有下载下来，因此我们需要手动将其下载，并放到对应的目录下</p>`,3),X={href:"http://jpegclub.org/jpegtran/",target:"_blank",rel:"noopener noreferrer"},Y={href:"http://optipng.sourceforge.net/",target:"_blank",rel:"noopener noreferrer"},Z=e(`<blockquote><p>注：如果项目中的所有图片在前期已经被压缩过了，那么也可以不使用这些插件进行压缩。</p></blockquote><h2 id="优化代码运行性能" tabindex="-1"><a class="header-anchor" href="#优化代码运行性能" aria-hidden="true">#</a> 优化代码运行性能</h2><h3 id="codesplit-代码分割" tabindex="-1"><a class="header-anchor" href="#codesplit-代码分割" aria-hidden="true">#</a> CodeSplit 代码分割</h3><p>打包代码时会将所有的 js 文件打包到同一个文件中，导致这个文件的体积太大了，我们如果只要渲染首页，就应该只加载首页的 js 文件，其他文件不应该加载。</p><p>因此我们需要进行代码分割，在打包时生成多个 js 文件，渲染哪个页面就加载哪个 js 文件，这样加载的资源就更少，速度更快。</p><ol><li><p>多入口</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token comment">// 有多个入口文件</span>
	<span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">app</span><span class="token operator">:</span> <span class="token string">&quot;./src/app.js&quot;</span><span class="token punctuation">,</span>
		<span class="token literal-property property">main</span><span class="token operator">:</span> <span class="token string">&quot;./src/main.js&quot;</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;dist&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;[name].js&quot;</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>多入口提取公共模块</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token comment">// 有多个入口文件</span>
	<span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">app</span><span class="token operator">:</span> <span class="token string">&quot;./src/app.js&quot;</span><span class="token punctuation">,</span>
		<span class="token literal-property property">main</span><span class="token operator">:</span> <span class="token string">&quot;./src/main.js&quot;</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;dist&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;[name].js&quot;</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token comment">// 代码分割配置</span>
		<span class="token literal-property property">splitChunks</span><span class="token operator">:</span> <span class="token punctuation">{</span>
			<span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token string">&quot;all&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 对所有模块都进行分割</span>
			<span class="token comment">// 以下是默认值</span>
			<span class="token comment">// minSize: 20000, // 分割代码最小的大小</span>
			<span class="token comment">// minRemainingSize: 0, // 类似于minSize，最后确保提取的文件大小不能为0</span>
			<span class="token comment">// minChunks: 1, // 至少被引用的次数，满足条件才会代码分割</span>
			<span class="token comment">// maxAsyncRequests: 30, // 按需加载时并行加载的文件的最大数量</span>
			<span class="token comment">// maxInitialRequests: 30, // 入口js文件最大并行请求数量</span>
			<span class="token comment">// enforceSizeThreshold: 50000, // 超过50kb一定会单独打包（此时会忽略minRemainingSize、maxAsyncRequests、maxInitialRequests）</span>
			<span class="token comment">// cacheGroups: { // 组，哪些模块要打包到一个组</span>
			<span class="token comment">//   defaultVendors: { // 组名</span>
			<span class="token comment">//     test: /[\\\\/]node_modules[\\\\/]/, // 需要打包到一起的模块</span>
			<span class="token comment">//     priority: -10, // 权重（越大越高）</span>
			<span class="token comment">//     reuseExistingChunk: true, // 如果当前 chunk 包含已从主 bundle 中拆分出的模块，则它将被重用，而不是生成新的模块</span>
			<span class="token comment">//   },</span>
			<span class="token comment">//   default: { // 其他没有写的配置会使用上面的默认值</span>
			<span class="token comment">//     minChunks: 2, // 这里的minChunks权重更大</span>
			<span class="token comment">//     priority: -20,</span>
			<span class="token comment">//     reuseExistingChunk: true,</span>
			<span class="token comment">//   },</span>
			<span class="token comment">// },</span>
			<span class="token comment">// 修改配置</span>
			<span class="token literal-property property">cacheGroups</span><span class="token operator">:</span> <span class="token punctuation">{</span>
				<span class="token comment">// 组，哪些模块要打包到一个组</span>
				<span class="token comment">// defaultVendors: { // 组名</span>
				<span class="token comment">//   test: /[\\\\/]node_modules[\\\\/]/, // 需要打包到一起的模块</span>
				<span class="token comment">//   priority: -10, // 权重（越大越高）</span>
				<span class="token comment">//   reuseExistingChunk: true, // 如果当前 chunk 包含已从主 bundle 中拆分出的模块，则它将被重用，而不是生成新的模块</span>
				<span class="token comment">// },</span>
				<span class="token comment">// 实际开发中用默认配置就足够了</span>
				<span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">{</span>
					<span class="token comment">// 其他没有写的配置会使用上面的默认值</span>
					<span class="token literal-property property">minSize</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token comment">// 打包的最小文件体积</span>
					<span class="token literal-property property">minChunks</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
					<span class="token literal-property property">priority</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span>
					<span class="token literal-property property">reuseExistingChunk</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
				<span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>按需加载，动态导入</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// import 动态导入语法，会将动态导入的文件代码拆分为一个单独的模块，在需要使用时自动加载</span>
<span class="token comment">// 它的返回值是一个 promise</span>
<span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;./demo.js&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> error<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注：eslint 不识别 import 动态导入语法，这里会报错，因此我们需要在 eslint 的配置文件中添加一项配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* .eslintrc.js */</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token comment">// ... 其他配置</span>
	<span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;import&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 使 eslint 识别 import 动态导入语法</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote></li><li><p>上面第一点和第二点都是多入口文件的处理，这里我们进行单入口文件的处理。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&quot;./src/main.js&quot;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;dist&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;js/[name].js&quot;</span><span class="token punctuation">,</span>
		<span class="token literal-property property">clean</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token comment">// 代码分割配置</span>
		<span class="token literal-property property">splitChunks</span><span class="token operator">:</span> <span class="token punctuation">{</span>
			<span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token string">&quot;all&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 对所有模块都进行分割</span>
			<span class="token comment">// 以下是默认值</span>
			<span class="token comment">// minSize: 20000, // 分割代码最小的大小</span>
			<span class="token comment">// minRemainingSize: 0, // 类似于minSize，最后确保提取的文件大小不能为0</span>
			<span class="token comment">// minChunks: 1, // 至少被引用的次数，满足条件才会代码分割</span>
			<span class="token comment">// maxAsyncRequests: 30, // 按需加载时并行加载的文件的最大数量</span>
			<span class="token comment">// maxInitialRequests: 30, // 入口js文件最大并行请求数量</span>
			<span class="token comment">// enforceSizeThreshold: 50000, // 超过50kb一定会单独打包（此时会忽略minRemainingSize、maxAsyncRequests、maxInitialRequests）</span>
			<span class="token comment">// cacheGroups: { // 组，哪些模块要打包到一个组</span>
			<span class="token comment">//   defaultVendors: { // 组名</span>
			<span class="token comment">//     test: /[\\\\/]node_modules[\\\\/]/, // 需要打包到一起的模块</span>
			<span class="token comment">//     priority: -10, // 权重（越大越高）</span>
			<span class="token comment">//     reuseExistingChunk: true, // 如果当前 chunk 包含已从主 bundle 中拆分出的模块，则它将被重用，而不是生成新的模块</span>
			<span class="token comment">//   },</span>
			<span class="token comment">//   default: { // 其他没有写的配置会使用上面的默认值</span>
			<span class="token comment">//     minChunks: 2, // 这里的minChunks权重更大</span>
			<span class="token comment">//     priority: -20,</span>
			<span class="token comment">//     reuseExistingChunk: true,</span>
			<span class="token comment">//   },</span>
			<span class="token comment">// },</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>给动态导入的模块打包后的 js 文件进行统一命名</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// /* webpackChunkName: &#39;name&#39; */：这是 webpack 的命名规则，是固定语法，也叫做魔法命名</span>
<span class="token comment">// 这里只是进行了命名，我们还需要在配置中进行使用，看下面的配置代码</span>
<span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: &#39;demo&#39; */</span> <span class="token string">&quot;./demo.js&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> error<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* webpack.config.js */</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token comment">// ...</span>
		<span class="token literal-property property">chunkFilename</span><span class="token operator">:</span> <span class="token string">&quot;js/[name].js&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 给打包输出的其他文件命名</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>统一命名：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;mini-css-extract-plugin&quot;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&quot;./src/main.js&quot;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;../dist&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 生产模式需要输出</span>
		<span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;static/js/[name].js&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 入口文件打包输出资源命名方式</span>
		<span class="token literal-property property">chunkFilename</span><span class="token operator">:</span> <span class="token string">&quot;static/js/[name].chunk.js&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 动态导入输出资源命名方式</span>
		<span class="token literal-property property">assetModuleFilename</span><span class="token operator">:</span> <span class="token string">&quot;static/media/[name].[hash][ext]&quot;</span><span class="token punctuation">,</span>
		<span class="token comment">// 图片、字体等资源命名方式（注意用hash）</span>
		<span class="token comment">// 这里给图片字体等资源命名之后，就不需要在 module.rules 中对这些资源进行处理时书写 generator.filename 配置进行命名了</span>
		<span class="token literal-property property">clean</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
		<span class="token comment">// 提取css成单独文件</span>
		<span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
			<span class="token comment">// 定义输出文件名和目录</span>
			<span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;static/css/[name].css&quot;</span><span class="token punctuation">,</span>
			<span class="token literal-property property">chunkFilename</span><span class="token operator">:</span> <span class="token string">&quot;static/css/[name].chunk.css&quot;</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="preload-prefetch" tabindex="-1"><a class="header-anchor" href="#preload-prefetch" aria-hidden="true">#</a> Preload &amp; Prefetch</h3><p>我们前面已经做了代码分割，同时会使用 import 动态导入语法来进行代码按需加载（我们也叫懒加载，比如路由懒加载就是这样实现的）。</p><p>但是加载速度还不够好，比如：是用户点击按钮时才加载这个资源的，如果资源体积很大，那么用户会感觉到明显卡顿效果。</p><p>我们想在浏览器空闲时间，加载后续需要使用的资源。我们就需要用上 <code>Preload</code> 或 <code>Prefetch</code> 技术。</p><p>它们区别：</p><ul><li><code>Preload</code>加载优先级高，<code>Prefetch</code>加载优先级低。</li><li><code>Preload</code>只能加载当前页面需要使用的资源，<code>Prefetch</code>可以加载当前页面资源，也可以加载下一个页面需要使用的资源。</li></ul><p>它们的问题：兼容性较差。</p>`,13),K={href:"https://caniuse.com/",target:"_blank",rel:"noopener noreferrer"},Q=n("li",null,[n("code",null,"Preload"),s(" 相对于 "),n("code",null,"Prefetch"),s(" 兼容性好一点。")],-1),nn=e(`<p>使用：</p><ol><li><p>下载包：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm i @vue/preload-webpack-plugin -D
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>配置：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> PreloadWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;@vue/preload-webpack-plugin&quot;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
		<span class="token keyword">new</span> <span class="token class-name">PreloadWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
			<span class="token literal-property property">rel</span><span class="token operator">:</span> <span class="token string">&quot;preload&quot;</span><span class="token punctuation">,</span> <span class="token comment">// preload兼容性更好</span>
			<span class="token keyword">as</span><span class="token operator">:</span> <span class="token string">&quot;script&quot;</span><span class="token punctuation">,</span>
			<span class="token comment">// rel: &#39;prefetch&#39; // prefetch兼容性更差</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="network-cache" tabindex="-1"><a class="header-anchor" href="#network-cache" aria-hidden="true">#</a> Network Cache</h3><p>将来开发时我们对静态资源会使用缓存来优化，这样浏览器第二次请求资源就能读取缓存了，速度很快。</p><p>但是这样的话就会有一个问题, 因为前后输出的文件名是一样的，都叫 main.js，一旦将来发布新版本，因为文件名没有变化导致浏览器会直接读取缓存，不会加载新资源，项目也就没法更新了。</p><p>所以我们从文件名入手，确保更新前后文件名不一样，这样就可以做缓存了。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;mini-css-extract-plugin&quot;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&quot;./src/main.js&quot;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;../dist&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 生产模式需要输出</span>
		<span class="token comment">// [contenthash:8]使用contenthash，取8位长度</span>
		<span class="token comment">// contenthash：当文件内容发生变化时才会生成新的 hash 值</span>
		<span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;static/js/[name].[contenthash:8].js&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 入口文件打包输出资源命名方式</span>
		<span class="token literal-property property">chunkFilename</span><span class="token operator">:</span> <span class="token string">&quot;static/js/[name].[contenthash:8].chunk.js&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 动态导入输出资源命名方式</span>
		<span class="token literal-property property">assetModuleFilename</span><span class="token operator">:</span> <span class="token string">&quot;static/media/[name].[hash][ext]&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 图片、字体等资源命名方式（注意用hash）</span>
		<span class="token literal-property property">clean</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
		<span class="token comment">// ...</span>
		<span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
			<span class="token comment">// 定义输出文件名和目录</span>
			<span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;static/css/[name].[contenthash:8].css&quot;</span><span class="token punctuation">,</span>
			<span class="token literal-property property">chunkFilename</span><span class="token operator">:</span> <span class="token string">&quot;static/css/[name].[contenthash:8].chunk.css&quot;</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token comment">// ... 其他配置</span>
		<span class="token comment">// 将所有打包后的文件的hash值提取成一个单独的文件进行保管</span>
		<span class="token literal-property property">runtimeChunk</span><span class="token operator">:</span> <span class="token punctuation">{</span>
			<span class="token function-variable function">name</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">entrypoint</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">runtime~</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>entrypoint<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.js</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="解决-js-兼容性问题-corejs" tabindex="-1"><a class="header-anchor" href="#解决-js-兼容性问题-corejs" aria-hidden="true">#</a> 解决 js 兼容性问题 CoreJS</h3><p>过去我们使用 babel 对 js 代码进行了兼容性处理，其中使用@babel/preset-env 智能预设来处理兼容性问题。</p><p>它能将 ES6 的一些语法进行编译转换，比如箭头函数、点点点运算符等。但是如果是 async 函数、promise 对象、数组的一些方法（includes）等，它没办法处理。</p><p>所以此时我们 js 代码仍然存在兼容性问题，一旦遇到低版本浏览器会直接报错。所以我们想要将 js 兼容性问题彻底解决。</p><p><code>core-js</code> 是专门用来做 ES6 以及以上 API 的 <code>polyfill</code>。</p><p><code>polyfill</code>翻译过来叫做垫片/补丁。就是用社区上提供的一段代码，让我们在不兼容某些新特性的浏览器上，使用该新特性。</p><p>使用：</p><ol><li><p>下载包</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm i @babel/eslint-parser -D
npm i core-js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改配置文件：eslint</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* .eslintrc.js */</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token comment">// ... 其他配置</span>
	<span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token string">&quot;@babel/eslint-parser&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 支持最新的最终 ECMAScript 标准</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>引入 core-js</p><ul><li><p>手动全部引入</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* 非配置文件的 js 文件中 */</span>

<span class="token keyword">import</span> <span class="token string">&quot;core-js&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>手动按需引入：例如这里使用了 promise</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* 非配置文件的 js 文件中 */</span>

<span class="token keyword">import</span> <span class="token string">&quot;core-js/es/promise&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>自动按需引入：需要使用到 babel 的预设配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* babel.config.js */</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span>
		<span class="token punctuation">[</span>
			<span class="token string">&quot;@babel/preset-env&quot;</span><span class="token punctuation">,</span>
			<span class="token punctuation">{</span>
				<span class="token literal-property property">useBuiltIns</span><span class="token operator">:</span> <span class="token string">&quot;usage&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 按需引入 core-js</span>
				<span class="token literal-property property">corejs</span><span class="token operator">:</span> <span class="token punctuation">{</span>
					<span class="token literal-property property">version</span><span class="token operator">:</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">,</span> <span class="token comment">//  core-js 的版本，根据版本填写，目前是 3</span>
					<span class="token literal-property property">proposals</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
				<span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><h3 id="pwa" tabindex="-1"><a class="header-anchor" href="#pwa" aria-hidden="true">#</a> PWA</h3><p>开发 Web App 项目，项目一旦处于网络离线情况，就没法访问了。</p><p>我们希望给项目提供离线体验。</p><p>渐进式网络应用程序(progressive web application - PWA)：是一种可以提供类似于 native app(原生应用程序) 体验的 Web App 的技术。其中最重要的是，在 <strong>离线(offline)</strong> 时应用程序能够继续运行功能。内部通过 Service Workers 技术实现的。</p>`,19),sn={href:"https://www.webpackjs.com/guides/progressive-web-application/",target:"_blank",rel:"noopener noreferrer"},an=e(`<p><em>PWA 的问题是兼容性比较差</em></p><p>使用：</p><ol><li><p>下载包</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm i workbox-webpack-plugin -D
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* webpack.config.js */</span>
<span class="token keyword">const</span> WorkboxPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;workbox-webpack-plugin&quot;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token comment">// ...</span>
	<span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
		<span class="token comment">// ... 其他配置</span>
		<span class="token keyword">new</span> <span class="token class-name">WorkboxPlugin<span class="token punctuation">.</span>GenerateSW</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
			<span class="token comment">// 这些选项帮助快速启用 ServiceWorkers</span>
			<span class="token comment">// 不允许遗留任何“旧的” ServiceWorkers</span>
			<span class="token literal-property property">clientsClaim</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
			<span class="token literal-property property">skipWaiting</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* main.js */</span>

<span class="token comment">// 判断当前环境 serviceWorker 是否可用</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;serviceWorker&quot;</span> <span class="token keyword">in</span> navigator<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;load&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		navigator<span class="token punctuation">.</span>serviceWorker
			<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">&quot;/service-worker.js&quot;</span><span class="token punctuation">)</span>
			<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">registration</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
				console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;SW registered: &quot;</span><span class="token punctuation">,</span> registration<span class="token punctuation">)</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span>
			<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">registrationError</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
				console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;SW registration failed: &quot;</span><span class="token punctuation">,</span> registrationError<span class="token punctuation">)</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="reactcli" tabindex="-1"><a class="header-anchor" href="#reactcli" aria-hidden="true">#</a> ReactCli</h2>`,4),tn={href:"https://yk2012.github.io/sgg_webpack5/project/react-cli.html#%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F%E9%85%8D%E7%BD%AE",target:"_blank",rel:"noopener noreferrer"},en=n("p",null,[n("code",null,"react-cli"),s("进行配置时与上述基础配置和优化的区别如下：")],-1),pn=e(`<li><p><code>eslint</code>的配置文件中，<code>extends</code>继承的规则变为<code>react-app</code>，这是 react 的官方规则。</p><p>这里改完之后页面也能会有报错，因此需要继续更改配置<code>parserOptions.babelOptions.presets</code>为<code>[[&#39;babel-preset-react-app&#39;, false], &#39;babel-preset-react-app/prod&#39;]</code>。</p><p>完整如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* .eslintrc.js */</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;react-app&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 继承 react 官方规则</span>
	<span class="token literal-property property">parserOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">babelOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
			<span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span>
				<span class="token comment">// 解决页面报错问题</span>
				<span class="token punctuation">[</span><span class="token string">&quot;babel-preset-react-app&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
				<span class="token string">&quot;babel-preset-react-app/prod&quot;</span><span class="token punctuation">,</span>
			<span class="token punctuation">]</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>webpack.config.js</code>中<code>module.rules</code>中对 js 的配置要更改为 react 的 jsx 语法的配置，即将<code>test</code>的配置更改为<code>/\\.(jsx|js)$/</code>。</p><p>上面在<code>webpack</code>中对 js 或者 jsx 进行处理的 loader 为 babel-loader，因此我们对<code>babel.config.js</code>中的配置也需要做一些修改，完整如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* babel.config.js */</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token comment">// 使用react官方规则</span>
	<span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;react-app&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,2),on=n("code",null,"babel-preset-react-app",-1),ln=n("code",null,"NODE_ENV",-1),cn=n("code",null,"BABEL_ENV",-1),rn=n("code",null,"mode: 'development'",-1),un=n("code",null,"mode: 'production'",-1),dn=n("code",null,"webpack",-1),kn=n("code",null,"babel",-1),vn={href:"https://www.npmjs.com/package/cross-env",target:"_blank",rel:"noopener noreferrer"},mn=n("p",null,[s("安装完成后，修改"),n("code",null,"package.json"),s("文件中的"),n("code",null,"scripts"),s("，如将 dev 更改为"),n("code",null,"'dev': 'cross-env NODE_ENV=development webpack serve --config ./config/webpack.dev.js'"),s("。生产环境（production）报错的修改也是类似。")],-1),bn=e("<li><p>第三步完成后再次运行依然会报错，错误为无法解析<code>./App</code>这个组件，即我们在<code>main.js</code>中导入的<code>App</code>这个文件它无法解析。原因是我们在导入这个组件时只写了它的组件名，没有写后缀，所以在运行时<code>webpack</code>会自动帮我们补全这个后缀，但是这个组件的后缀为 .jsx，而<code>webpack</code>自动补全的文件名只能为 .js，因此报错。所以我们需要在<code>webpack</code>的配置文件中添加一项配置<code>&#39;resolve&#39;: {extensions: [&#39;.jsx&#39;, &#39;.js&#39;, &#39;.json&#39;]}</code>，让<code>webpack</code>自动补全时先补全 .jsx，如果不行则补全 .js，还不行则补全 .json，这三个都无法解析时，则报错。</p></li><li><p>上面的步骤都做完后，我们测试<code>HMR</code>功能时发现，当修改样式时，它可以自动实现<code>HMR</code>，但是当修改 .jsx 文件时，整个页面都会刷新，说明它默认不能实现 .jsx 或者 .js 文件的<code>HMR</code>功能，虽然我们可以通过前面章节的方式实现这个功能，但是这样有些繁琐，而类似 react/vue 这种框架其实都提供了一些插件实现这个功能，因此我们这里去使用这些插件<code>react-refresh-webpack-plugin</code>。</p></li>",2),gn=n("code",null,"localhost:3000/home",-1),hn=n("code",null,"devServer",-1),yn=n("code",null,"Sources",-1),xn={href:"https://www.webpackjs.com/configuration/dev-server/#devserverhistoryapifallback",target:"_blank",rel:"noopener noreferrer"},qn=e(`<li><p>最后一步，我们的<code>public</code>文件夹下可能会有一些资源（如网站的图标），在打包时我们希望它同步打包到<code>dist</code>目录下，但是实际上我们此时打包后，<code>dist</code>目录下并没有这些资源，因此我们需要使用一个插件<code>copy-webpack-plugin</code>，通过这个插件将我们希望保留的资源在打包时自动复制到<code>dist</code>目录下。但是这样也会有问题，因为<code>public</code>文件夹下的<code>index.html</code>文件我们已经处理过了，我们不希望它被这个插件再次处理，因此我们需要使用这个插件提供的一项配置<code>globOptions.ignore</code>来设置需要忽略的文件。</p></li><li><p>生产模式和开发模式有些配置不同，因此我们需要获取到当前的环境，来判断使用哪套配置。在第三步中，我们使用了<code>NODE_ENV</code>这个变量来设置了不同的环境，因此我们在<code>webpack</code>的配置文件中，可以通过<code>p<wbr>rocess.env.NODE_ENV</code>来获取到我们在终端中敲入命令后，项目的运行环境。</p></li><li><p>后续项目使用到的库越来越多时，<code>node_modules</code>中所有的文件打包到一起后，那个 js 文件会非常大，导致加载时间太长，因此我们需要将<code>node_modules</code>中一些较大的模块提取出来单独打包，最后再将其他的一起打包。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* webpack.config.js */</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">// ... 其他配置</span>
    <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">splitChunks</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token string">&#39;all&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">cacheGroups</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token comment">// 这里的单独打包根据项目具体分析</span>
                <span class="token comment">// 将 react react-dom react-router-dom 单独打包成一个文件</span>
                <span class="token literal-property property">react</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                    <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token operator">/</span><span class="token punctuation">[</span><span class="token comment">//\\]node_modules[//\\]react(.*)?[//\\]/,</span>
                    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;chunk-react&#39;</span><span class="token punctuation">,</span>
                    <span class="token literal-property property">priority</span><span class="token operator">:</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token comment">// 设置打包优先级</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token comment">// 将 antd 单独打包</span>
                <span class="token literal-property property">antd</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                    <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token operator">/</span><span class="token punctuation">[</span><span class="token comment">//\\]node_modules[//\\]antd[//\\]/,</span>
                    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;chunk-antd&#39;</span><span class="token punctuation">,</span>
                    <span class="token literal-property property">priority</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token comment">// 将 node_modules 剩余模块一起打包</span>
                <span class="token literal-property property">libs</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                    <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token operator">/</span><span class="token punctuation">[</span><span class="token comment">//\\]node_modules[//\\]/,</span>
                    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;chunk-libs&#39;</span><span class="token punctuation">,</span>
                    <span class="token literal-property property">priority</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,3),jn=n("h2",{id:"vuecli",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#vuecli","aria-hidden":"true"},"#"),s(" VueCli")],-1),fn={href:"https://yk2012.github.io/sgg_webpack5/project/vue-cli.html",target:"_blank",rel:"noopener noreferrer"},wn=n("p",null,[n("code",null,"vue-cli"),s("进行配置时与上述"),n("code",null,"react-cli"),s("配置和优化的区别如下：")],-1),_n=n("li",null,[n("p",null,[n("code",null,"webpack"),s("自动补全部分将 .jsx 更改为 .vue，"),n("code",null,"module.rules"),s("中处理 jsx 文件也更改为处理 js 文件（"),n("code",null,"test: /\\.js$/"),s("）。")])],-1),En={href:"https://vue-loader.vuejs.org/zh/",target:"_blank",rel:"noopener noreferrer"},Pn=e(`<li><p>在 vue 项目中，css 一般都是写在 .vue 文件中的，因此我们处理 css 的<code>style-loader</code>也需要改成<code>vue-style-loader</code>。</p></li><li><p><code>.eslintrc.js</code>文件中的配置修改如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
	<span class="token literal-property property">env</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">node</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;plugin:vue/vue3-essential&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;eslint:recommended&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token literal-property property">parserOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token string">&quot;@babel/eslint-parser&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 这个包需要下载</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>babel.config.js</code>文件中的配置修改如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;@vue/cli-plugin-babel/preset&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>此时运行项目会有警告，说明有两个环境变量标识没有定义，分别是<code>_<wbr>_VUE_OPTIONS_API__</code>和<code>_<wbr>_VUE_PROD_DEVTOOLS__</code>。</p><p>在<code>webpack</code>中有一个插件<code>DefinePlugin</code>专门用来处理环境变量，我们这里使用它：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> DefinePlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;webpack&quot;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
		<span class="token keyword">new</span> <span class="token class-name">DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
			<span class="token literal-property property">_<wbr>_VUE_OPTIONS_API__</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 是否使用选项式 API 书写方式，如果设置为 false，则在打包时不会将 vue3 中支持 vue2 选项式书写方式的代码打包</span>
			<span class="token literal-property property">_<wbr>_VUE_PROD_DEVTOOLS__</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 生产模式不出现开发工具</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这里大家可能有疑问，上面不是使用了一个<code>cross-env</code>插件吗，为什么不使用它去解决这个问题？</p><p>这是因为<code>cross-env</code>定义的环境变量是给打包工具使用的，而这里我们需要的环境变量是给源代码使用的，因此需要使用额外的插件<code>DefinePlugin</code>。</p></blockquote></li>`,4),Sn=n("h2",{id:"原理部分",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#原理部分","aria-hidden":"true"},"#"),s(" 原理部分")],-1),Cn=n("h3",{id:"loader",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#loader","aria-hidden":"true"},"#"),s(" loader")],-1),Mn={href:"https://yk2012.github.io/sgg_webpack5/origin/loader.html#loader-%E6%A6%82%E5%BF%B5",target:"_blank",rel:"noopener noreferrer"},zn=n("h3",{id:"plugin",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#plugin","aria-hidden":"true"},"#"),s(" plugin")],-1),Wn={href:"https://yk2012.github.io/sgg_webpack5/origin/plugin.html#plugin-%E7%9A%84%E4%BD%9C%E7%94%A8",target:"_blank",rel:"noopener noreferrer"};function On(Dn,An){const a=i("ExternalLinkIcon");return o(),l("div",null,[r,n("p",null,[n("a",u,[s("概念 | webpack 中文文档 | webpack 中文文档 | webpack 中文网 (webpackjs.com)"),t(a)])]),d,n("p",null,[n("a",k,[s("css-loader"),t(a)]),s(" 官方 loader")]),n("p",null,[n("a",v,[s("less-loader"),t(a)]),s(" 官方 loader")]),n("p",null,[n("a",m,[s("sass-loader"),t(a)]),s(" 官方 loader")]),b,n("p",null,[s("项目文件中可能会有一些图片资源，这些图片资源有大有小，现在"),g,s("已经内置了处理图片文件的功能，但是，其中有一些配置也可以用来优化性能，如某些配置可以将文件转换为 base64 格式，"),n("a",h,[s("general-asset-type"),t(a)]),s("。")]),y,n("p",null,[n("a",x,[s("EslintWebpackPlugin"),t(a)]),s(" 官方文档")]),q,n("p",null,[n("a",j,[s("babel-loader"),t(a)])]),f,n("p",null,[n("a",w,[s("HtmlWebpackPlugin"),t(a)])]),_,n("p",null,[n("a",E,[s("DevServer"),t(a)]),s(" 是 "),n("a",P,[s("webpack-dev-server"),t(a)]),s(" 的配置，可以用于快速开发应用程序。")]),S,n("ol",null,[n("li",null,[n("p",null,[s("安装包："),n("a",C,[s("MiniCssExtractPlugin"),t(a)]),s("，这个插件会将 css 提取到单独的文件中")]),M]),z]),W,n("p",null,[s("使用 "),n("a",O,[s("CssMinimizerWebpackPlugin"),t(a)]),s(" 来优化和压缩 css")]),D,n("p",null,[n("a",A,[s("Devtool"),t(a)]),s(" ，这个选项控制是否生成以及如何生成 SourceMap")]),R,n("p",null,[s("热模块替换（"),n("a",V,[s("devServer.hot"),t(a)]),s("），其实在项目代码改变时，不再重新打包整个文件进行替换，而是只替换有改变的部分，这样能加快项目构建速度")]),$,n("blockquote",null,[I,n("p",null,[s("上面的代码片段给我们规定的 js 文件也实现了 HMR 功能，但是如果文件很多，我们每一个都需要进行配置的话就非常耗时间，因此在实际开发中，如果我们使用 vue 或者 react 进行开发时，我们会使用 "),n("a",L,[s("vue-loader"),t(a)]),s(" 或 "),n("a",N,[s("react-hot-loader"),t(a)]),s(" 来解决。")])]),B,n("p",null,[n("a",T,[s("ImageMinimizerWebpackPlugin"),t(a)]),s(": 用来压缩图片的插件。")]),F,n("ol",null,[H,n("li",null,[n("p",null,[n("a",U,[s("无损压缩和有损压缩的区别"),t(a)])])]),J,n("li",null,[G,n("p",null,[n("a",X,[s("jpegclub 官网地址"),t(a)])]),n("p",null,[n("a",Y,[s("optipng 官网地址"),t(a)])])])]),Z,n("ul",null,[n("li",null,[s("我们可以去 "),n("a",K,[s("Can I Useopen in new window"),t(a)]),s(" 网站查询 API 的兼容性问题。")]),Q]),nn,n("p",null,[n("a",sn,[s("渐进式网络应用程序"),t(a)])]),an,n("p",null,[n("a",tn,[s("react-cli 的各项示例配置"),t(a)])]),en,n("ol",null,[pn,n("li",null,[n("p",null,[s("在第一步的改动中，我们使用了"),on,s("，而它需要环境变量"),ln,s("或"),cn,s("来说明现在是开发环境还是生产环境还是测试环境。如果没有说明，则运行时会报错阻塞运行。虽然我们在配置时，会在配置文件中指明"),rn,s("或者"),un,s("，但是这个配置是"),dn,s("运行时读取的，"),kn,s("并不能通过这个配置知道当前的环境。因此我们还需要安装一个包 "),n("a",vn,[s("cross-env"),t(a)]),s("，这个是专门用来定义环境变量的一个库。")]),mn]),bn,n("li",null,[n("p",null,[s("当我们完成了路由功能后(History 模式)，正常使用的时候没什么问题，但是当刷新页面时，可能会返回 404 错误。例如此时我们的路径为"),gn,s("，当我们刷新页面时，浏览器会去"),hn,s("即"),yn,s("中找这个 home，但是它并不在其中，因为我们打包后的文件有 index、static 等等，但是不会有 home，因此我们需要让浏览器在刷新后去到 index 中，通过 index 定位到 home 资源。"),n("a",xn,[s("devServer.historyApiFallback"),t(a)]),s(" 。")])]),qn]),jn,n("p",null,[n("a",fn,[s("vue-cli 的各项示例配置"),t(a)])]),wn,n("ol",null,[_n,n("li",null,[n("p",null,[s("后续我们书写的文件为 .vue 文件，而这里没有编译 .vue 文件的 loader，因此我们需要添加一个编译 .vue 文件的 loader："),n("a",En,[s("Vue Loader"),t(a)]),s("。")])]),Pn]),Sn,Cn,n("p",null,[n("a",Mn,[s("Loader 原理 | 尚硅谷 Web 前端之 Webpack5 教程 (yk2012.github.io)"),t(a)])]),zn,n("p",null,[n("a",Wn,[s("Plugin 原理 | 尚硅谷 Web 前端之 Webpack5 教程 (yk2012.github.io)"),t(a)])])])}const Vn=p(c,[["render",On],["__file","webpack5.html.vue"]]);export{Vn as default};
