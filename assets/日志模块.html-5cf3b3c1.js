import{_ as n,W as a,X as s,a0 as e}from"./framework-4f54a744.js";const t="/docs/assets/image-20230526142332007-e385aa22.png",i="/docs/assets/image-20230526150358467-2246a6f0.png",o={},l=e(`<h1 id="日志模块" tabindex="-1"><a class="header-anchor" href="#日志模块" aria-hidden="true">#</a> 日志模块</h1><h2 id="导入模块" tabindex="-1"><a class="header-anchor" href="#导入模块" aria-hidden="true">#</a> 导入模块</h2><p><code>import logging</code></p><h2 id="日志的级别" tabindex="-1"><a class="header-anchor" href="#日志的级别" aria-hidden="true">#</a> 日志的级别</h2><p>级别由低到高：</p><ol><li>DEBUG：最详细的日志信息，经典应用changing是问题诊断</li><li>INFO：信息详细程度仅次于DEBUG，通常只记录关键节点信息，用于确定一切是按照我们预期的那样工作的</li><li>WARNING：当某些不期望的事情发生时记录的信息（如，磁盘可用空间较低），但是此时应用程序还是正常运行的</li><li>ERROR：由于一个更严重的问题导致某些功能不能正常运行时记录的信息</li><li>CRITICAL：当发生严重错误，导致应用程序不能继续运行时记录的信息</li></ol><h2 id="使用方式" tabindex="-1"><a class="header-anchor" href="#使用方式" aria-hidden="true">#</a> 使用方式</h2><h3 id="方式一-使用logging提供的模块级别的函数" tabindex="-1"><a class="header-anchor" href="#方式一-使用logging提供的模块级别的函数" aria-hidden="true">#</a> 方式一：使用logging提供的模块级别的函数</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> logging

<span class="token comment"># 设定日志输出的级别</span>
logging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>level <span class="token operator">=</span> logging<span class="token punctuation">.</span>INFO<span class="token punctuation">)</span>

<span class="token comment"># 输出不同级别的日志</span>
logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">&quot;debug&quot;</span><span class="token punctuation">)</span>
logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">&quot;info&quot;</span><span class="token punctuation">)</span>
logging<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string">&quot;warning&quot;</span><span class="token punctuation">)</span>
logging<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">)</span>
logging<span class="token punctuation">.</span>critical<span class="token punctuation">(</span><span class="token string">&quot;critical&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># 输出一条严重级别为 level 的日志记录，这是上面哪些方法的概括性使用</span>
<span class="token comment"># logging.log(level, *args, **kwargs)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="方式二-使用logging日志系统的四大组件" tabindex="-1"><a class="header-anchor" href="#方式二-使用logging日志系统的四大组件" aria-hidden="true">#</a> 方式二：使用logging日志系统的四大组件</h3><ol><li>loggers：提供应用程序代码直接使用的接口</li><li>handlers：用于将日志记录发送到指定的目的位置</li><li>filters：提供更精细的日志过滤功能，用于决定哪些日志记录会被输出（其他日志记录将被忽略）</li><li>formatters：用于控制日志信息的最终输出格式</li></ol><p><code>logging.basicConfig()</code>函数说明：</p><table><thead><tr><th>参数名</th><th>描述</th></tr></thead><tbody><tr><td>filename</td><td>指定日志输出目标文件的文件名，指定该设置项后，日志信息就不会输出到控制台了</td></tr><tr><td>filemode</td><td>指定日志文件的打开模式，默认为“a”。需要注意的是，该选项要在指定filename时才生效</td></tr><tr><td>format</td><td>指定日志格式字符串，即日志输出时的各个字段信息和顺序</td></tr><tr><td>datefmt</td><td>指定日期/时间格式。需要注意的是，改选共享需要在format中包含时间字段<code>%(asctime)s</code>时才有效</td></tr><tr><td>level</td><td>指定日志级别</td></tr><tr><td>stream</td><td>指定日志输出目标stream，如sys.stdout、sys.stderr以及网络stream。需要说明的是，stream和filename不能同时提供，否则会出现<code>ValueError</code>异常</td></tr><tr><td>style</td><td>Python3.2中新添加的配置项。指定format格式字符串的风格，可取值为<code>&quot;%&quot;、&quot;{}&quot;、&quot;$&quot;</code>，默认为 %</td></tr><tr><td>handlers</td><td>Python3.3中新添加的配置项。该选项如果被指定，它应该是一个创建了多个Handler的可迭代对象，这些handler将会被添加到root logger。需要说明的是：filename、stream和handlers这三个配置项只能有一个存在，不能同时出现2个或3个，否则会出现<code>valueError</code>异常。</td></tr></tbody></table><p><code>logging</code>模块的格式字符串：</p><p><img src="`+t+`" alt="image-20230526142332007"></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> logging

<span class="token comment"># 设定日志输出路径</span>
path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\\\log.log&quot;</span>
<span class="token comment"># asctime为日志写入时间、filename为执行的文件、message为写入的信息</span>
format_str <span class="token operator">=</span> <span class="token string">&quot;%(asctime)s %(filename)s %(message)s&quot;</span>
logging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>
  level<span class="token operator">=</span>logging<span class="token punctuation">.</span>INFO<span class="token punctuation">,</span>
  filename<span class="token operator">=</span>path<span class="token punctuation">,</span>
  <span class="token builtin">format</span><span class="token operator">=</span>format_str
<span class="token punctuation">)</span>
<span class="token comment"># “hahahah” 就是上面的 message</span>
logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">&quot;hahahah&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="解决日志中文乱码问题" tabindex="-1"><a class="header-anchor" href="#解决日志中文乱码问题" aria-hidden="true">#</a> 解决日志中文乱码问题</h2><ol><li>首先在代码中书写<code>logging.FileHandler()</code></li><li>然后按住 Control，点击 FileHandler，跳转到其源代码</li><li>注释掉关于<code>self.encoding</code>相关的代码</li><li>添加<code>self.encoding = &#39;utf-8&#39;</code></li><li>保存文件，完成</li></ol><p><img src="`+i+'" alt="image-20230526150358467"></p>',19),c=[l];function d(p,r){return a(),s("div",null,c)}const g=n(o,[["render",d],["__file","日志模块.html.vue"]]);export{g as default};
