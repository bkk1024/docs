import{_ as p,W as o,X as c,Y as s,Z as n,$ as e,a0 as a,C as i}from"./framework-4f54a744.js";const l="/docs/assets/image-20220406151636140-9d951ba8.png",u="/docs/assets/image-20220406160451204-0cb02573.png",r="/docs/assets/image-20220406160618336-a5a173b7.png",d="/docs/assets/image-20220406160729845-5e1fc7ee.png",k="/docs/assets/image-20220406203203275-048b9873.png",v="/docs/assets/image-20220406203359505-4fb6e53f.png",m="/docs/assets/image-20220406203758445-32fe6b18.png",b="/docs/assets/image-20220406204046430-f126d083.png",g="/docs/assets/image-20220406204355577-158cbbee.png",h="/docs/assets/image-20220406204612058-268df2de.png",q="/docs/assets/image-20220406204740033-4ac1eebd.png",f="/docs/assets/image-20220406212836559-d96e4032.png",x="/docs/assets/image-20220407134103800-65740c59.png",j="/docs/assets/image-20220407134418964-254c3ca6.png",y="/docs/assets/image-20220407171217838-9b51e231.png",w="/docs/assets/image-20220407141200475-f3f3c80f.png",_={},S=a(`<h1 id="nodejs-express-mysql" tabindex="-1"><a class="header-anchor" href="#nodejs-express-mysql" aria-hidden="true">#</a> nodejs + express + mysql</h1><h2 id="fs-读取-写入文件" tabindex="-1"><a class="header-anchor" href="#fs-读取-写入文件" aria-hidden="true">#</a> fs 读取 / 写入文件</h2><ol><li><p>导入 fs</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;fs&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>使用 <code>fs.readFile()</code> 读取文件内容，<code>fs.writeFile()</code> 向文件写入内容</p><ul><li><p><code>fs.readFile(path[, options], callback)</code>：</p><ol><li><p>path：必填参数，表示文件路径</p></li><li><p>options：可选参数，表示以什么编码格式读取，一般指定 utf8</p></li><li><p>callback：必填参数，回调函数，拿到读取结果</p><p>回调函数有两个参数，参数 1：失败的结果；参数 2：成功的结果</p></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;fs&quot;</span><span class="token punctuation">)</span>

fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&quot;./data.json&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;utf8&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> dataStr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span> <span class="token comment">// 读取成功输出 null，读取失败输出一个错误对象</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;dataStr&quot;</span><span class="token punctuation">,</span> dataStr<span class="token punctuation">)</span> <span class="token comment">// 读取成功输出数据，读取失败输出 undefined</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>fs.writeFile(path, data[, options], callback)</code>：</p><ol><li>path：必选参数，表示文件的存放路径，可以是已存在的文件（覆盖内容），也可以是不存在的文件（新建文件，不能新建文件夹）</li><li>data：必选参数，表示要向文件写入的数据，非字符串格式报错</li><li>options：可选参数，表示以什么格式写入文件，默认 utf8</li><li>callback：必选参数，回调函数，只有一个参数，失败后的返回结果</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">&quot;./data.json&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span> <span class="token comment">// 写入成功返回 null，写入失败返回一个错误对象</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><h3 id="fs-模块-路径动态拼接的问题" tabindex="-1"><a class="header-anchor" href="#fs-模块-路径动态拼接的问题" aria-hidden="true">#</a> fs 模块，路径动态拼接的问题</h3><p>在使用 fs 模块操作文件时，如果提供的操作路径是以 ./ 或 ../ 开头的相对路径时，很容易出现路径动态拼接错误的问题。</p><p>原因：代码在运行的时候，会以执行 node 命令时所处的目录，动态拼接出被操作文件的完整路径。</p><p>解决办法：</p><ol><li><p>提供绝对路径。但是这种方法移植性差，不利于维护。</p></li><li><p><code>__dirname</code>：表示当前文件所处的目录</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> <span class="token string">&quot;/data.json&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;utf8&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> dataStr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span> <span class="token comment">// 读取成功输出 null，读取失败输出一个错误对象</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;dataStr&quot;</span><span class="token punctuation">,</span> dataStr<span class="token punctuation">)</span> <span class="token comment">// 读取成功输出数据，读取失败输出 undefined</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="path-路劲模块" tabindex="-1"><a class="header-anchor" href="#path-路劲模块" aria-hidden="true">#</a> path 路劲模块</h2><ol><li><p>引入 path 模块：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>使用 <code>path.join()</code> 将多个路径片段拼接成一个完整的路径字符串，使用 <code>path.basename()</code> 方法用来从路径字符串中，将文件名解析出来，使用 <code>path.extname()</code> 获取文件拓展名</p><ul><li><p><code>path.join([...path])</code>：</p><p>参数没有个数限制，返回值为拼接好的路径字符串</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> pathStr <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;/a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/c&quot;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pathStr<span class="token punctuation">)</span> <span class="token comment">// \\a\\b\\c</span>

<span class="token keyword">const</span> pathStr2 <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;/a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/b/c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;../&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/d&quot;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pathStr2<span class="token punctuation">)</span> <span class="token comment">// \\a\\b\\d  &#39;../&#39;抵消了一层路径</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>path.basename(path[, ext])</code>：</p><p>有两个参数，参数 1 是文件路径，参数 2 是要去掉的文件名后的拓展名</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token string">&quot;/a/b/index.html&quot;</span>
<span class="token keyword">const</span> filename <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token comment">// index.html</span>
<span class="token keyword">const</span> filename2 <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">&quot;.html&quot;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>filename2<span class="token punctuation">)</span> <span class="token comment">// index</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>path.extname(path)</code>：</p><p>参数 path 必选，为文件路径</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token string">&quot;/a/b/index.html&quot;</span>
<span class="token keyword">const</span> extname <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>extname<span class="token punctuation">)</span> <span class="token comment">// .html</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><h2 id="http-模块" tabindex="-1"><a class="header-anchor" href="#http-模块" aria-hidden="true">#</a> http 模块</h2><ol><li><p>引入 http 模块</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;http&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>使用 <code>http.createServer()</code> 能将一台普通的电脑变成一台 Web 服务器</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>绑定 request 事件，监听客户端发送的网络请求</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;request&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token comment">// 参数一：请求类型</span>
	<span class="token comment">// 参数二：请求成功的回调</span>
	<span class="token comment">/* req 是请求对象，它包含了与客户端相关的数据合属性，如：
        1、req.url 是客户端请求的 url 地址，输出的是端口号后面的内容
        2、req.method 是客户端请求的类型，get 、post、delete等
       res 响应对象，可以使用 res.end(数据) 的形式给浏览器返回数据 */</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;req.url&quot;</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>url<span class="token punctuation">)</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;req.method&quot;</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>method<span class="token punctuation">)</span>
	<span class="token comment">// 这句话是为了解决 res.end() 方法发送中文时的乱码问题</span>
	res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/html; charset=utf-8&quot;</span><span class="token punctuation">)</span>
	res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">请求地址和类型: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>req<span class="token punctuation">.</span>url <span class="token operator">+</span> req<span class="token punctuation">.</span>method<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;有人请求了服务器&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>调用服务器实例的 <code>.listen(端口号, 回调函数)</code> 方法，即可启动当前的 web 服务器实例</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;服务器启动成功，地址为 http://127.0.0.1:80&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="模块化" tabindex="-1"><a class="header-anchor" href="#模块化" aria-hidden="true">#</a> 模块化</h2><h3 id="module-exports" tabindex="-1"><a class="header-anchor" href="#module-exports" aria-hidden="true">#</a> module.exports</h3><p>导出一个对象，向外界共享</p><h3 id="require" tabindex="-1"><a class="header-anchor" href="#require" aria-hidden="true">#</a> require</h3><p>导入一个模块，实际是导入的那个模块中 module 对象中的 export 属性，即 module.exports 导出的对象</p><blockquote><p>require 模块时，得到的永远是 module.exports 指向的对象</p></blockquote><h2 id="express" tabindex="-1"><a class="header-anchor" href="#express" aria-hidden="true">#</a> express</h2><p>与 nodejs 中内置的 http 模块类似，都是专门用来创建 Web 服务器的。</p><h3 id="用-express-搭建-web-服务器" tabindex="-1"><a class="header-anchor" href="#用-express-搭建-web-服务器" aria-hidden="true">#</a> 用 express 搭建 Web 服务器</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 引入 express</span>
<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;express&quot;</span><span class="token punctuation">)</span>

<span class="token comment">// 创建 Web 服务</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 启动 Web 服务</span>
app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;服务启动成功&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="监听-get-请求" tabindex="-1"><a class="header-anchor" href="#监听-get-请求" aria-hidden="true">#</a> 监听 get 请求</h3><p>使用 <code>app.get()</code> 方法，可以监听客户端的 get 请求，如法如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;请求 url&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 参数1：客户端请求的 url 地址</span>
  <span class="token comment">// 参数2：请求对应的处理函数</span>
  <span class="token comment">/*
  		req：请求对象，包含与请求相关的属性与方法
  		res：响应对象，包含了与响应相关的属性与方法
  */</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="监听-post-请求" tabindex="-1"><a class="header-anchor" href="#监听-post-请求" aria-hidden="true">#</a> 监听 post 请求</h3><p>使用 <code>app.post()</code> 方法，可以监听客户端的 get 请求，如法如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;请求 url&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 参数1：客户端请求的 url 地址</span>
  <span class="token comment">// 参数2：请求对应的处理函数</span>
  <span class="token comment">/*
  		req：请求对象，包含与请求相关的属性与方法
  		res：响应对象，包含了与响应相关的属性与方法
  */</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="把内容返回给客户端" tabindex="-1"><a class="header-anchor" href="#把内容返回给客户端" aria-hidden="true">#</a> 把内容返回给客户端</h3><p>使用 <code>res.send()</code> 方法，将处理好的内容，发送给客户端：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;请求 url&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>数据<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;请求 url&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;请求成功&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取-url-中携带的查询参数" tabindex="-1"><a class="header-anchor" href="#获取-url-中携带的查询参数" aria-hidden="true">#</a> 获取 url 中携带的查询参数</h3><p>使用 <code>res.query</code> 对象，可以访问到客户端通过查询字符串的形式发送到服务器的参数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/user&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>query<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="匹配动态参数" tabindex="-1"><a class="header-anchor" href="#匹配动态参数" aria-hidden="true">#</a> 匹配动态参数</h3><p>使用 <code>:参数名</code> 的形式获取动态参数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/user/:id/:name&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="托管静态资源" tabindex="-1"><a class="header-anchor" href="#托管静态资源" aria-hidden="true">#</a> 托管静态资源</h3><p>使用 <code>express.static()</code> ，可以非常方便的创建一个静态资源服务器</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">&quot;文件夹名&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 指定的这个文件名不会出现在访问资源的 url 路径中</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="挂载路径前缀" tabindex="-1"><a class="header-anchor" href="#挂载路径前缀" aria-hidden="true">#</a> 挂载路径前缀</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&quot;/文件夹名&quot;</span><span class="token punctuation">,</span> express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">&quot;文件夹名&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 指定的这个文件名会出现在访问资源的 url 路径中</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="express-中的路由" tabindex="-1"><a class="header-anchor" href="#express-中的路由" aria-hidden="true">#</a> express 中的路由</h2><p>express 中的路由由三部分组成，分别是请求类型、请求的 url 地址、处理函数，如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">(</span><span class="token constant">PATH</span><span class="token punctuation">,</span> <span class="token constant">HANDLER</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="创建路由模块" tabindex="-1"><a class="header-anchor" href="#创建路由模块" aria-hidden="true">#</a> 创建路由模块</h3><p>在 router.js 文件中代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 创建路由对象</span>

router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/user/list&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// 挂载获取用户列表的路由</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/user/add&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// 挂载添加用户的路由</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 index.js 文件中代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;router&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 引入 router.js 文件中的路由模块</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span> <span class="token comment">// 注册路由模块，访问路径为 http://127.0.0.1/路径</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="挂载访问前缀" tabindex="-1"><a class="header-anchor" href="#挂载访问前缀" aria-hidden="true">#</a> 挂载访问前缀</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&quot;/api&quot;</span><span class="token punctuation">,</span> router<span class="token punctuation">)</span> <span class="token comment">// 这样访问路径为 http://127.0.0.1/api/路径</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="app-use-的作用" tabindex="-1"><a class="header-anchor" href="#app-use-的作用" aria-hidden="true">#</a> app.use() 的作用</h2><p>用来注册全局中间件</p><h2 id="express-中间件" tabindex="-1"><a class="header-anchor" href="#express-中间件" aria-hidden="true">#</a> express 中间件</h2><p>express 的中间件本质上就是一个 function 处理函数，格式如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 中间件函数的形参列表中，必须包含 next 参数。而路由处理函数中只包含 req 和 res</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="next-函数的作用" tabindex="-1"><a class="header-anchor" href="#next-函数的作用" aria-hidden="true">#</a> next 函数的作用</h3><p>next 是实现多个中间件连续调用的关系，他表示把流转关系转交给下一个中间件或路由</p><h3 id="全局生效的中间件" tabindex="-1"><a class="header-anchor" href="#全局生效的中间件" aria-hidden="true">#</a> 全局生效的中间件</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">reqiure</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">mw</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;这是一个简单的中间件&#39;</span><span class="token punctuation">)</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>mw<span class="token punctuation">)</span> <span class="token comment">// 使用 app.use() 是注册了全局中间件，对所有的路由都生效</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;中间件调用了这个路由&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="局部生效的中间件" tabindex="-1"><a class="header-anchor" href="#局部生效的中间件" aria-hidden="true">#</a> 局部生效的中间件</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">reqiure</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">mw</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;这是一个简单的中间件&#39;</span><span class="token punctuation">)</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> mw<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 直接将中间件传给路由，是局部生效的中间件，只对这个路由生效，局部中间件可以写任意多个</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;中间件调用了这个路由&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>中间件使用注意：</p><ol><li>一定要在路由前注册中间件（错误级别中间件除外）</li><li>中间件可以连续调用多个</li><li>不要忘记调用 next() 函数</li><li>调用 next() 后不要写别的代码，防止逻辑混乱</li><li>连续调用多个中间件之间 req 和 res 是共享的</li></ol></blockquote><h3 id="错误级别中间件" tabindex="-1"><a class="header-anchor" href="#错误级别中间件" aria-hidden="true">#</a> 错误级别中间件</h3><p>用来捕获整个项目中发生的异常错误，从而防止项目异常崩溃的问题。格式：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">mw</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">/* 
  	含有四个形参，比普通中间件多个了 err 参数，获取错误信息
  */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这个中间件要注册在所有路由之后，因为其要获取全局的错误。</p></blockquote><h3 id="express-内置的中间件" tabindex="-1"><a class="header-anchor" href="#express-内置的中间件" aria-hidden="true">#</a> express 内置的中间件</h3><p><img src="`+l+`" alt="image-20220406151636140"></p><h3 id="监听-req-的-data-事件" tabindex="-1"><a class="header-anchor" href="#监听-req-的-data-事件" aria-hidden="true">#</a> 监听 req 的 data 事件</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="监听-req-的-end-事件" tabindex="-1"><a class="header-anchor" href="#监听-req-的-end-事件" aria-hidden="true">#</a> 监听 req 的 end 事件</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用-querystring-模块解析请求体数据" tabindex="-1"><a class="header-anchor" href="#使用-querystring-模块解析请求体数据" aria-hidden="true">#</a> 使用 querystring 模块解析请求体数据</h3><p>这是 nodejs 内置的模块，专门用来处理查询字符串。通过这个模块提供的 <code>parse()</code> 函数，可以将查询字符串解析成对象的格式，代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> qs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;querystring&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> body <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="解决跨域问题" tabindex="-1"><a class="header-anchor" href="#解决跨域问题" aria-hidden="true">#</a> 解决跨域问题</h3><ul><li><p>CORS（推荐，主流应用）</p><p>cors 是 express 的一个第三方中间件。通过安装和配置 cors 中间件可以解决跨域问题。使用 npm 进行安装。</p><ol><li><p>引入 cors</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> cors <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;cors&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>使用 cors</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 必须写在所有的路由之前</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol></li><li><p>JSONP（不推荐，只支持 GET）</p></li></ul><h3 id="cors-响应头" tabindex="-1"><a class="header-anchor" href="#cors-响应头" aria-hidden="true">#</a> CORS 响应头</h3><ol><li><p><code>Access-Control-Allow-Origin</code>：</p><p><img src="`+u+'" alt="image-20220406160451204"></p></li><li><p><code>Access-Control-Allow-Headers</code>：</p><p><img src="'+r+'" alt="image-20220406160618336"></p></li><li><p><code>Access-Control-Allow-Methods</code>：</p><p><img src="'+d+'" alt="image-20220406160729845"></p></li></ol><h2 id="使用-express-ts" tabindex="-1"><a class="header-anchor" href="#使用-express-ts" aria-hidden="true">#</a> 使用 express + ts</h2>',82),F=a(`<li><p>使用 ts 书写 nodejs 时，需要全局安装<code>ts-node</code>启动服务</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install ts-node -g

// 启动服务的命令
ts-node index.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用 ts 时，需要安装两个类型支持：<code>@types/express @types/node</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install @types/node @types/express -D
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>导入 express 使用时如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> express<span class="token punctuation">,</span> <span class="token punctuation">{</span> Express<span class="token punctuation">,</span> Router<span class="token punctuation">,</span> Request<span class="token punctuation">,</span> Response <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;express&quot;</span>

<span class="token keyword">const</span> app<span class="token operator">:</span> Express <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> router<span class="token operator">:</span> Router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&quot;/api&quot;</span><span class="token punctuation">,</span> router<span class="token punctuation">)</span>

router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/list&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>req<span class="token operator">:</span> Request<span class="token punctuation">,</span> res<span class="token operator">:</span> Response<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
	res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
		data<span class="token operator">:</span> result<span class="token punctuation">.</span>data<span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3001</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;success server in http://localhost:3001&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,3),T=s("code",null,"ts-node",-1),W=s("code",null,"--watch",-1),R=s("code",null,"ts-node-dev",-1),A={href:"https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fwclr%2Fts-node-dev",target:"_blank",rel:"noopener noreferrer"},J={href:"https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Ffgnass%2Fnode-dev",target:"_blank",rel:"noopener noreferrer"},C={href:"https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2FTypeStrong%2Fts-node",target:"_blank",rel:"noopener noreferrer"},E=a(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ts-node-dev index.ts --watch
// 这样即可自动更新 ts 文件的更改
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),H=a(`<h2 id="sql-语句" tabindex="-1"><a class="header-anchor" href="#sql-语句" aria-hidden="true">#</a> SQL 语句</h2><h3 id="查询" tabindex="-1"><a class="header-anchor" href="#查询" aria-hidden="true">#</a> 查询</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> 字段 <span class="token keyword">from</span> 表名
<span class="token comment">-- 多个字段名之间用 &quot;,&quot; 逗号隔开</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="插入" tabindex="-1"><a class="header-anchor" href="#插入" aria-hidden="true">#</a> 插入</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">insert</span> <span class="token keyword">into</span> 表名<span class="token punctuation">(</span>列<span class="token number">1</span><span class="token punctuation">,</span> 列<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span> 值<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="更新" tabindex="-1"><a class="header-anchor" href="#更新" aria-hidden="true">#</a> 更新</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">update</span> 表名 <span class="token keyword">set</span> 列名<span class="token operator">=</span>新值<span class="token punctuation">,</span> 列名<span class="token operator">=</span>新值 <span class="token keyword">where</span> 列名<span class="token operator">=</span>某个值
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="删除" tabindex="-1"><a class="header-anchor" href="#删除" aria-hidden="true">#</a> 删除</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">delete</span> <span class="token keyword">from</span> 表名 <span class="token keyword">where</span> 列名<span class="token operator">=</span>值
<span class="token comment">/*
	使用 delete 语句会真正的将数据从表中删除，为了保险起见，可以给每个数据加上 status 字段，用于标记删除，这样数据还保留在表中，可通过 status 将其过滤掉。
	这样可以不使用 delete 语句，使用 update 语句更新 status 即可
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="where-子句" tabindex="-1"><a class="header-anchor" href="#where-子句" aria-hidden="true">#</a> where 子句</h3><p><img src="`+k+'" alt="image-20220406203203275"><img src="'+v+'" alt="image-20220406203359505"></p><h3 id="and-和-or-运算符" tabindex="-1"><a class="header-anchor" href="#and-和-or-运算符" aria-hidden="true">#</a> and 和 or 运算符</h3><p><img src="'+m+'" alt="image-20220406203758445"></p><h3 id="排序" tabindex="-1"><a class="header-anchor" href="#排序" aria-hidden="true">#</a> 排序</h3><p><img src="'+b+'" alt="image-20220406204046430"></p><h3 id="多重排序" tabindex="-1"><a class="header-anchor" href="#多重排序" aria-hidden="true">#</a> 多重排序</h3><p><img src="'+g+'" alt="image-20220406204355577"></p><h3 id="count-函数" tabindex="-1"><a class="header-anchor" href="#count-函数" aria-hidden="true">#</a> count 函数</h3><p><img src="'+h+'" alt="image-20220406204612058"></p><h3 id="as-关键字" tabindex="-1"><a class="header-anchor" href="#as-关键字" aria-hidden="true">#</a> as 关键字</h3><p><img src="'+q+`" alt="image-20220406204740033"></p><h2 id="mysql-模块" tabindex="-1"><a class="header-anchor" href="#mysql-模块" aria-hidden="true">#</a> mysql 模块</h2><p><code>npm i mysql</code> ：安装 mysql 模块</p><ol><li><p>导入 mysql 模块</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;mysql&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>建立与 MySQL 数据库的连接</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> db <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createPool</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 数据库的 ip 地址</span>
	<span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 登录数据库的用户名</span>
	<span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 登录数据库的密码</span>
	<span class="token literal-property property">database</span><span class="token operator">:</span> <span class="token string">&quot;mycontrol&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 指定哪个数据库</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用 <code>db.query()</code> 函数，指定要执行的 sql 语句，通过回调函数拿到结果：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">&quot;select * from trademark&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">/* 
	当执行 delete 语句后，结果也是一个对象，也会包含 affectedRows 属性，
	当其为 1 时说明删除成功
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="占位符" tabindex="-1"><a class="header-anchor" href="#占位符" aria-hidden="true">#</a> ? 占位符</h3><p>在 sql 语句中，可以使用 ? 占位符表示一个具体的值，后面再在 .query() 函数中填入具体值的内容</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&quot;insert into 表名(username, password) values(?, ?)&quot;</span> <span class="token comment">// 使用 ? 占位符</span>
<span class="token keyword">const</span> username <span class="token operator">=</span> <span class="token string">&quot;zhangsan&quot;</span>
<span class="token keyword">const</span> password <span class="token operator">=</span> <span class="token number">1232123</span>

db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token punctuation">[</span>username<span class="token punctuation">,</span> password<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="插入数据的便捷方式" tabindex="-1"><a class="header-anchor" href="#插入数据的便捷方式" aria-hidden="true">#</a> 插入数据的便捷方式</h3><p><img src="`+f+`" alt="image-20220406212836559"></p><h2 id="身份认证" tabindex="-1"><a class="header-anchor" href="#身份认证" aria-hidden="true">#</a> 身份认证</h2><ul><li>服务器端渲染的开发模式建议使用 Session 认证机制</li><li>前后端分离的开发模式建议使用 JWT 认证机制</li></ul><h3 id="session" tabindex="-1"><a class="header-anchor" href="#session" aria-hidden="true">#</a> session</h3><h4 id="向-session-中存入数据" tabindex="-1"><a class="header-anchor" href="#向-session-中存入数据" aria-hidden="true">#</a> 向 session 中存入数据</h4><ol><li><p><code>npm i express-session</code>：安装 express-session 中间件</p></li><li><p>注册 session 中间件：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> session <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;express-session&quot;</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>
	<span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
		<span class="token literal-property property">secret</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 可以为任意字符串</span>
		<span class="token literal-property property">resave</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 固定写法</span>
		<span class="token literal-property property">saveUninitialized</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 固定写法</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用 <code>req.session</code> 来访问和使用 session 对象：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;/api/login&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>username <span class="token operator">!==</span> <span class="token string">&quot;admin&quot;</span> <span class="token operator">||</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>password <span class="token operator">!==</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&quot;登录失败，账号或密码错误&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 只有成功配置了 express-session 这个中间件后，才能使用 req.session 这个属性</span>
	req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>user <span class="token operator">=</span> req<span class="token punctuation">.</span>body
	req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>islogin <span class="token operator">=</span> <span class="token boolean">true</span>

	res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&quot;登录成功&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h4 id="从-session-中取数据" tabindex="-1"><a class="header-anchor" href="#从-session-中取数据" aria-hidden="true">#</a> 从 session 中取数据</h4><p>直接从 req.session 中取出来使用即可</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/api/username&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token comment">// 判断用户是否登录</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>islogin<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&quot;fail&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">username</span><span class="token operator">:</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>user<span class="token punctuation">.</span>username <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="清空-session" tabindex="-1"><a class="header-anchor" href="#清空-session" aria-hidden="true">#</a> 清空 session</h4><p>调用 <code>req.session.destory()</code> 方法清空 session</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;/api/logout&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	req<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">destory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&quot;退出登录成功&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="jwt" tabindex="-1"><a class="header-anchor" href="#jwt" aria-hidden="true">#</a> JWT</h3><p>JWT 通常由三部分组成，分别是 Header（头部）、Payload（有效荷载）、Signature（签名）。三者之间使用英文逗号隔开 &quot;,&quot; 。格式如下：</p><p><img src="`+x+'" alt="image-20220407134103800"></p><ol><li>Header：安全性相关，保证 token 的安全性</li><li>Payload：用户信息部分，是用户信息经过加密之后生成的字符串</li><li>Signature：跟 Header 一样</li></ol><h4 id="使用方式" tabindex="-1"><a class="header-anchor" href="#使用方式" aria-hidden="true">#</a> 使用方式</h4><p><img src="'+j+`" alt="image-20220407134418964"></p><ol><li><p>安装 JWT 相关的包</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm i jsonwebtoken express-jwt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>jsonwebtoken：用户生成 JWT 字符串</li><li>express-jwt：将 JWT 字符串解析还原成 json 对象</li></ul></li><li><p>使用：<strong><em>加密</em></strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;jsonwebtoken&quot;</span><span class="token punctuation">)</span>
<span class="token comment">// const expressJWT = require(&#39;express-jwt&#39;)</span>

<span class="token keyword">const</span> secretKey <span class="token operator">=</span> <span class="token string">&quot;hhhhhhh&quot;</span> <span class="token comment">// 填写任意字符串，这个密钥用于加密和解密</span>

app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;/api/login&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token comment">// 登录失败Or成功相关代码省略 ...</span>
	res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
		<span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
		<span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&quot;登录成功&quot;</span><span class="token punctuation">,</span>
		<span class="token literal-property property">token</span><span class="token operator">:</span> jwt<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>
			<span class="token punctuation">{</span> <span class="token literal-property property">username</span><span class="token operator">:</span> userinfo<span class="token punctuation">.</span>username <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 用户信息</span>
			secretKey<span class="token punctuation">,</span> <span class="token comment">// 密钥</span>
			<span class="token punctuation">{</span> <span class="token literal-property property">expriesIn</span><span class="token operator">:</span> <span class="token string">&quot;30s&quot;</span> <span class="token punctuation">}</span>
		<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 过期时间，这里设定为 30 秒</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用：<strong><em>解密</em></strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> expressJWT <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;express-jwt&quot;</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">expressJWT</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">secret</span><span class="token operator">:</span> secretKey <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unless</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\/api\\/</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 这里的意思是使用 secretKey 密钥进行解密，且以 /api 开头的请求路径不需要权限</span>
<span class="token comment">// 只要配置了 express-jwt 这个中间件，就可以把解析出来的用户信息挂载到 req.user 属性上</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>使用 <code>req.user</code> 访问从 JWT 字符串中解析出来的用户信息</p><p><img src="`+y+'" alt="image-20220407171217838"></p></li></ul></li><li><p>捕获解析失败的错误</p><p><img src="'+w+'" alt="image-20220407141200475"></p></li></ol>',47);function N(O,L){const t=i("ExternalLinkIcon");return o(),c("div",null,[S,s("ol",null,[F,s("li",null,[s("p",null,[T,n("有一个小弊端，就是它没有"),W,n("，即不能监听 ts 文件的改动并及时更新，因此我们可以使用另一个插件"),R,n("。"),s("a",A,[n("ts-node-dev"),e(t)]),n(" 是基于"),s("a",J,[n("node-dev"),e(t)]),n(" 做的一个用于"),s("a",C,[n("ts-node"),e(t)]),n(" 服务重启工具。")]),E])]),H])}const K=p(_,[["render",N],["__file","nodejs.html.vue"]]);export{K as default};
