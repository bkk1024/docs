import{_ as o,W as p,X as c,Y as n,Z as s,$ as e,a0 as t,C as i}from"./framework-4f54a744.js";const l={},u=t(`<h1 id="vue-router" tabindex="-1"><a class="header-anchor" href="#vue-router" aria-hidden="true">#</a> vue-router</h1><h2 id="安装-vue-router" tabindex="-1"><a class="header-anchor" href="#安装-vue-router" aria-hidden="true">#</a> 安装 vue-router</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install vue-router
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="配置-router-文件" tabindex="-1"><a class="header-anchor" href="#配置-router-文件" aria-hidden="true">#</a> 配置 router 文件</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">/* router/index.ts */</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> createRouter<span class="token punctuation">,</span> createWebHistory<span class="token punctuation">,</span> createWebHashHistory<span class="token punctuation">,</span> RouteRecordRaw <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue-router&quot;</span>

<span class="token comment">// 导入路由页面，导入 src/views/ 文件夹下的所有 vue 文件</span>
<span class="token keyword">const</span> views <span class="token operator">=</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span><span class="token function">glob</span><span class="token punctuation">(</span><span class="token string">&quot;../views/**/*.vue&quot;</span><span class="token punctuation">)</span>

<span class="token comment">/**
 * RouteRecordRaw: vue-router 的类型 type
 */</span>
<span class="token keyword">const</span> routes<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>RouteRecordRaw<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
	<span class="token punctuation">{</span>
		name<span class="token operator">:</span> <span class="token string">&quot;home&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 路由名称</span>
		path<span class="token operator">:</span> <span class="token string">&quot;/home&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 路由路径</span>
		component<span class="token operator">:</span> views<span class="token punctuation">[</span><span class="token string">&quot;../views/Home.vue&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 这个路由要展示的组件</span>
		<span class="token comment">// children: [], // 子路由</span>
		<span class="token comment">// meta: {}, // 其他信息，如 title ，keepAlive 等</span>
		<span class="token comment">// redirect: &quot;&quot;, // 路由重定向</span>
		<span class="token comment">// props: {}, // 路由参数</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token comment">// ... 其他路由信息</span>
<span class="token punctuation">]</span>

<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token comment">// 路由的模式，有 history 和 hash 两种模式</span>
	history<span class="token operator">:</span> <span class="token function">createWebHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token comment">// history: createWebHashHistory(),</span>
	routes<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> router
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="import-meta-glob" tabindex="-1"><a class="header-anchor" href="#import-meta-glob" aria-hidden="true">#</a> i<wbr>mport.meta.glob</h3>`,6),r=n("code",null,[s("i"),n("wbr"),s("mport.meta.glob")],-1),d={href:"https://cn.vitejs.dev/guide/features.html#glob-import",target:"_blank",rel:"noopener noreferrer"},k=t(`<h2 id="在-main-文件中导入并使用" tabindex="-1"><a class="header-anchor" href="#在-main-文件中导入并使用" aria-hidden="true">#</a> 在 main 文件中导入并使用</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">/* main.ts */</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span>
<span class="token keyword">import</span> <span class="token string">&quot;./style.css&quot;</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&quot;./App.vue&quot;</span>
<span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">&quot;./router&quot;</span>

<span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&quot;#app&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="路由跳转" tabindex="-1"><a class="header-anchor" href="#路由跳转" aria-hidden="true">#</a> 路由跳转</h2><p>路由跳转有三种方式：</p><ol><li><p><code>&lt;router-link&gt;</code>：命名式路由，它可以传入<code>to</code>属性来指定要跳转的路由</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 第一种写法：传入要去的路由的 path --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/home<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>跳转<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 第二种写法：传入要去的路由的 name，这种方式需要在路由的配置文件中书写了 name 属性 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ name: &#39;home&#39;}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>跳转<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>router.push() | router.replace()</code>：编程式导航，在<code>push | replace</code>方法中传入要跳转的路由的 path 或者 name 即可。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue-router&quot;</span>

<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">useRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 传入路径的简写</span>
router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;/home&quot;</span><span class="token punctuation">)</span>
<span class="token comment">// 传入路径的详细写法</span>
router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	path<span class="token operator">:</span> <span class="token string">&quot;/home&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 传入名字的写法</span>
router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	name<span class="token operator">:</span> <span class="token string">&quot;home&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">/*
	router.replace() 写法同上
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>router.push()</code>和<code>router.replace()</code>的区别在于：</p><ul><li><code>router.push()</code>跳转，浏览器会记住当前路由跳转的历史，以便可以使用浏览器的前进后退按钮来进行历史记录的前进后退。</li><li><code>router.replace()</code>跳转则不会被浏览器放入历史记录，有些功能如登录后，我们不希望用户可以通过浏览器的前进后退来回到登录页面，即可使用这个方式进行跳转。</li><li><code>&lt;router-link&gt;</code>也可以通过添加<code>replace</code>属性来达到不被记录的效果：<code>&lt;router-link replace :to=&quot;/home&quot;&gt;home&lt;/router-link&gt;</code>。</li></ul></blockquote></li><li><p><code>&lt;a href=&quot;&quot;&gt;</code>：这种方式会刷新页面，不太推荐使用。</p></li></ol><h2 id="路由传参" tabindex="-1"><a class="header-anchor" href="#路由传参" aria-hidden="true">#</a> 路由传参</h2><p>路由传参的方式多种多样，这里介绍几种我常用的，其他的可自行百度。</p><ol><li><p><code>router.push()</code>传参：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useRouter<span class="token punctuation">,</span> useRoute <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue-router&quot;</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">useRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> route <span class="token operator">=</span> <span class="token function">useRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 传递 query 参数</span>
router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	path<span class="token operator">:</span> <span class="token string">&quot;home&quot;</span><span class="token punctuation">,</span>
	query<span class="token operator">:</span> <span class="token punctuation">{</span>
		id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
		<span class="token comment">// ... 其他参数</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 使用 query 参数</span>
route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useRouter<span class="token punctuation">,</span> useRoute <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue-router&quot;</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">useRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> route <span class="token operator">=</span> <span class="token function">useRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 传递 params 参数</span>
<span class="token comment">/**
 * 如果往 push 方法中传入的是对象，则使用 path + params 的方式是无法进行正确的路由跳转的。需要使用 name + params
 */</span>
router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token comment">// path: &#39;/home&#39;</span>
	name<span class="token operator">:</span> <span class="token string">&quot;home&quot;</span><span class="token punctuation">,</span>
	params<span class="token operator">:</span> <span class="token punctuation">{</span>
		id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 使用 params 参数</span>
route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>query</code>传递的参数在<code>url</code>的<code>?</code>后面，多个参数使用<code>&amp;</code>进行连接，方式为<code>参数名=参数值</code>。</p><p><code>params</code>传递的参数在内存中，不会展示在<code>url</code>上，但是页面刷新后这些参数就会失效。且使用<code>params</code>传参时，不能使用<code>path</code>搭配，应该使用<code>name</code>搭配。</p></blockquote></li><li><p><code>router.replace()</code>传参：同上。</p></li><li><p>在路由配置文件中规定路由参数，并在路由跳转时进行传递：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">/* router/index.ts */</span>
<span class="token comment">// 先在 router 的配置文件中定好要传递的参数</span>

<span class="token keyword">const</span> routes<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>RouteRecordRaw<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
	<span class="token punctuation">{</span>
		<span class="token comment">//动态路由参数</span>
		path<span class="token operator">:</span> <span class="token string">&quot;/home/:id&quot;</span><span class="token punctuation">,</span>
		name<span class="token operator">:</span> <span class="token string">&quot;home&quot;</span><span class="token punctuation">,</span>
		<span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;../components/Home.vue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token number">1</span>

<span class="token comment">// 传参方式一</span>
router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/home/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>

<span class="token comment">// 传参方式二</span>
router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	name<span class="token operator">:</span> <span class="token string">&quot;home&quot;</span><span class="token punctuation">,</span>
	params<span class="token operator">:</span> <span class="token punctuation">{</span>
		id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 使用参数</span>
route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这种方式传递的参数也在<code>url</code>中，但是<code>url</code>中不存在<code>?</code>，且多个参数也不需要以<code>&amp;</code>进行连接。</p><p>但是这种方式也有弊端，如果有多个参数，其存在方式如下<code>/home/:id/:title/:number</code>，如果其中某个参数为空，或者忘记传递，则路由跳转后<code>url</code>可能会是如下情况<code>/home/1//2</code>，我们能看出这里是<code>title</code>没有值，这样就会造成页面白屏，因为没有这样的路由。</p><p>因此，为了避免上面的情况，我推荐多个参数的情况统一将其变为单一参数，如<code>/home/:params</code>，然后在传递参数时进行如下操作：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token punctuation">{</span>
	id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
	title<span class="token operator">:</span> <span class="token string">&quot;home&quot;</span><span class="token punctuation">,</span>
	<span class="token builtin">number</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// 传递参数方式一</span>
router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/home/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>params<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>

<span class="token comment">// 传递参数方式二</span>
router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	name<span class="token operator">:</span> <span class="token string">&quot;home&quot;</span><span class="token punctuation">,</span>
	params<span class="token operator">:</span> <span class="token punctuation">{</span>
		params<span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 获取参数</span>
<span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// params.id</span>
<span class="token comment">// params.title</span>
<span class="token comment">// params.number</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，即使有为空的参数，也不会造成页面白屏了。</p></blockquote></li></ol><h2 id="路由守卫" tabindex="-1"><a class="header-anchor" href="#路由守卫" aria-hidden="true">#</a> 路由守卫</h2><ol><li><p><code>router.beforeEach((to, from, next) =&gt; {})</code>：全局前置路由守卫</p></li><li><p><code>router.afterEach((to, from) =&gt; {})</code>：全局后置路由守卫</p></li><li><p><code>router.beforeResolve((to, from, next) =&gt; {})</code>：全局解析守卫，<strong>在每次导航时会触发</strong>。</p></li><li><p><code>beforeEnter((to, from) =&gt; {})</code>：路由独享守卫，<strong>只在进入此路由时触发一次</strong>。</p></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>
	<span class="token punctuation">{</span>
		<span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;/users/:id&quot;</span><span class="token punctuation">,</span>
		<span class="token literal-property property">component</span><span class="token operator">:</span> UserDetails<span class="token punctuation">,</span>
		<span class="token function-variable function">beforeEnter</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
			<span class="token comment">// 路由独享守卫</span>
			<span class="token keyword">return</span> <span class="token boolean">false</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),v={href:"https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E8%B7%AF%E7%94%B1%E7%8B%AC%E4%BA%AB%E7%9A%84%E5%AE%88%E5%8D%AB",target:"_blank",rel:"noopener noreferrer"},m={start:"5"},b=n("p",null,"组件内的守卫：",-1),h=n("ul",null,[n("li",null,[n("code",null,"beforeRouteEnter")]),n("li",null,[n("code",null,"beforeRouteUpdate")]),n("li",null,[n("code",null,"beforeRouteLeave")])],-1),g={href:"https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E7%BB%84%E4%BB%B6%E5%86%85%E7%9A%84%E5%AE%88%E5%8D%AB",target:"_blank",rel:"noopener noreferrer"},y=t(`<blockquote><p><strong>完整的路由导航解析流程</strong>：</p><ol><li>导航被触发。</li><li>在失活的组件里调用 <code>beforeRouteLeave</code> 守卫。</li><li>调用全局的 <code>beforeEach</code> 守卫。</li><li>在重用的组件里调用 <code>beforeRouteUpdate</code> 守卫(2.2+)。</li><li>在路由配置里调用 <code>beforeEnter</code>。</li><li>解析异步路由组件。</li><li>在被激活的组件里调用 <code>beforeRouteEnter</code>。</li><li>调用全局的 <code>beforeResolve</code> 守卫(2.5+)。</li><li>导航被确认。</li><li>调用全局的 <code>afterEach</code> 钩子。</li><li>触发 DOM 更新。</li><li>调用 <code>beforeRouteEnter</code> 守卫中传给 <code>next</code> 的回调函数，创建好的组件实例会作为回调函数的参数传入。</li></ol></blockquote><h2 id="滚动行为" tabindex="-1"><a class="header-anchor" href="#滚动行为" aria-hidden="true">#</a> 滚动行为</h2><p>使用前端路由，当切换到新路由时，想要页面滚到顶部，或者是保持原先的滚动位置，就像重新加载页面那样。 vue-router 能做到，而且更好，它让你可以自定义路由切换时页面如何滚动。</p><p><strong><em>注意: 这个功能只在支持 <code>history.pushState</code> 的浏览器中可用。</em></strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token comment">// 这个函数 return 的是想要滚动到的位置</span>
	<span class="token function">scrollBehavior</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> savedPosition</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// savedPosition 上次滚动条的位置</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>savedPosition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> savedPosition
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">top</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),f={href:"https://router.vuejs.org/zh/guide/advanced/scroll-behavior.html#%E6%BB%9A%E5%8A%A8%E8%A1%8C%E4%B8%BA",target:"_blank",rel:"noopener noreferrer"},q=t(`<h2 id="动态路由" tabindex="-1"><a class="header-anchor" href="#动态路由" aria-hidden="true">#</a> 动态路由</h2><p>动态路由主要通过两个函数实现：</p><ol><li><p><code>router.addRoute()</code>：给当前路由添加新的路由。可以应用在路由管理中，如用户登录了，后端传过来了这个用户拥有的可访问的路由权限，我们就可以将这些路由权限循环添加到现有路由中。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>router<span class="token punctuation">.</span><span class="token function">addRoute</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;/about&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> About<span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;about&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><code>router.removeRoute()</code>：删除路由。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>router<span class="token punctuation">.</span><span class="token function">removeRoute</span><span class="token punctuation">(</span><span class="token string">&quot;about&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><p>删除路由其实还有两种方法：</p><ol><li><p>第一种方法其实叫做覆盖更加准确，我们添加的新路由在当前路由中已经存在，那么新的路由就会覆盖旧的路由，<strong>判断路由是否重复是以<code>name</code>作为依据的，<code>name</code>相同则重复</strong>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>router<span class="token punctuation">.</span><span class="token function">addRoute</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;/about&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;about&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> About <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 这将会删除之前已经添加的路由，因为他们具有相同的名字且名字必须是唯一的</span>
router<span class="token punctuation">.</span><span class="token function">addRoute</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;/other&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;about&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> Other <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>第二种方法是调用我们新添加路由时的回调，<strong>每次我们使用<code>router.addRoute()</code>添加新路由时，就会返回一个回调，当我们执行这个回调时，就会删除我们当前添加的这个路由</strong>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> removeRoute <span class="token operator">=</span> router<span class="token punctuation">.</span><span class="token function">addRoute</span><span class="token punctuation">(</span>routeRecord<span class="token punctuation">)</span>
<span class="token function">removeRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 删除路由如果存在的话</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><blockquote><p>当路由被删除时，他的所有别名和子路由也会同时删除。</p></blockquote><h2 id="查看现有路由" tabindex="-1"><a class="header-anchor" href="#查看现有路由" aria-hidden="true">#</a> 查看现有路由</h2><p><code>vue-router</code>提供了两个方法来查看现有路由：</p><ol><li><code>router.hasRoute(name: string | symbol): boolean</code>：检查路由是否存在。</li><li><code>router.getRoutes(): RouteRecord[]</code>：获取一个包含所有路由记录的数组。</li></ol><h2 id="控制路由前进后退" tabindex="-1"><a class="header-anchor" href="#控制路由前进后退" aria-hidden="true">#</a> 控制路由前进后退</h2><p><code>router.go(delta: number)</code>：控制路由前进，即相对当前页面，想要前进几个历史记录</p><p><code>router.back()</code>：相当于<code>router.go(-1)</code></p><p><code>router.forward()</code>：相当于<code>router.go(1)</code></p>`,13);function R(w,x){const a=i("ExternalLinkIcon");return p(),c("div",null,[u,n("p",null,[s("Vite 支持使用特殊的 "),r,s(" 函数从文件系统导入多个模块："),n("a",d,[s("功能 | glob-import | Vite"),e(a)])]),k,n("p",null,[n("a",v,[s("路由独享守卫 | Vue Router"),e(a)])]),n("ol",m,[n("li",null,[b,h,n("p",null,[n("a",g,[s("组件内的守卫 | Vue Router"),e(a)])])])]),y,n("p",null,[n("a",f,[s("滚动行为 | Vue Router"),e(a)])]),q])}const E=o(l,[["render",R],["__file","vue-router.html.vue"]]);export{E as default};
