import{_ as n,W as a,X as s,a0 as i}from"./framework-4f54a744.js";const e="/docs/assets/image-20230718145118419-be063335.png",t={},l=i(`<h1 id="css" tabindex="-1"><a class="header-anchor" href="#css" aria-hidden="true">#</a> CSS</h1><h2 id="_1、flex布局的一些属性" tabindex="-1"><a class="header-anchor" href="#_1、flex布局的一些属性" aria-hidden="true">#</a> 1、flex布局的一些属性</h2><p>这些东西虽然很基础，但是时间长了，被问时一紧张还是容易说不上来，虽然写的时候可能很流畅，因此还是记录下，常温习比较好。</p><div class="language-less line-numbers-mode" data-ext="less"><pre class="language-less"><code><span class="token selector">.father</span> <span class="token punctuation">{</span>
  <span class="token comment">// 设定盒子为弹性盒子</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token comment">// 设定主轴方向</span>
  <span class="token property">flex-direction</span><span class="token punctuation">:</span> row | row<span class="token operator">-</span>reverse | column | column<span class="token operator">-</span>reverse<span class="token punctuation">;</span>
  <span class="token comment">// 设定换行</span>
  <span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap | nowrap | wrap<span class="token operator">-</span>reverse<span class="token punctuation">;</span>
  <span class="token comment">// flex-direction 和 flex-wrap 的简写</span>
  <span class="token property">flex-flow</span><span class="token punctuation">:</span> row nowrap<span class="token punctuation">;</span>
  <span class="token comment">// 设定主轴的对齐方式</span>
  <span class="token property">justify-content</span><span class="token punctuation">:</span> flex<span class="token operator">-</span>start | flex<span class="token operator">-</span>end | center | space<span class="token operator">-</span>between | space<span class="token operator">-</span>around<span class="token punctuation">;</span>
  <span class="token comment">// 设定副轴的对齐方式，如主轴为 x，则副轴为 y</span>
  <span class="token property">align-items</span><span class="token punctuation">:</span> flex<span class="token operator">-</span>start | flex<span class="token operator">-</span>end | center | baseline | stretch<span class="token punctuation">;</span>
  <span class="token comment">// 定义多根轴线的对齐方式，如果只有一个轴线，不起作用</span>
  <span class="token property">align-content</span><span class="token punctuation">:</span> flex<span class="token operator">-</span>start | flex<span class="token operator">-</span>end | center | space<span class="token operator">-</span>between | space<span class="token operator">-</span>around | strecth<span class="token punctuation">;</span>
  
  <span class="token selector">.son</span> <span class="token punctuation">{</span>
    <span class="token comment">// 定义排列顺序，数值越小越靠前，默认0</span>
    <span class="token property">order</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token comment">// 定义放大比例，默认为0</span>
    <span class="token property">flex-grow</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token comment">// 定义缩小比例，默认为1</span>
    <span class="token property">flex-shrink</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
    <span class="token comment">// 定义在分配多余空间前，这个元素占据的主轴空间，默认 auto</span>
    <span class="token property">flex-basis</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
    <span class="token comment">// flex-grow flex-shrink flex-basis 的简写，auto =&gt; 1 1 auto; none =&gt; 0 0 auto;</span>
    <span class="token property">flex</span><span class="token punctuation">:</span> 0 1 auto<span class="token punctuation">;</span>
    <span class="token comment">// 语序这个子元素有与其他子元素不同的对齐方式</span>
    <span class="token property">align-self</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2、水平垂直居中方式" tabindex="-1"><a class="header-anchor" href="#_2、水平垂直居中方式" aria-hidden="true">#</a> 2、水平垂直居中方式</h2><p>这个就不写代码了，比较简单，应该不会忘记：</p><ol><li>display: flex + justify-content: center + align-items: center</li><li>position: absolute + left + right + top + bottom + transform: translate()</li><li>position: absolute + left + right + top + bottom + margin: auto</li></ol><p>一般就这三种常用</p><h2 id="_3、position-的属性" tabindex="-1"><a class="header-anchor" href="#_3、position-的属性" aria-hidden="true">#</a> 3、position 的属性</h2><p>这个虽然之前用得多，但是有些还是容易一时脑抽就忘记，真见鬼了😒，看来还是记得不牢。</p><ol><li>static：默认值，表示没有定位。</li><li>initial：设置该属性为默认值。</li><li>relative：相对定位，相对于自身定位，不脱离文档流，会占据原先的位置。</li><li>absolute：绝对定位，相对于第一个有 relative 的父元素进行定位，脱离文档流，不会占据原先的位置，必须有left、right、top、bottom。</li><li>fixed：固定定位，相对于浏览器窗口进行定位。</li><li>sticky：粘性定位。</li><li>inherit：规定应该从父元素继承 position 的值。</li></ol><h2 id="_4、px-和-em-的区别" tabindex="-1"><a class="header-anchor" href="#_4、px-和-em-的区别" aria-hidden="true">#</a> 4、px 和 em 的区别</h2><p>px：像素，是相对于屏幕分辨率的，是绝对单位，不同设备上的像素所代表的长度是不同的。</p><p>em：是一个相对单位，它的大小相对于父元素计算，比如父元素为 10px，则子元素的 1em = 10px。</p><h2 id="_5、bfc-及其应用" tabindex="-1"><a class="header-anchor" href="#_5、bfc-及其应用" aria-hidden="true">#</a> 5、BFC 及其应用</h2><p>BFC：指的是一个独立的布局环境，其中的元素布局与外部互不影响</p><p>设置 BFC：</p><ul><li>设置浮动：float</li><li>overflow 设置为 auto、scroll、hidden</li><li>position 设置为 absolute、fixed</li><li>display 设置为 inline-block、table-cell、...</li></ul><p>应用：</p><ul><li>解决浮动元素让父元素高度塌陷问题</li><li>解决非浮动元素被浮动元素覆盖问题</li><li>解决外边距垂直方向重合问题</li></ul><h2 id="_6、用-css-或-js-实现文本溢出省略效果-考虑兼容性" tabindex="-1"><a class="header-anchor" href="#_6、用-css-或-js-实现文本溢出省略效果-考虑兼容性" aria-hidden="true">#</a> 6、用 css 或 js 实现文本溢出省略效果，考虑兼容性</h2><p>css：</p><ul><li><p>单行：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
<span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span>
<span class="token property">white-space</span><span class="token punctuation">:</span> nowarp<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>多行：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">display</span><span class="token punctuation">:</span> -webkit-box<span class="token punctuation">;</span>
<span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span> vertical<span class="token punctuation">;</span>
<span class="token property">-webkit-line-clamp</span><span class="token punctuation">:</span> 3<span class="token punctuation">;</span> // 行数
<span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>兼容性：设置省略的部分内容最大高度，并将超出部分隐藏，然后使用伪元素设置覆盖最后的文本，并填充伪元素内容为&quot;...&quot;。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">p</span> <span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
  <span class="token property">line-height</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
  <span class="token property">max-height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>
  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">p::after</span> <span class="token punctuation">{</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&quot;...&quot;</span><span class="token punctuation">;</span>
  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
  <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">padding-left</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-webkit-linear-gradient</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> transparend<span class="token punctuation">,</span> #fff 55%<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-o-linear-gradient</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span> transparent<span class="token punctuation">,</span> #fff 55%<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-moz-linear-gradient</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span> transparent<span class="token punctuation">,</span> #fff 55%<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right<span class="token punctuation">,</span> transparent<span class="token punctuation">,</span> #fff 55%<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>js：</p><ol><li>使用 split + 正则切割文本长度，并在截取的部分后面添加&quot;...&quot;。</li><li>判断 scrollHeight 和 clientHeight，超过部分就从截取的文本中 pop 一个出来。</li></ol><h2 id="_7、居中为什么要使用-transform-而不是-margin-left-top" tabindex="-1"><a class="header-anchor" href="#_7、居中为什么要使用-transform-而不是-margin-left-top" aria-hidden="true">#</a> 7、居中为什么要使用 transform 而不是 margin-left/top</h2><p>transform 属性值的变化不会导致重绘，而 margin 属性值的变化会导致重排，而重排会导致重绘。</p><h2 id="_8、介绍粘性布局-sticky" tabindex="-1"><a class="header-anchor" href="#_8、介绍粘性布局-sticky" aria-hidden="true">#</a> 8、介绍粘性布局（sticky）</h2><p>通过设置 position: sticky 后即可将元素设置为粘性定位。它不会受到定位（top、left）影响，当这个元素的位置要移出便宜范围时，定位又会变成 fixed，根据设置的 left、top 等属性成固定位置的效果。</p><h2 id="_9、transition-和-animation-的属性分别有哪些" tabindex="-1"><a class="header-anchor" href="#_9、transition-和-animation-的属性分别有哪些" aria-hidden="true">#</a> 9、transition 和 animation 的属性分别有哪些</h2><p>transition：</p><ul><li>transition-property：设置要过渡的属性</li><li>transition-duration：设置过渡时间</li><li>transition-timing-function：设置过渡曲线</li><li>transition-delay：设置延迟时间</li></ul><p>animation：</p><ul><li>animation-name：设置动画名称（使用哪个关键帧@keyframes）</li><li>animation-duration：设置动画完成所需时间</li><li>animation-timing-function：设置动画曲线</li><li>animation-delay：设置延迟时间</li><li>animation-iteration-count：设置动画执行次数</li><li>animation-direction：设置是否反向播放动画</li><li>animation-fill-mode：设置动画不播放时，元素的样式</li><li>animation-play-state：设置动画运行或停止</li></ul><h2 id="_10、png8、png24、png32的区别-png压缩原理" tabindex="-1"><a class="header-anchor" href="#_10、png8、png24、png32的区别-png压缩原理" aria-hidden="true">#</a> 10、png8、png24、png32的区别，png压缩原理</h2><ol><li>png8：8指的是8bits，即使用2^8大小来存储一张图片的颜色种类。一张图片如果颜色种类少，则可以将其设置为png8。</li><li>png24：24 = 3 * 8，即表示用r、g、b三个通道分别使用一个8bits来存储，它能展示的色彩更加丰富，但是占用空间也更大。</li><li>png32：32 = 4 * 8，它表示 rgba，每个通道用一个8bits存储，多了一个透明通道，展示颜色最多，占用空间也最大。</li></ol><p>png压缩：</p><ol><li>预解析：对png图片进行一个预处理，方便后续压缩</li><li>压缩：执行Deflate压缩，这个算法结合了LZ77算法和Huffman算法对图片进行编码</li></ol><h2 id="_11、清除浮动" tabindex="-1"><a class="header-anchor" href="#_11、清除浮动" aria-hidden="true">#</a> 11、清除浮动</h2><ul><li><p>触发BFC</p></li><li><p>clear 清除浮动（添加空 div 法），在浮动元素下方添加空 div，并给该元素赋予以下样式：<code>{clear: both;height: 0;overflow: hidden;}</code></p></li><li><p>使用 ::after 伪元素清除浮动（主流方法，推荐使用）</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">ul::after</span> <span class="token punctuation">{</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_12、盒模型" tabindex="-1"><a class="header-anchor" href="#_12、盒模型" aria-hidden="true">#</a> 12、盒模型</h2><p>css盒子模型分为标准盒子模型和IE盒子模型。</p><p>W3C 盒模型（标准盒子模型）：宽高不包含内边距和边框。</p><p>IE 盒模型：宽高包含内边距和边框。</p><p>通过 box-sizing: border-box 设置为 IE 盒模型，content-box 设置为标准盒子模型。</p><h2 id="_13、重绘和重排" tabindex="-1"><a class="header-anchor" href="#_13、重绘和重排" aria-hidden="true">#</a> 13、重绘和重排</h2><p>重绘：元素的某些几何属性或样式发生改变，如颜色等，屏幕上的部分内容需要更新，表现为某些元素外观被改变。</p><p>重排：渲染树需要重新分析并且节点尺寸需要重新计算，表现为重新生成布局或者重新排列元素。</p><p>重绘不一定重排，重排必定重绘。</p><h2 id="_14、优化图片" tabindex="-1"><a class="header-anchor" href="#_14、优化图片" aria-hidden="true">#</a> 14、优化图片</h2><ol><li>某些装饰类的图片，可以尽量使用 css 代替</li><li>对于移动端而言，因为屏幕本身就不大，因此可以根据屏幕尺寸去加载（cdn加载）不同裁切的图片，避免使用原图浪费带宽。</li><li>小图可以将其转换为 base64 格式。</li><li>图标可以使用雪碧图。</li><li>选择合适的图片格式： <ul><li>WebP格式：更好的图像数据压缩算法，能带来更小的图片体积，并且肉眼无法识别图像质量，就是兼容性差</li><li>png：小图片如图标，可以使用，当然也可以使用 svg 代替</li><li>jpge：照片使用 jpge</li></ul></li></ol><h2 id="_15、渐进增强、优雅降级" tabindex="-1"><a class="header-anchor" href="#_15、渐进增强、优雅降级" aria-hidden="true">#</a> 15、渐进增强、优雅降级</h2><p>渐进增强：针对低版本浏览器构建页面，先保证基本功能，然后针对高版本浏览器添加功能</p><p>优雅降级：一开始就构建完整的功能，然后针对低版本浏览器进行兼容</p><h2 id="_16、css3-新增内容" tabindex="-1"><a class="header-anchor" href="#_16、css3-新增内容" aria-hidden="true">#</a> 16、css3 新增内容</h2><p>这里列出一些关键内容：</p><ol><li>选择器</li><li>盒子模型属性：border-radius、box-shadow、border-image</li><li>背景：background-size、background-origin、background-clip</li><li>文本效果：text-shadow、word-wrap</li><li>颜色：新增 rgba、hsla 模式</li><li>渐变：线性渐变、径向渐变</li><li>字体：@font-face</li><li>2d/3d转换：transform、transform-origin</li><li>过渡和动画：transition、animation、@keyframes</li><li>多列布局</li><li>媒体查询</li></ol><h2 id="_17、隐藏元素方法" tabindex="-1"><a class="header-anchor" href="#_17、隐藏元素方法" aria-hidden="true">#</a> 17、隐藏元素方法</h2><ol><li>display: none</li><li>opacity: 0</li><li>visibility: hidden</li><li>移出页面视口</li></ol><blockquote><p><code>display:none</code>和<code>visibility:hidden</code>的区别：</p><ol><li><code>display:none</code>不占位置；<code>visibility:hidden</code>会占用原先的位置。</li><li><code>display:none</code>会产生一次回流（重排），然后页面会重绘；<code>visibility:hidden</code>不会造成回流，会直接造成重绘。</li></ol></blockquote><h2 id="_18、重绘和重排的区别" tabindex="-1"><a class="header-anchor" href="#_18、重绘和重排的区别" aria-hidden="true">#</a> 18、重绘和重排的区别</h2><ul><li>重绘（回流）：布局引擎会根据所有的样式计算出盒模型在页面上的位置和大小。对DOM的样式进行修改，如color、background-color，浏览器不需要重新计算几何属性的时候，直接绘制该元素的新样式，这就是重绘。</li><li>重排：计算好盒模型的位置、大小、和其他一些属性后，浏览器就会根据每个盒模型的特性进行绘制。对DOM的大小、位置进行修改后，浏览器需要重新计算元素的几何属性，就叫重排。</li></ul><p><img src="`+e+'" alt="image-20230718145118419"></p><p>上图就是DOM渲染的一个流程，从上我们可以看到，重绘不一定重排，重排一定重绘。</p><blockquote><p>触发回流：删除、添加DOM元素；修改元素位置、大小；内容发生改变</p></blockquote><h2 id="_19、css那些属性可以继承" tabindex="-1"><a class="header-anchor" href="#_19、css那些属性可以继承" aria-hidden="true">#</a> 19、css那些属性可以继承</h2><ol><li>字体的一些属性：font-size、font-weight、color、line-height</li><li>文本的一些属性：lint-height、color等</li><li>元素可见性：visibility: hidden</li><li>表格布局的属性：border-spacing</li><li>列表属性：list-style</li><li>页面样式属性：page</li><li>声音的样式属性</li></ol><h2 id="_20、line-height和height的区别" tabindex="-1"><a class="header-anchor" href="#_20、line-height和height的区别" aria-hidden="true">#</a> 20、line-height和height的区别</h2><ul><li>line-height：表示的是盒子中每一行文本的高度</li><li>height：表示的是盒子的高度</li></ul><h2 id="_21、css选择器" tabindex="-1"><a class="header-anchor" href="#_21、css选择器" aria-hidden="true">#</a> 21、css选择器</h2><ol><li>通配符选择器</li><li>id选择器</li><li>类选择器</li><li>标签选择器</li><li>相邻选择器（+）</li><li>后代选择器（ul li）</li><li>子元素选择器 （&gt;）</li><li>属性选择器</li><li>...</li></ol><h2 id="_22、opacity和rgba的区别" tabindex="-1"><a class="header-anchor" href="#_22、opacity和rgba的区别" aria-hidden="true">#</a> 22、opacity和rgba的区别</h2><ol><li>opacity的取值范围为0~1；rgba(红色, 绿色, 蓝色, 透明度)，色值的取值为0~255或者百分比，a的取值范围为0~1。</li><li>opacity会造成整个盒子透明，包括其中的内容；rgba只会造成该元素的颜色的透明，不会造成内容的透明。</li></ol>',73),p=[l];function o(c,r){return a(),s("div",null,p)}const u=n(t,[["render",o],["__file","css.html.vue"]]);export{u as default};
