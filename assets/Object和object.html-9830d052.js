import{_ as s,W as n,X as a,a0 as e}from"./framework-4f54a744.js";const o="/docs/assets/image-20230301171413459-c9d11f28.png",t="/docs/assets/image-20230301172310269-29efcb3f.png",p={},c=e('<h1 id="object-和-object-和" tabindex="-1"><a class="header-anchor" href="#object-和-object-和" aria-hidden="true">#</a> Object 和 object 和 {}</h1><h2 id="object" tabindex="-1"><a class="header-anchor" href="#object" aria-hidden="true">#</a> Object</h2><img src="'+o+'" alt="image-20230301171413459"><p><code>Object</code>类型是所有<code>Object</code>类的实例的类型，由以下两个接口来定义：</p><ol><li><p><code>Object</code>接口定义了<code>Object.prototype</code>原型对象上的属性。</p></li><li><p><code>ObjectConstructor</code>接口定义了<code>Object</code>类的属性，如<code>Object.create()</code>。</p><img src="'+t+`" alt="image-20230301172310269"></li></ol><blockquote><p>这个类型跟原型链有关，原型链的顶层就是<code>Object</code>，所以值类型和引用类型最终都指向<code>Object</code>。</p></blockquote><h2 id="object-1" tabindex="-1"><a class="header-anchor" href="#object-1" aria-hidden="true">#</a> object</h2><p><code>object</code>代表所有非值类型的类型，如<code>Array | Set | Map | Function</code>等，常用于泛型约束。</p><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a> {}</h2><p>这是一个看起来很别扭的东西，我们可以将其理解为<code>new Object</code>，即和<code>Object</code>基本一样，它包含所有类型。</p><blockquote><p>示例：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> a<span class="token operator">:</span> Object <span class="token operator">=</span> <span class="token number">123</span> <span class="token comment">// 不报错</span>
<span class="token keyword">let</span> a1<span class="token operator">:</span> Object <span class="token operator">=</span> <span class="token string">&quot;123&quot;</span> <span class="token comment">// 不报错</span>
<span class="token keyword">let</span> a2<span class="token operator">:</span> Object <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">// 不报错</span>
<span class="token keyword">let</span> a3<span class="token operator">:</span> Object <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 不报错</span>

<span class="token keyword">let</span> a4<span class="token operator">:</span> object <span class="token operator">=</span> <span class="token number">123</span> <span class="token comment">// 报错</span>
<span class="token keyword">let</span> a5<span class="token operator">:</span> object <span class="token operator">=</span> <span class="token string">&quot;123&quot;</span> <span class="token comment">// 报错</span>
<span class="token keyword">let</span> a6<span class="token operator">:</span> object <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">// 报错</span>
<span class="token keyword">let</span> a7<span class="token operator">:</span> Object <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 不报错</span>

<span class="token keyword">let</span> a8<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token number">123</span> <span class="token comment">// 不报错</span>
<span class="token keyword">let</span> a9<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token string">&quot;123&quot;</span> <span class="token comment">// 不报错</span>
<span class="token keyword">let</span> a10<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">// 不报错</span>
<span class="token keyword">let</span> a11<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 不报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注</strong>：当我们使用<code>{}</code>时，无法对其进行修改，如：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> a<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;zhangsan&quot;</span> <span class="token punctuation">}</span>
a<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;lisi&quot;</span> <span class="token comment">// 报错</span>
a<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span> <span class="token comment">// 报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以<code>{}</code>类型还是少用的好。</p></blockquote>`,11),l=[c];function r(i,d){return n(),a("div",null,l)}const u=s(p,[["render",r],["__file","Object和object.html.vue"]]);export{u as default};
