import{_ as s,W as n,X as a,a0 as e}from"./framework-4f54a744.js";const p="/docs/assets/image-20230307141258876-8099d19e.png",t="/docs/assets/image-20230307141443068-c2805d27.png",o="/docs/assets/image-20230307141522960-39227a10.png",c={},i=e(`<h1 id="声明文件-d-ts" tabindex="-1"><a class="header-anchor" href="#声明文件-d-ts" aria-hidden="true">#</a> 声明文件 d.ts</h1><h2 id="声明文件-declare" tabindex="-1"><a class="header-anchor" href="#声明文件-declare" aria-hidden="true">#</a> 声明文件 declare</h2><p>当使用第三方库时，我们需要引用它的声明文件，这样才能获得对应的代码补全、接口提示等功能。如下这些全局声明：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">var</span> 声明全局变量
<span class="token keyword">declare</span> <span class="token keyword">function</span> 声明全局方法
<span class="token keyword">declare</span> <span class="token keyword">class</span> <span class="token class-name">声明全局类</span>
<span class="token keyword">declare</span> <span class="token keyword">enum</span> 声明全局枚举类型
<span class="token keyword">declare</span> <span class="token keyword">namespace</span> <span class="token function">声明</span><span class="token punctuation">(</span>含有子属性的<span class="token punctuation">)</span>全局对象
<span class="token keyword">interface</span> <span class="token class-name">和</span> <span class="token keyword">type</span> <span class="token class-name">声明全局类型</span>
<span class="token comment">/// &lt;reference /&gt; 三斜线指令</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>一个 axios 和 express 的例子</summary><ol><li><p>我们先安装<code>express</code>和<code>axios</code></p></li><li><p>使用 import 导入，会发现有如下报错</p><div style="text-align:center;"><p><img src="`+p+'" alt="image-20230307141258876"></p></div><p>这里它提示没有找到<code>express</code>的声明文件，需要安装，那我们先看看<code>node_modules</code>中<code>axios</code>和<code>express</code>文件的区别：</p><div style="text-align:center;"><p><img src="'+t+'" alt="image-20230307141443068"></p><p><img src="'+o+`" alt="image-20230307141522960"></p></div><p>可以看到，<code>axios</code>有<code>index.d.ts</code>文件，而<code>express</code>没有，这就会导致我们使用<code>axios</code>时有代码提示等功能，而<code>express</code>没有，且导入它还会提示我们需要下载声明文件。</p><p>以上，我们就知道了<code>.d.ts</code>文件的作用。</p></li></ol></details><h2 id="自己书写声明文件" tabindex="-1"><a class="header-anchor" href="#自己书写声明文件" aria-hidden="true">#</a> 自己书写声明文件</h2><p>有时候有些第三方库就是没有声明文件，且使用<code>npm</code>额外下载时也发现没有，这时候我们就可以自己简单书写这个第三方库的声明文件，以便后续使用。如我们这里简单写一个<code>express</code>的声明文件(<strong>社区里面已经有<code>express</code>的声明文件，下载使用即可，这里只是为了做演示</strong>)：</p><ol><li><p>在<code>src</code>下创建一个文件夹<code>typings</code></p></li><li><p>在这个文件夹中给要编写声明文件的第三方库创建声明文件，如这里给<code>express</code>编写，则文件名为<code>express.d.ts</code>：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">/* express.d.ts */</span>
<span class="token comment">// 这里只是做示例，并不代表只能这么写</span>

<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&quot;express&quot;</span> <span class="token punctuation">{</span>
	<span class="token keyword">interface</span> <span class="token class-name">Router</span> <span class="token punctuation">{</span>
		<span class="token function">get</span><span class="token punctuation">(</span>path<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token function-variable function">cb</span><span class="token operator">:</span> <span class="token punctuation">(</span>req<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> res<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
        <span class="token comment">// ... 其他方法如 post 等</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">interface</span> <span class="token class-name">App</span> <span class="token punctuation">{</span>
		<span class="token function">use</span><span class="token punctuation">(</span>path<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> router<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
		<span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> cb<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
        <span class="token comment">// ... 其他方法</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">interface</span> <span class="token class-name">Express</span> <span class="token punctuation">{</span>
		<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> App
		<span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Router
	<span class="token punctuation">}</span>

	<span class="token keyword">const</span> express<span class="token operator">:</span> Express
	<span class="token keyword">export</span> <span class="token keyword">default</span> express
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>完成以上两步后，我们就会发现<code>import express from &#39;express&#39;</code>的报错消失了</p></li></ol>`,8),l=[i];function d(r,u){return n(),a("div",null,l)}const m=s(c,[["render",d],["__file","声明文件d.ts.html.vue"]]);export{m as default};
