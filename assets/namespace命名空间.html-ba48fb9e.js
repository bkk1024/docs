import{_ as n,W as s,X as a,a0 as e}from"./framework-4f54a744.js";const t="/docs/assets/image-20230306184258339-36976d7e.png",p={},o=e(`<h1 id="namespace-命名空间" tabindex="-1"><a class="header-anchor" href="#namespace-命名空间" aria-hidden="true">#</a> namespace 命名空间</h1><p>我们在编写项目时，无法避免全局变量造成的污染，ts 为了避免这个问题，提供了<code>namespace</code>：</p><ul><li>内部模块，主要用于组织代码，避免命名冲突</li><li><strong>命名空间内的类默认私有</strong></li><li>通过<code>export</code>暴露</li><li>通过<code>namespace</code>关键字定义</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>ts 与 es2015 一样，任何包含顶级<code>import</code>和<code>export</code>的文件都将被当成一个模块。反之，如果一个文件没有顶级<code>import</code>或者<code>export</code>声明，则它的内容被视为全局可见的（对模块也是可见的）。</p></div><details class="hint-container details"><summary>例子</summary><p><code>namespace</code>中通过<code>export</code>将暴露内容，如果不使用<code>export</code>，则无法读取其值。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">namespace</span> nameA <span class="token punctuation">{</span>
	<span class="token keyword">export</span> <span class="token keyword">const</span> Time<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1000</span>
	<span class="token keyword">export</span> <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> arg
	<span class="token punctuation">}</span>
	<span class="token function">fn</span><span class="token punctuation">(</span>Time<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">namespace</span> nameB <span class="token punctuation">{</span>
	<span class="token keyword">const</span> Time<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1000</span>
	<span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> arg
	<span class="token punctuation">}</span>
	<span class="token function">fn</span><span class="token punctuation">(</span>Time<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nameA<span class="token punctuation">.</span>Time<span class="token punctuation">)</span> <span class="token comment">// 1000</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nameA<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 2000</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nameB<span class="token punctuation">.</span>Time<span class="token punctuation">)</span> <span class="token comment">// 类型“typeof nameB”上不存在属性“Time”。</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nameB<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 类型“typeof nameB”上不存在属性“fn”。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="嵌套命名空间" tabindex="-1"><a class="header-anchor" href="#嵌套命名空间" aria-hidden="true">#</a> 嵌套命名空间</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">namespace</span> a <span class="token punctuation">{</span>
	<span class="token keyword">export</span> <span class="token keyword">namespace</span> b <span class="token punctuation">{</span>
		<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Vue</span> <span class="token punctuation">{</span>
			parameters<span class="token operator">:</span> <span class="token builtin">string</span>
			<span class="token function">constructor</span><span class="token punctuation">(</span>parameters<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">this</span><span class="token punctuation">.</span>parameters <span class="token operator">=</span> parameters
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> v <span class="token operator">=</span> a<span class="token punctuation">.</span>b<span class="token punctuation">.</span>Vue

<span class="token keyword">new</span> <span class="token class-name">v</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="抽离命名空间" tabindex="-1"><a class="header-anchor" href="#抽离命名空间" aria-hidden="true">#</a> 抽离命名空间</h2><ul><li><p><code>a.ts</code>：导出命名空间</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">namespace</span> <span class="token constant">V</span> <span class="token punctuation">{</span>
	<span class="token keyword">export</span> <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>b.ts</code>：导入命名</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">V</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../observer/index&#39;</span>
 
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">V</span><span class="token punctuation">)</span> <span class="token comment">// { a: 1 }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="简化命名空间" tabindex="-1"><a class="header-anchor" href="#简化命名空间" aria-hidden="true">#</a> 简化命名空间</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">namespace</span> <span class="token constant">A</span> <span class="token punctuation">{</span>
	<span class="token keyword">export</span> <span class="token keyword">namespace</span> <span class="token constant">B</span> <span class="token punctuation">{</span>
		<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">C</span> <span class="token operator">=</span> <span class="token number">1</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">import</span> <span class="token constant">X</span> <span class="token operator">=</span> <span class="token constant">A</span><span class="token punctuation">.</span><span class="token constant">B</span><span class="token punctuation">.</span><span class="token constant">C</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">X</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="合并命名空间" tabindex="-1"><a class="header-anchor" href="#合并命名空间" aria-hidden="true">#</a> 合并命名空间</h2><p>重名的命名空间会合并为一个命名空间。如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">namespace</span> a <span class="token punctuation">{</span>
	<span class="token keyword">export</span> <span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">1</span>
<span class="token punctuation">}</span>

<span class="token keyword">namespace</span> a <span class="token punctuation">{</span>
	<span class="token keyword">export</span> <span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token number">2</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div style="text-align:center;"><p><img src="`+t+'" alt="image-20230306184258339"></p></div>',15),c=[o];function l(i,r){return s(),a("div",null,c)}const d=n(p,[["render",l],["__file","namespace命名空间.html.vue"]]);export{d as default};
