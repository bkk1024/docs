import{_ as e,W as o,X as c,Y as n,Z as s,$ as t,a0 as p,C as i}from"./framework-4f54a744.js";const l={},u=n("h1",{id:"一个使用-nestjs-编写的简单crud案例",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#一个使用-nestjs-编写的简单crud案例","aria-hidden":"true"},"#"),s(" 一个使用 NestJs 编写的简单CRUD案例")],-1),r=n("h2",{id:"前言",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),s(" 前言")],-1),k={href:"https://www.bilibili.com/video/BV1U441117xK/?spm_id_from=333.999.0.0&vd_source=16ba8f2131220773e361fb00f3cb12fb",target:"_blank",rel:"noopener noreferrer"},d=p(`<h2 id="创建项目" tabindex="-1"><a class="header-anchor" href="#创建项目" aria-hidden="true">#</a> 创建项目</h2><p>首先，保证电脑中已安装完成 NestJs-CLI、MongoDB、NodeJS等。</p><p>输入以下命令使用 Nest 脚手架创建项目：</p><p><code>nest new nest-blog-api</code></p><h2 id="创建一个-posts-模块" tabindex="-1"><a class="header-anchor" href="#创建一个-posts-模块" aria-hidden="true">#</a> 创建一个 posts 模块</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>nest g mo posts // 创建 module
nest g co posts // 创建 controller
nest g s posts // 创建 service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="项目代码" tabindex="-1"><a class="header-anchor" href="#项目代码" aria-hidden="true">#</a> 项目代码</h2>`,7),m={href:"https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE%E5%AF%B9%E8%B1%A1/3351868?fromModule=lemma_inlink",target:"_blank",rel:"noopener noreferrer"},v=p(`<ol><li><p>在 posts 文件夹下创建 dto 文件夹</p></li><li><p>创建 <code>create-posts-dto.ts</code> 文件：用于定义新创建的文章的数据结构。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">/* create-posts-dto.ts */</span>

<span class="token comment">// @nestjs/swagger 这个包要和 swagger-ui-express 这个包一起搭配使用。这两个包的作用是自动根据编写的接口生成 swagger 文档，下面会详细说明</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ApiProperty <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/swagger&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// 要使用 IsNotEmpty ，需要安装两个包：npm i --save class-validator class-transformer</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> IsNotEmpty <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;class-validator&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">CreatePostsDto</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">ApiProperty</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> description<span class="token operator">:</span> <span class="token string">&#39;帖子标题&#39;</span><span class="token punctuation">,</span> example<span class="token operator">:</span> <span class="token string">&#39;帖子标题，这是默认值&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 描述参数：description是对这个参数的描述，example是这个参数的默认值</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">IsNotEmpty</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&#39;标题不能为空&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 这个装饰器用来限定 title 这个字段不能为空，当为空时，使用这个dto的接口会报错，并提示我们给这个装饰器传递的 message。同时需要在 main.ts 文件中使用全局管道 ValidationPipe。</span>
  title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">ApiProperty</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> description<span class="token operator">:</span> <span class="token string">&#39;帖子内容&#39;</span><span class="token punctuation">,</span> example<span class="token operator">:</span> <span class="token string">&#39;帖子内容，这是默认值&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 描述参数</span>
  content<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>根据接口自动生成 swagger 文档</p><ul><li><p>首先要下载两个包：<code> npm i --save @nestjs/swagger swagger-ui-express</code></p></li><li><p>在 <code>main.ts</code> 文件中导入并使用：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">/* main.ts */</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> NestFactory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/core&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> AppModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./app.module&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> SwaggerModule<span class="token punctuation">,</span> DocumentBuilder <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/swagger&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ValidationPipe <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">await</span> NestFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>AppModule<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 使用全局管道</span>
  app<span class="token punctuation">.</span><span class="token function">useGlobalPipes</span><span class="token punctuation">(</span>
    <span class="token keyword">new</span> <span class="token class-name">ValidationPipe</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token comment">// whitelist: true, // 自动删除请求接口传入进来的不需要的参数</span>
      <span class="token comment">// forbidNonWhitelisted: true, // 当请求接口传入进来不需要的参数时，将抛出错误</span>
      <span class="token comment">// transform: true, // 对参数执行类型转换</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DocumentBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">&#39;NestJs 博客API&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 标题</span>
    <span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span><span class="token string">&#39;我的第一个NestJs应用&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 描述</span>
    <span class="token punctuation">.</span><span class="token function">setVersion</span><span class="token punctuation">(</span><span class="token string">&#39;1.0&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 版本</span>
    <span class="token comment">// .addTag(&#39;posts&#39;) // 添加标签</span>
    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> document <span class="token operator">=</span> SwaggerModule<span class="token punctuation">.</span><span class="token function">createDocument</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 三个参数：</span>
  <span class="token comment">// 第一个参数：将接口文档挂载到哪个路由路径下</span>
  SwaggerModule<span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token string">&#39;api-docs&#39;</span><span class="token punctuation">,</span> app<span class="token punctuation">,</span> document<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">await</span> app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>连接 MongoDB，在 <code>app.module.ts</code> 文件中使用 <code>@nestjs/mongoose</code> 包中的方法进行连接，首先要先 <code>npm i --save @nestjs/mongoose mongoose </code>：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">/* app.module.ts */</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> Module <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> AppController <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./app.controller&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> AppService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./app.service&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// PostsModule 是创建的存入 MongoDB 数据库中的数据的模型，这里我们在 posts.module.ts 中进行定义</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> PostsModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./posts/posts.module&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> MongooseModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/mongoose&#39;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  imports<span class="token operator">:</span> <span class="token punctuation">[</span>
    PostsModule<span class="token punctuation">,</span>
    <span class="token comment">// 连接 MongoDB 数据库</span>
    MongooseModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span><span class="token string">&#39;mongodb://localhost:27017/nest-blog-api&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  controllers<span class="token operator">:</span> <span class="token punctuation">[</span>AppController<span class="token punctuation">]</span><span class="token punctuation">,</span>
  providers<span class="token operator">:</span> <span class="token punctuation">[</span>AppService<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>新建 <code>posts.model.ts</code> 文件，并定义模型：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">/* posts.model.ts */</span>
<span class="token comment">// 这个文件是定义 Posts 模型的结构</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> Prop<span class="token punctuation">,</span> Schema<span class="token punctuation">,</span> SchemaFactory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/mongoose&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Document <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;mongoose&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">PostsDocument</span> <span class="token operator">=</span> Posts <span class="token operator">&amp;</span> Document<span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Schema</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Posts</span> <span class="token keyword">extends</span> <span class="token class-name">Document</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Prop</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 定义模型的参数</span>
  title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Prop</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  content<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> PostsSchema <span class="token operator">=</span> SchemaFactory<span class="token punctuation">.</span><span class="token function">createForClass</span><span class="token punctuation">(</span>Posts<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在 <code>posts.module.ts</code> 文件中注册 posts 模型，以便在 service 中操作数据库时进行使用：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">/* posts.module.ts */</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> Module <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> PostsController <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./posts.controller&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> MongooseModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/mongoose&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Posts<span class="token punctuation">,</span> PostsSchema <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./posts.model&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> PostsService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./posts.service&#39;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  imports<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// 注册 posts 模型，这里可以传入多个模型</span>
    MongooseModule<span class="token punctuation">.</span><span class="token function">forFeature</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span> name<span class="token operator">:</span> Posts<span class="token punctuation">.</span>name<span class="token punctuation">,</span> schema<span class="token operator">:</span> PostsSchema <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  controllers<span class="token operator">:</span> <span class="token punctuation">[</span>PostsController<span class="token punctuation">]</span><span class="token punctuation">,</span>
  providers<span class="token operator">:</span> <span class="token punctuation">[</span>PostsService<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">PostsModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在 <code>posts.controller.ts</code> 中编写接口：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">/* posts.controller.ts */</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span>
  Body<span class="token punctuation">,</span>
  Controller<span class="token punctuation">,</span>
  Delete<span class="token punctuation">,</span>
  Get<span class="token punctuation">,</span>
  Param<span class="token punctuation">,</span>
  Post<span class="token punctuation">,</span>
  Put<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ApiOperation<span class="token punctuation">,</span> ApiTags <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/swagger&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> PostsService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./posts.service&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> CreatePostsDto <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./dto/create-posts-dto&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// 这里导入了 UpdatePostsDto ，这是定义的更新文章时的数据结构，在下面会写</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> UpdatePostsDto <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./dto/update-posts.dto&#39;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Controller</span></span><span class="token punctuation">(</span><span class="token string">&#39;posts&#39;</span><span class="token punctuation">)</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">ApiTags</span></span><span class="token punctuation">(</span><span class="token string">&#39;帖子&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 设置这个路由在 API 文档中显示在哪个标签下</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">PostsController</span> <span class="token punctuation">{</span>
  <span class="token comment">// 注入 service</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">readonly</span> postsService<span class="token operator">:</span> PostsService<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Get</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">ApiOperation</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> summary<span class="token operator">:</span> <span class="token string">&#39;帖子列表&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 在接口文档中显示接口描述</span>
  <span class="token keyword">async</span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>postsService<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Get</span></span><span class="token punctuation">(</span><span class="token string">&#39;:pageIndex/:pageSize&#39;</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">ApiOperation</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> summary<span class="token operator">:</span> <span class="token string">&#39;分页获取帖子列表&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">async</span> <span class="token function">findByPage</span><span class="token punctuation">(</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Param</span></span><span class="token punctuation">(</span><span class="token string">&#39;pageIndex&#39;</span><span class="token punctuation">)</span> pageIndex<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Param</span></span><span class="token punctuation">(</span><span class="token string">&#39;pageSize&#39;</span><span class="token punctuation">)</span> pageSize<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>postsService<span class="token punctuation">.</span><span class="token function">findByPage</span><span class="token punctuation">(</span>
      <span class="token function">Number</span><span class="token punctuation">(</span>pageIndex<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">Number</span><span class="token punctuation">(</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Post</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">ApiOperation</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> summary<span class="token operator">:</span> <span class="token string">&#39;创建帖子&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token comment">// 使用 CreatePostsDto，给这个请求的 body 添加约束</span>
  <span class="token keyword">async</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Body</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> createPostsDto<span class="token operator">:</span> CreatePostsDto<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>postsService<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>createPostsDto<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Get</span></span><span class="token punctuation">(</span><span class="token string">&#39;:id&#39;</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">ApiOperation</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> summary<span class="token operator">:</span> <span class="token string">&#39;帖子详情&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">async</span> <span class="token function">detail</span><span class="token punctuation">(</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Param</span></span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span> id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>postsService<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Put</span></span><span class="token punctuation">(</span><span class="token string">&#39;:id&#39;</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">ApiOperation</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> summary<span class="token operator">:</span> <span class="token string">&#39;编辑帖子&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">async</span> <span class="token function">update</span><span class="token punctuation">(</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Param</span></span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span> id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Body</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> updatePostsDto<span class="token operator">:</span> UpdatePostsDto<span class="token punctuation">,</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>postsService<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> updatePostsDto<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Delete</span></span><span class="token punctuation">(</span><span class="token string">&#39;:id&#39;</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">ApiOperation</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> summary<span class="token operator">:</span> <span class="token string">&#39;删除帖子&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">async</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Param</span></span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span> id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>postsService<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在 <code>posts.service.ts</code> 文件中编写相关数据库操作：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">/* posts.service.ts */</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> Injectable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Model <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;mongoose&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> InjectModel <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/mongoose&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// 导入 posts 模型</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Posts<span class="token punctuation">,</span> PostsDocument <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./posts.model&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> CreatePostsDto <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./dto/create-posts-dto&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> UpdatePostsDto <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./dto/update-posts.dto&#39;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">PostsService</span> <span class="token punctuation">{</span>
  <span class="token comment">// 在构造函数中进行依赖注入，这里保证 postsModel 是私有且只读的，无法被修改。完成依赖注入后，即可在方法中使用 this.postsModel.XXX 去使用相关 MongoDB 方法去操作数据库</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">InjectModel</span></span><span class="token punctuation">(</span><span class="token string">&#39;Posts&#39;</span><span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token keyword">readonly</span> postsModel<span class="token operator">:</span> Model<span class="token operator">&lt;</span>PostsDocument<span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token comment">/* 获取全部文章的列表 */</span>
  <span class="token keyword">async</span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>postsModel<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token comment">/* 分页获取文章列表 */</span>
  <span class="token keyword">async</span> <span class="token function">findByPage</span><span class="token punctuation">(</span>pageIndex<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> pageSize<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>postsModel
      <span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span>pageSize<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pageIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// .limit(number) 限制查询多少条数据</span>
    <span class="token comment">// .skip(number) 跳过多少条数据</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/* 创建一篇文章 */</span>
  <span class="token keyword">async</span> <span class="token function">create</span><span class="token punctuation">(</span>createPostsDto<span class="token operator">:</span> CreatePostsDto<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>postsModel<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>createPostsDto<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      success<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      data<span class="token operator">:</span> createPostsDto<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/* 获取某篇文章详情 */</span>
  <span class="token keyword">async</span> <span class="token function">findOne</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>postsModel<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/* 编辑某篇文章 */</span>
  <span class="token keyword">async</span> <span class="token function">update</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> updatePostsDto<span class="token operator">:</span> UpdatePostsDto<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>postsModel<span class="token punctuation">.</span><span class="token function">findByIdAndUpdate</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> updatePostsDto<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      success<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      data<span class="token operator">:</span> updatePostsDto<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/* 删除某篇文章 */</span>
  <span class="token keyword">async</span> <span class="token function">remove</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>postsModel<span class="token punctuation">.</span><span class="token function">findByIdAndDelete</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      success<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>定义 <code>UpdatePostsDto</code> ，在 <code>update-posts-dto.ts</code> 文件中定义：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// import { ApiProperty } from &#39;@nestjs/swagger&#39;;</span>
<span class="token comment">// import { IsNotEmpty } from &#39;class-validator&#39;;</span>
<span class="token comment">// 更新帖子的数据结构：DTO</span>
<span class="token comment">// 可以看出，这里的数据结构跟 CreatePostsDto 一样，所以我们可以用下面这种写法来减少代码冗余</span>
<span class="token comment">// export class CreatePostsDto {</span>
<span class="token comment">//   @ApiProperty({ description: &#39;帖子标题&#39;, example: &#39;帖子标题，这是默认值&#39; }) // 描述参数：description是对这个参数的描述，example是这个参数的默认值</span>
<span class="token comment">//   @IsNotEmpty({ message: &#39;标题不能为空&#39; })</span>
<span class="token comment">//   title: string;</span>

<span class="token comment">//   @ApiProperty({ description: &#39;帖子内容&#39;, example: &#39;帖子内容，这是默认值&#39; }) // 描述参数</span>
<span class="token comment">//   content: string;</span>
<span class="token comment">// }</span>


<span class="token keyword">import</span> <span class="token punctuation">{</span> PartialType <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/swagger&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> CreatePostsDto <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./create-posts-dto&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UpdatePostsDto</span> <span class="token keyword">extends</span> <span class="token class-name">PartialType</span><span class="token punctuation">(</span>CreatePostsDto<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">/* 
    PartialType 返回我们传给它的类的类型，并将所有属性都设置为可选，这样我们就不用多写一些冗余的代码。
    PartialType 不仅标记所有字段都是可选的，而且它还继承了通过装饰器应用的所有验证规则，以及动态添加单个附加验证规则 @IsOptional() 到每个字段
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="文档引用" tabindex="-1"><a class="header-anchor" href="#文档引用" aria-hidden="true">#</a> 文档引用</h2>`,2),b={href:"https://docs.nestjs.cn/8/techniques?id=mongo",target:"_blank",rel:"noopener noreferrer"},y={href:"https://docs.nestjs.cn/8/techniques?id=%E6%A8%A1%E5%9E%8B%E6%B3%A8%E5%85%A5",target:"_blank",rel:"noopener noreferrer"},g={href:"https://docs.nestjs.cn/8/techniques?id=%E9%AA%8C%E8%AF%81",target:"_blank",rel:"noopener noreferrer"},w={href:"https://docs.nestjs.cn/8/recipes?id=swagger",target:"_blank",rel:"noopener noreferrer"};function f(h,P){const a=i("ExternalLinkIcon");return o(),c("div",null,[u,r,n("p",null,[s("本案例来源于 "),n("a",k,[s("B站全栈之巅"),t(a)]),s(" ，并针对 NestJs8.x版本做了部分修改。")]),d,n("p",null,[s("DTO：数据传输对象(Data Transfer Object)，是一种设计模式之间传输数据的软件应用系统。数据传输目标往往是"),n("a",m,[s("数据访问对象"),t(a)]),s("从数据库中检索数据。数据传输对象与数据交互对象或数据访问对象之间的差异是一个以不具有任何行为除了存储和检索的数据（访问和存取器）。")]),v,n("p",null,[n("a",b,[s("连接MongoDB"),t(a)])]),n("p",null,[n("a",y,[s("模型注入"),t(a)])]),n("p",null,[n("a",g,[s("字段验证 ValidationPipe()"),t(a)])]),n("p",null,[n("a",w,[s("自动生成 swagger 文档"),t(a)])])])}const D=e(l,[["render",f],["__file","nestjs博客接口案例.html.vue"]]);export{D as default};
