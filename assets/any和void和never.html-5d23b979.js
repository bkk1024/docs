import{_ as i,W as l,X as d,$ as r,a1 as a,a0 as e,C as u,Y as n,Z as s}from"./framework-4f54a744.js";const v="/docs/assets/image-20230306154755912-20093ea3.png",k="/docs/assets/image-20230306155220315-0d595423.png",m={},b=e('<h1 id="any-和-void-和-never" tabindex="-1"><a class="header-anchor" href="#any-和-void-和-never" aria-hidden="true">#</a> any 和 void 和 never</h1><h2 id="any" tabindex="-1"><a class="header-anchor" href="#any" aria-hidden="true">#</a> any</h2><p><code>any</code>表示可以是任何类型。</p><p>在一些情况下，当我们无法确定类型或者不需要确定类型时，就可以指定其为<code>any</code>类型。被指定为<code>any</code>类型的变量可以被赋值为任何类型。</p><p>未声明的变量虽然开始会被识别为<code>any</code>，但是当其被赋值后，ts 就会根据赋值的类型来标识这个变量的类型。如：</p>',5),y=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"let"),s(" value1 "),n("span",{class:"token comment"},"// 隐式的 any"),s(`

value1 `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"seven"'),s(`
`),n("span",{class:"token builtin"},"console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("value1 "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token comment"},"// error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type."),s(`

`),n("span",{class:"token keyword"},"let"),s(" value2"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"any"),s(),n("span",{class:"token comment"},"// 显式的 any"),s(`

value2 `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"seven"'),s(`
`),n("span",{class:"token builtin"},"console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("value2 "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// NaN"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),g=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"let"),s(` value

value `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"seven"'),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("value "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// NaN"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),h=e(`<div class="hint-container warning"><p class="hint-container-title">注意</p><p>当声明一个变量为<code>any</code>后，对它的任何操作，返回的内容的类型都是<code>any</code>，所以一旦使用了<code>any</code>后，可能会导致某一块代码变得难以维护。<strong>而就算使用了断言，也丧失了在静态类型检查阶段发现错误的可能。</strong></p></div><h2 id="void" tabindex="-1"><a class="header-anchor" href="#void" aria-hidden="true">#</a> void</h2><p><code>void</code>表示没有任何类型。</p><p>声明为<code>void</code>类型的变量，只能赋予<code>undefined</code>。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> value<span class="token operator">:</span> <span class="token keyword">void</span>
value <span class="token operator">=</span> <span class="token keyword">undefined</span>
value <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">// 报错</span>
value <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">// 报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>没有返回值的函数，其返回值类型为<code>void</code>。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;void&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div style="text-align:center;"><p><img src="`+v+`" alt="image-20230306154755912"></p></div><h2 id="never" tabindex="-1"><a class="header-anchor" href="#never" aria-hidden="true">#</a> never</h2><p><code>never</code>表示永远不会有值的一种类型。</p><p>上面的解释看起来很难理解，大概会觉得<code>void</code>不也是没有值的类型吗？</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>其实<code>void</code>类型的返回值为<code>undefined</code>，可以理解为没有返回值的函数实际上是<code>return undefined</code>。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;void&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div style="text-align:center;"><p><img src="`+k+`" alt="image-20230306155220315"></p></div></div><p>never类型是那些总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型。简单理解就是返回<code>never</code>的函数必须存在无法到达的重点，如直接抛出错误或者在函数中有一个死循环等。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 因为总是抛出异常，所以 error 将不会有返回值</span>
<span class="token keyword">function</span> <span class="token function">error</span><span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">never</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 因为存在死循环，所以 infiniteLoop 将不会有返回值</span>
<span class="token keyword">function</span> <span class="token function">infiniteLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">never</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>never 的应用场景</summary><p>在<code>switch</code>中，<code>default</code>通常用于兜底，一般我们默认代码不应该进入<code>default</code>这个分支，一旦进入了，就表示程序存在某种异常情况，因此就可以在这里进行抛出错误。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> <span class="token string">&#39;A&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;B&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;C&#39;</span> 
 
<span class="token keyword">function</span> <span class="token function">isXiaoMan</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token constant">A</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">switch</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">case</span> <span class="token string">&quot;A&quot;</span><span class="token operator">:</span>
       <span class="token keyword">break</span> 
     <span class="token keyword">case</span> <span class="token string">&quot;B&quot;</span><span class="token operator">:</span>
       <span class="token keyword">break</span> 
     <span class="token keyword">case</span> <span class="token string">&quot;C&quot;</span><span class="token operator">:</span>
       <span class="token keyword">break</span> 
     <span class="token keyword">default</span><span class="token operator">:</span>
       <span class="token comment">// 是用于场景兜底逻辑</span>
       <span class="token comment">// 因为任何类型都不能赋值给 never，所以当存在进入 default 这个分支的可能性时，ts 就会及时帮我们发现这个问题</span>
       <span class="token keyword">const</span> error<span class="token operator">:</span> <span class="token builtin">never</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
       <span class="token keyword">return</span> error
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,15);function f(w,_){const t=u("CodeTabs");return l(),d("div",null,[b,r(t,{id:"15",data:[{title:"ts"},{title:"js"}]},{tab0:a(({title:o,value:c,isActive:p})=>[y]),tab1:a(({title:o,value:c,isActive:p})=>[g]),_:1}),h])}const q=i(m,[["render",f],["__file","any和void和never.html.vue"]]);export{q as default};
