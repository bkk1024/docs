import{_ as o,W as c,X as p,Y as n,Z as s,$ as t,a0 as a,C as l}from"./framework-4f54a744.js";const i={},u=n("h1",{id:"proxy-和-reflect",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#proxy-和-reflect","aria-hidden":"true"},"#"),s(" Proxy 和 Reflect")],-1),r=n("h2",{id:"proxy",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#proxy","aria-hidden":"true"},"#"),s(" Proxy")],-1),d=n("p",null,[n("code",null,"Proxy"),s("对象用于创建一个对象的代理，从而实现基本操作的拦截和自定义，如属性查找、赋值、枚举、函数调用等。")],-1),k=n("p",null,"有如下两个参数：",-1),v=n("li",null,[n("p",null,[n("code",null,"target"),s("：要使用"),n("code",null,"Proxy"),s("进行代理的对象，可以是数组、函数等甚至是另一个"),n("code",null,"Proxy"),s("代理。")])],-1),m=n("p",null,[n("code",null,"handler"),s("：一个对象，它的属性一般都是函数，如下：")],-1),b=a(`<li><p><code>set(target, key, value, receiver) {}</code>：拦截赋值操作</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
	name<span class="token operator">:</span> <span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">,</span>
	age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token punctuation">{</span>
	<span class="token comment">/**
	 * @description: 拦截赋值操作
	 * @param {*} target 代理的对象
	 * @param {*} key 进行赋值的属性的 key
	 * @param {*} value 要赋值的新值
	 * @param {*} receiver 代理的对象，这个属性是为了保证上下文正确
	 * @return {boolean}
	 */</span>
	<span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token comment">// { name: &#39;zhangsan&#39;, age: 18 }</span>
		<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token comment">// name</span>
		<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token comment">// lisi</span>
		<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>receiver<span class="token punctuation">)</span> <span class="token comment">// { name: &#39;zhangsan&#39;, age: 18 }</span>
		<span class="token keyword">const</span> result <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>
		<span class="token keyword">return</span> result
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;lisi&quot;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span> <span class="token comment">// { name: &#39;lisi&#39;, age: 18 }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>get(target, key, receiver) {}</code>：拦截取值操作</p></li><li><p><code>apply() {}</code>：拦截函数调用</p></li>`,3),h=n("code",null,"has() {}",-1),g={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/in",target:"_blank",rel:"noopener noreferrer"},y=a("<li><p><code>ownKeys() {}</code>：拦截<code>for...in</code></p></li><li><p><code>construct() {}</code>：拦截 <code>new</code> 操作符</p></li><li><p><code>deleteProperty() {}</code>：拦截<code>delete</code>操作符</p></li>",3),_={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy#handler_%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E6%B3%95",target:"_blank",rel:"noopener noreferrer"},f=a(`<h2 id="reflect" tabindex="-1"><a class="header-anchor" href="#reflect" aria-hidden="true">#</a> Reflect</h2><p><code>Reflect</code>是一个内置的对象，它提供拦截 JavaScript 操作的方法。这些方法与<code>Proxy handler</code>的方法相同。<code>Reflect</code>不是一个函数对象，因此它是不可构造的（不可<code>new</code>）。</p><p>在上面一节<code>Proxy handler.set()</code>中，我们可以发现<code>Reflect.set()</code>返回了一个布尔值，并且也给<code>person.name</code>赋值成功，这是因为通过<code>target</code>和<code>receiver</code>进行定位后，我们可以保证赋值的对象和属性是正确的。</p><p>所以，当我们使用<code>Proxy</code>拦截一个对象时，就可以搭配使用<code>Reflect</code>去进行赋值(<code>Reflcet.set()</code>)或取值(<code>Reflect.get()</code>)。</p><p>可能你会觉得，我都有了<code>target &amp; key &amp; value</code>了，就不能直接赋值吗？当然，我们可以试试，如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
	name<span class="token operator">:</span> <span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">,</span>
	age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token punctuation">{</span>
	<span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// const result = Reflect.set(target, key, value, receiver)</span>
		target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> receiver<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value <span class="token comment">// 报错</span>
		<span class="token keyword">return</span> <span class="token boolean">true</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;lisi&quot;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6);function x(P,R){const e=l("ExternalLinkIcon");return c(),p("div",null,[u,r,d,k,n("ol",null,[v,n("li",null,[m,n("ul",null,[b,n("li",null,[n("p",null,[h,s("：拦截 "),n("a",g,[s("in"),t(e)]),s(" 操作符")])]),y,n("li",null,[n("p",null,[n("a",_,[s("Proxy | handler 完整方法"),t(e)])])])])])]),f])}const q=o(i,[["render",x],["__file","Proxy和Reflect.html.vue"]]);export{q as default};
