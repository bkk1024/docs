import{_ as n,W as s,X as a,a0 as t}from"./framework-4f54a744.js";const e={},p=t(`<h1 id="mixins-混入" tabindex="-1"><a class="header-anchor" href="#mixins-混入" aria-hidden="true">#</a> Mixins 混入</h1><p><code>Mixins</code>可以简单看作合并，即将多个简单的合并为复杂的。</p><h2 id="对象混入" tabindex="-1"><a class="header-anchor" href="#对象混入" aria-hidden="true">#</a> 对象混入</h2><p>使用 es6 的<code>Object.assign</code>合并多个对象。</p><p>这里定义几个简单的对象，然后将其合并为一个对象。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Name</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Age</span> <span class="token punctuation">{</span>
    age<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Gender</span> <span class="token punctuation">{</span>
    gender<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> name<span class="token operator">:</span> Name <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;zhansan&#39;</span> <span class="token punctuation">}</span>
<span class="token keyword">const</span> age<span class="token operator">:</span> Age <span class="token operator">=</span> <span class="token punctuation">{</span> age<span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">}</span>
<span class="token keyword">const</span> gender<span class="token operator">:</span> Gender <span class="token operator">=</span> <span class="token punctuation">{</span> gender<span class="token operator">:</span> <span class="token string">&#39;male&#39;</span> <span class="token punctuation">}</span>

<span class="token keyword">const</span> people <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> gender<span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>people<span class="token punctuation">)</span> <span class="token comment">// { name: &#39;zhansan&#39;, age: 18, gender: &#39;male&#39; }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">注</p><p>你可能会有疑惑，为啥要多此一举，直接定义一个<code>People</code>不完事儿了吗？</p><p>其实不然，这只是一个例子，所以看着可能会有点多此一举，但是我们在项目中可能前期定义了几个比较简单的<code>interface</code>，它们都有各自的功能，但是后期我们发现有一个对象，它的结构是前面某几个<code>interface</code>的结合，那我们再去定义一个复杂的<code>interface</code>就有点繁琐了，不如直接使用前面的<code>interface</code>定义对象，然后将其混合成一个复杂的对象，这样就比较轻松。</p></div><h2 id="类的混入" tabindex="-1"><a class="header-anchor" href="#类的混入" aria-hidden="true">#</a> 类的混入</h2><p>这个其实跟上面对象的混入也是类似，就是将几个简单的类混合成一个相对复杂的类。只是它的实现过程要比上面的稍微麻烦些。如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">{</span>
	isA<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">true</span>
	<span class="token function">sayA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token punctuation">{</span>
	isB<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">true</span>
	<span class="token function">sayB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;B&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token constant">A</span></span><span class="token punctuation">,</span> <span class="token constant">B</span> <span class="token punctuation">{</span>
	<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
	isA<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span>
	isB<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span>
	<span class="token function">sayA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token function">sayB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">Mixins</span><span class="token punctuation">(</span><span class="token constant">C</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">C</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
c<span class="token punctuation">.</span><span class="token function">sayA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// A</span>

<span class="token comment">/**
 * @description: Mixins 帮助函数，实现混入操作
 * @param {any} derivedCtor
 * @param {any[]} baseCtors
 * @return {*}
 */</span>
<span class="token keyword">function</span> <span class="token function">Mixins</span><span class="token punctuation">(</span>derivedCtor<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> baseCtors<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	baseCtors<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>baseCtor<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>baseCtor<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
			derivedCtor<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> baseCtor<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>name<span class="token punctuation">]</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码就是先定义了<code>class A {}</code>和<code>class B {}</code>这两个类，它们都具有各自的功能。然后我们定义<code>class C {}</code>使用<code>implements</code>去继承，因为这个将类当作接口去继承，所以没有使用<code>extends</code>，如果使用<code>extends</code>继承类的话就只能继承一个类。最后我们定义<code>Mixins</code>帮助函数，然后调用这个函数(在<code>new</code>实现类实例之前)，然后就可以实例化这个新的类了。</p><div class="hint-container tip"><p class="hint-container-title">注</p><p>这里你会说了，这里要实现这个新的类还是得在里面将前两个类的属性和方法写一遍，跟直接重新写一个新类有什么区别呢，还多写了个函数，麻烦。</p><p>其实并不是，这个例子看着麻烦是因为这些类中的方法逻辑很简单，如果是很复杂的逻辑，我们直接写新的类时复制来复制去的岂不是更麻烦？而使用这个方法在新的类中定义这些方法时只需要简单写个框架就行了，当我们调用<code>Mixins</code>方法时会自动向其中填充前面的类的方法的逻辑，现在看起来是不是更加简便一点了。</p></div>`,12),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","Mixins混入.html.vue"]]);export{d as default};
