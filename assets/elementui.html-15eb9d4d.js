import{_ as a,W as r,X as o,Y as e,Z as n,$ as s,a0 as l,C as c}from"./framework-4f54a744.js";const i="/docs/assets/image-20230506190158702-04a6f2d7.png",d={},_=l('<h1 id="element-ui" tabindex="-1"><a class="header-anchor" href="#element-ui" aria-hidden="true">#</a> Element-UI</h1><h2 id="_1、使用穿梭组件-数据量大时导致卡顿" tabindex="-1"><a class="header-anchor" href="#_1、使用穿梭组件-数据量大时导致卡顿" aria-hidden="true">#</a> 1、使用穿梭组件，数据量大时导致卡顿</h2><p>穿梭组件：<code>transfer</code></p><p><img src="'+i+'" alt="image-20230506190158702"></p><p>当数据量大时，渲染起来会卡顿，所以懒加载和分页是基本操作。</p><p>但是做了懒加载或分页操作后，用户点击依然会卡顿，这是因为 transfer 的源码中<em>全选</em>判断代码性能差的原因，因此<strong>方案一就是修改源码</strong>。</p>',6),h={href:"https://www.cnblogs.com/raintoway/p/13469997.html",target:"_blank",rel:"noopener noreferrer"},m=e("h2",{id:"_2、表单验证",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_2、表单验证","aria-hidden":"true"},"#"),n(" 2、表单验证")],-1),p=e("ol",null,[e("li",null,[n("在表单中加"),e("code",null,"rules"),n("属性，然后在data中写校验规则")]),e("li",null,"内部添加规则"),e("li",null,"自定义函数校验")],-1);function u(f,g){const t=c("ExternalLinkIcon");return r(),o("div",null,[_,e("p",null,[n("具体可看这篇博客："),e("a",h,[n("关于Element-UI的穿梭框数据量大时，点击‘全选’卡顿的解决方案 - 绵雨唤 - 博客园 (cnblogs.com)"),s(t)])]),m,p])}const b=a(d,[["render",u],["__file","elementui.html.vue"]]);export{b as default};
