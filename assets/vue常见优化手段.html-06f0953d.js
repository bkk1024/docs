import{_ as t,W as e,X as p,Y as n,Z as o,$ as c,a0 as s,C as i}from"./framework-4f54a744.js";const l={},u=s(`<h1 id="vue-常见优化手段" tabindex="-1"><a class="header-anchor" href="#vue-常见优化手段" aria-hidden="true">#</a> Vue 常见优化手段</h1><h2 id="使用冻结的对象" tabindex="-1"><a class="header-anchor" href="#使用冻结的对象" aria-hidden="true">#</a> 使用冻结的对象</h2><p>冻结的对象不会被响应化。</p><p>在 Vue 中，所有响应化的对象都会被遍历，而有些对象其中的内容我们不会去进行改变时，这个对象如果是响应式的，那么 Vue 对其进行遍历时相比遍历普通对象是非常浪费性能的，这个时候，我们就可以将这个对象冻结：<code>Object.freeze(obj)</code>，这样这个对象就不会被响应化了。</p><p>要判断一个对象是否被冻结了可以使用：<code>Object.isFrozen(obj)</code>。</p><p>例子：比如我们通过一个方法获取了一个对象，这个对象中有很多数据，然后我们将这个数据保存在 <code>data</code> 中，下面有两种写法：</p><ul><li><p>写法一：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">...</span>
<span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">loadNormalDatas</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>normalDatas <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDatas</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token operator">...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token operator">...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>写法二：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">...</span>
<span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">loadFrozenDatas</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>frozenDatas <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDatas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token operator">...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token operator">...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><blockquote><p>在这个例子中，我们调用写法一中的<code>loadNormalDatas()</code>方法时其渲染数据花费的时间相比调用写法二中的<code>loadFrozenDatas()</code>方法要长得多。这是因为写法一中将这个对象进行了响应化，这样 Vue 将会遍历这个对象，所以会花费很多时间。而写法二中将这个对象进行冻结之后， Vue 就不会对其进行响应化了。</p></blockquote><h2 id="使用函数式组件" tabindex="-1"><a class="header-anchor" href="#使用函数式组件" aria-hidden="true">#</a> 使用函数式组件</h2>`,9),r={href:"https://cn.vuejs.org/guide/extras/render-function.html#functional-components",target:"_blank",rel:"noopener noreferrer"},d=s(`<p>Vue 不会对一个函数式组件创建实例，因此，当我们渲染一个函数式组件时，它所花费的时间和内存相比普通组件都要低一些。</p><h2 id="使用计算属性" tabindex="-1"><a class="header-anchor" href="#使用计算属性" aria-hidden="true">#</a> 使用计算属性</h2><p>如果模板中某个数据会使用很多次，并且该数据是通过计算得到的，使用计算属性以缓存它们。</p><h2 id="非实时绑定的表单项" tabindex="-1"><a class="header-anchor" href="#非实时绑定的表单项" aria-hidden="true">#</a> 非实时绑定的表单项</h2><p>当使用<code>v-model</code>绑定一个表单项时，当用户改变表单项的状态时，也会随之改变数据，从而导致<code>vue</code>发生重渲染(rerender)，这会带来一些性能的开销。</p><p>我们可以通过使用<code>lazy</code>或不使用<code>v-model</code>的方式解决该问题，但要注意，这样可能会导致在某一个时间段内数据和表单项的值是不一致的。</p><p><code>v-model</code>监听的是<code>@input</code>事件</p><p><code>v-model.lazy</code>监听的是<code>@change</code>事件</p><h2 id="保持对象引用稳定" tabindex="-1"><a class="header-anchor" href="#保持对象引用稳定" aria-hidden="true">#</a> 保持对象引用稳定</h2><p>例子：用户新增评论。</p><ul><li><p>写法一：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">...</span>
<span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token keyword">async</span> <span class="token function">handleAddComment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">await</span> <span class="token function">addNewComment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>comments <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getComments</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token operator">...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>写法二：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">...</span>
<span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token keyword">async</span> <span class="token function">handleAddComment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> newComment <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">addNewComment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>comments<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>newComment<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token operator">...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><blockquote><p>写法一和写法二的区别在于，写法一每次添加新评论后都会去后台获取所有评论的数据，写法二每次添加新评论后会在已有的评论数据最前面添加上最新的评论。</p><p>写法一的好处：能保证所有的数据都是实时的</p><p>写法一的坏处：因为每次都要重新获取数据，因此每次所有的评论都要重新渲染，哪怕其中有些评论数据并没有什么变化</p><p>写法二的好处：并没有改变原始的数据，只是在原始数据前添加了一条，因此并不会重新渲染所有的评论</p><p>写法二的坏处：评论数据并不是实时的，因为并没有重新从后台获取</p></blockquote><h2 id="使用-v-show-替代-v-if" tabindex="-1"><a class="header-anchor" href="#使用-v-show-替代-v-if" aria-hidden="true">#</a> 使用 v-show 替代 v-if</h2><p>对于<strong>频繁切换显示状态</strong>的元素，使用<code>v-show</code>可以保证虚拟 dom 树的稳定，<strong>避免频繁的新增和删除元素</strong>，特别是对于那些<strong>内部包含大量 dom 元素的节点</strong>，这一点很重要。</p><h2 id="延迟装载-defer" tabindex="-1"><a class="header-anchor" href="#延迟装载-defer" aria-hidden="true">#</a> 延迟装载 defer</h2><p>js 传输完成后，浏览器开始执行 js 构造页面。</p><p>但可能一开始要渲染的组件太多，不仅 js 执行的时间很长，而且执行完后浏览器要渲染的元素过多，从而导致页面白屏。</p><p>一个可行的办法就是延迟装载组件，让组件按照指定的先后顺序依次一个一个的渲染出来。</p><blockquote><p>延迟装载是一个思路，本质上就是利用<code>requestAnimationFrame</code>事件分批渲染内容，他的具体实现方式多种多样</p></blockquote><ul><li><p>定义：</p><p><code>src/mixin/defer.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">maxFrameCount</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">{</span>
                <span class="token literal-property property">frameCount</span><span class="token operator">:</span> <span class="token number">0</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> <span class="token function-variable function">refreshFrameCount</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    			<span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        			<span class="token keyword">this</span><span class="token punctuation">.</span>frameCount<span class="token operator">++</span>
        			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>frameCount <span class="token operator">&lt;</span> maxFrameCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            			<span class="token function">refreshFrameCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        			<span class="token punctuation">}</span>
    			<span class="token punctuation">}</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
            <span class="token function">refreshFrameCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> <span class="token function-variable function">defer</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">showInFrameCount</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    			<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>frameCount <span class="token operator">&gt;=</span> showInFrameCount
			<span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用：</p><p>这里<code>defer(10)</code>只是为了演示用，具体要经过多少次渲染完成，可自行决定。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>n in 10<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>defer(n)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
	<span class="token keyword">import</span> defer <span class="token keyword">from</span> <span class="token string">&quot;./mixin/defer&quot;</span>

	<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">mixins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">defer</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><blockquote><p>defer 的好处是会将页面上的元素一个一个的画出来，降低用户感知，当页面元素多的时候，不会让用户经历长时间的白屏。</p></blockquote><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h2>`,22);function k(v,m){const a=i("ExternalLinkIcon");return e(),p("div",null,[u,n("p",null,[n("a",r,[o("渲染函数 & JSX | Vue.js"),c(a)])]),d])}const h=t(l,[["render",k],["__file","vue常见优化手段.html.vue"]]);export{h as default};
