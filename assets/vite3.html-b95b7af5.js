import{_ as p}from"./image-20230225220900276-5b15e7ba.js";import{_ as o,W as i,X as c,Y as n,Z as a,$ as e,a0 as t,C as l}from"./framework-4f54a744.js";const r="/docs/assets/image-20221012191804383-be0d71d3.png",u="/docs/assets/image-20221012194556766-7b40ad8e.png",d={},v=t(`<h1 id="vite3" tabindex="-1"><a class="header-anchor" href="#vite3" aria-hidden="true">#</a> vite3</h1><h2 id="使用-vite-创建一个-vue-项目" tabindex="-1"><a class="header-anchor" href="#使用-vite-创建一个-vue-项目" aria-hidden="true">#</a> 使用 vite 创建一个 vue 项目</h2><ul><li>pnpm：<code>pnpm create vite</code></li><li>npm：<code>npm init vite@latest</code></li></ul><h2 id="vite-配置文件的处理细节" tabindex="-1"><a class="header-anchor" href="#vite-配置文件的处理细节" aria-hidden="true">#</a> vite 配置文件的处理细节</h2><p>分环境进行配置：</p><ol><li><p>创建四个文件：</p><ol><li><code>vite.config.js</code>：用来管理整个项目的完整配置</li><li><code>vite.base.config.js</code>：用来处理项目的基础配置</li><li><code>vite.dev.config.js</code>：用来处理项目的开发环境的配置</li><li><code>vite.prod.config.js</code>：用来处理项目的生产环境的配置</li></ol></li><li><p>分别在不同文件中进行编写配置，最后在 <code>vite.config.js</code> 文件中进行集中配置：</p><ol><li><p><code>vite.base.config.js</code> ：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vite&quot;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">optimizeDeps</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 指定数组中的依赖不进行依赖预构建</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>vite.dev.config.js</code> ：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>vite.prod.config.js</code> ：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>vite.config.js</code> ：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vite&quot;</span>
<span class="token keyword">import</span> viteBaseConfig <span class="token keyword">from</span> <span class="token string">&quot;./vite.base.config&quot;</span>
<span class="token keyword">import</span> viteDevConfig <span class="token keyword">from</span> <span class="token string">&quot;./vite.dev.config&quot;</span>
<span class="token keyword">import</span> viteProdConfig <span class="token keyword">from</span> <span class="token string">&quot;./vite.prod.config&quot;</span>

<span class="token comment">// 策略模式</span>
<span class="token keyword">const</span> envResolver <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token function-variable function">build</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;生产环境&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>viteBaseConfig<span class="token punctuation">,</span> <span class="token operator">...</span>viteProdConfig <span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token function-variable function">serve</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;开发环境&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>viteBaseConfig<span class="token punctuation">,</span> <span class="token operator">...</span>viteDevConfig <span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> command<span class="token punctuation">,</span> mode <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token comment">// 这个文件执行的是生产环境的配置还是开发环境的却决于我们在终端敲的命令是build还是serve</span>
	<span class="token comment">//</span>

	<span class="token keyword">const</span> env <span class="token operator">=</span> <span class="token function">loadEnv</span><span class="token punctuation">(</span>mode<span class="token punctuation">,</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> envResolver<span class="token punctuation">[</span>command<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li></ol><h2 id="vite-环境变量配置" tabindex="-1"><a class="header-anchor" href="#vite-环境变量配置" aria-hidden="true">#</a> vite 环境变量配置</h2><p>环境变量：会根据当前代码环境而改变自身值的变量</p><p>代码环境：一般来说有生产环境、开发环境、测试环境等，更多也许有预发布环境、灰度环境</p><p>为什么需要环境变量：如调用不同环境下调用的后端 api 就有不同的前缀域名，如果每次改变代码环境时都需要手动修改这些变量，则会让工作变得很繁琐，而且还<strong>会有忘记修改的风险</strong>。</p><h3 id="在-vite-中使用环境变量" tabindex="-1"><a class="header-anchor" href="#在-vite-中使用环境变量" aria-hidden="true">#</a> 在 vite 中使用环境变量</h3><ol><li><p>服务端：</p><p>vite 内置了一个第三方库：<code>dotenv</code> ，这个库会自动读取 <code>.env</code> 文件，并解析这个文件中对应的环境变量，并将其注入到 <code>process</code> 对象下，<strong>但是 vite 考虑到和其他配置的一些冲突问题，并不会直接将其注入到 process 对象下</strong>。</p><p>同时，vite 也提供给我们一些补偿措施：我们可以调用 vite 的 <code>loadEnv</code> 方法来手动确认 env 文件。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* vite.config.js */</span>

<span class="token operator">...</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> command<span class="token punctuation">,</span> mode <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">/*
  	mode: 是我们在终端中敲的命令中 --mode 后携带的字符串，默认情况下，我们并没有在终端中输入 --mode 等字符，因为 vite 默认将开发环境命名为 development，将生产环境命名为 production。我们可以使用 --mode 开修改传入进来的 mode 的值。
  	process.cwd()：这个方法会返回当前 node 进程的工作目录，即，我们在哪个文件夹下输入命令启动服务，则返回哪个文件夹目录。这个方法作为第二个参数是不固定的，因为默认情况下我们都将环境变量的文件(.env.development, .env.production)直接放在工程文件根目录下，但是，如果这些文件不在这个位置，则需要手动传递其文件目录。
  	&quot;&quot;: 这个参数是需要传入文件名，它默认的是 .env ，我们在命名是也使用 .env 所以这里可以不传。
  */</span>
  <span class="token keyword">const</span> env <span class="token operator">=</span> <span class="token function">loadEnv</span><span class="token punctuation">(</span>mode<span class="token punctuation">,</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
  <span class="token comment">// 当使用 loadEnv 这个方法时，它会直接找到 .env 文件，并解析其中的环境变量，将其放入一个对象中。然后将传进来的 mode 这个变量的值进行拼接：.env.[mode](如这个的 mode 是 development，则拼接后为 .env.development) ，并根据我们提供的目录去取对应的配置文件，然后进行解析，最后放进一个对象中</span>
  <span class="token keyword">return</span> envResolver<span class="token punctuation">[</span>command<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>客户端：</p><p>vite 会将对应的环境变量注入到 <code>i<wbr>mport.meta.env</code> 中去。</p><p>同样的，vite 在这里也做了一个拦截，<strong>是为了防止我们将隐私性的变量直接放进 i<wbr>mport.meta.env 中</strong>。如果在文件中写入的变量不是以 <code>VITE_</code> 开头的，就不会注入到其中，如果我们要修改这个前缀，则需要在配置文件中修改 <code>envPrefix</code> 的值。</p></li><li><p>开发环境和生产环境的环境变量例子：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># .env 这个文件是所有环境都能读到的
VITE_BASE_URL = &#39;&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># .env.development 开发环境
VITE_BASE_URL = &#39;https://test.api/&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># .env.production 生产环境
VITE_BASE_URL = &#39;https://api/&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="在-vite-中处理-css" tabindex="-1"><a class="header-anchor" href="#在-vite-中处理-css" aria-hidden="true">#</a> 在 vite 中处理 css</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* vite.base.config.js */</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vite&quot;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token comment">// envPrefix: &#39;&#39;, // 指定环境变量以什么字符串开头命名，默认为 VITE_</span>
	<span class="token literal-property property">css</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token comment">// 对 css 模块化的配置</span>
		<span class="token comment">// modules 配置最终会丢给 postcss modules</span>
		<span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">{</span>
			<span class="token literal-property property">localsConvention</span><span class="token operator">:</span> <span class="token string">&quot;camelCase&quot;</span><span class="token punctuation">,</span>
			<span class="token comment">// 修改生成的配置对象的 key 的展示形式，驼峰式还是横线连接(-)，它有四个值：</span>
			<span class="token comment">// camelCase: 驼峰式</span>
			<span class="token comment">// camelCaseOnly: 只展示驼峰式</span>
			<span class="token comment">// dashes: 横线连接</span>
			<span class="token comment">// dashesOnly: 只展示横线</span>
			<span class="token literal-property property">scopeBehaviour</span><span class="token operator">:</span> <span class="token string">&quot;local&quot;</span><span class="token punctuation">,</span>
			<span class="token comment">// 配置当前模块化行为是模块化还是全局（有hash字符串就是开启了模块化），默认为 local，如果要关闭模块化则将其设置为 global</span>
			<span class="token literal-property property">generateScopedName</span><span class="token operator">:</span> <span class="token string">&quot;[name]_[local]_[hash:5]&quot;</span><span class="token punctuation">,</span>
			<span class="token comment">// https://github.com/webpack/loader-utils#interpolatename</span>
			<span class="token comment">// 设置模块化处理类名的规则，一般不需要修改，这里表示类名规则为 css 文件名+原始类名+5位长度的hash</span>
			<span class="token literal-property property">hashPrefix</span><span class="token operator">:</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span>
			<span class="token comment">// 生成hash会根据你的类名 + 一些其他的字符串(文件名 + 他内部随机生成一个字符串)去进行生成, 如果你想要你生成hash更加的独特一点, 你可以配置hashPrefix, 你配置的这个字符串会参与到最终的hash生成, （hash: 只要你的字符串有一个字不一样, 那么生成的hash就完全不一样, 但是只要你的字符串完全一样, 生成的hash就会一样）</span>
			<span class="token literal-property property">globalModulePaths</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;./componentB.module.css&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
			<span class="token comment">// 代表你不想参与到css模块化的路径</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="vite-配置文件中-css-配置流程-preprocessoroptions" tabindex="-1"><a class="header-anchor" href="#vite-配置文件中-css-配置流程-preprocessoroptions" aria-hidden="true">#</a> vite 配置文件中 css 配置流程，preprocessorOptions</h2><p>主要是用来配置 css 预处理器的一些全局参数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* vite.base.config.js */</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">css</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  	<span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">preprocessorOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    	<span class="token literal-property property">less</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      	<span class="token comment">// 整个配置对象都会给到 less 的执行参数（全局参数）中</span>
      	<span class="token literal-property property">math</span><span class="token operator">:</span> <span class="token string">&quot;always&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 怎么处理数学表达式，always 表示不论是否在括号中，都进行运算</span>
        <span class="token literal-property property">globalVars</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 全局变量</span>
        	<span class="token literal-property property">mainColor</span><span class="token operator">:</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">,</span>
          <span class="token comment">// 相当于在 less 文件中定义的全局变量</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">devSourcemap</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 开启文件索引，即在浏览器中查看样式时，会标注这个样式是哪个文件中的哪一行的</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="vite-中配置-postcss" tabindex="-1"><a class="header-anchor" href="#vite-中配置-postcss" aria-hidden="true">#</a> vite 中配置 postcss</h2><ol><li><p>在 vite 的配置文件中配置：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* vite.base.config.js */</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vite&quot;</span>
<span class="token comment">// 导入 postcss 预设环境</span>
<span class="token keyword">const</span> postcssPresetEnv <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;postcss-preet-env&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">postcss</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token comment">// 这里配置 postcss</span>
		<span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
			<span class="token function">postcssPresetEnv</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
				<span class="token literal-property property">importFrom</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;./variable.css&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 让postcss去知道，有一些全局变量它需要记下来</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token punctuation">]</span><span class="token punctuation">,</span>
		<span class="token comment">// postcssPresetEnv() 是 postcss 的预设环境，支持 css 变量和一些未来的 css 语法，以及 css 兼容性自动补全等</span>
		<span class="token comment">// 其他一些配置可以在 postcss 的官网进行查看</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用 <code>postcss.config.js</code> 文件进行配置，这样即使没有在 vite 的配置文件中书写 postcss 的相关配置，vite 也会自动找到 <code>postcss.config.js</code> 这个文件，并根据其中的配置进行处理：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* postcss.config.js */</span>

<span class="token keyword">const</span> postcssPresetEnv <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;postcss-preset-env&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 做路径处理的</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
		<span class="token function">postcssPresetEnv</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
			<span class="token literal-property property">importFrom</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;./variable.css&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><h5 id="注" tabindex="-1"><a class="header-anchor" href="#注" aria-hidden="true">#</a> 注</h5><p>如果在 vite 的配置文件中书写了 postcss 的相关配置，那么 postcss.config.js 这个文件中的配置就不会生效了，因为 vite 不会去搜索这个文件了</p></blockquote></li></ol><h2 id="path-路径处理模块" tabindex="-1"><a class="header-anchor" href="#path-路径处理模块" aria-hidden="true">#</a> path 路径处理模块</h2><p>path 本质上就是一个字符串处理模块，它包含很多对路径字符串处理的方法。</p><p><code>path.resolve()</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// const path = require(&quot;path&quot;)</span>
<span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">&quot;path&quot;</span>

<span class="token keyword">const</span> filepath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;./test.js&quot;</span><span class="token punctuation">)</span>
<span class="token comment">// 这里就能获取到 test.js 这个文件的绝对路径</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为什么使用 path 模块：node 端读写文件的时候，如果发现我们使用的文件路径为相对路径，则会使用 <code>process.cwd()</code> 来拼接这个文件的绝对路径。而 <code>process.cwd()</code> 获取到的是当前 node 的执行目录，即我们敲击启动服务的文件目录，那么这个是有就有可能造成文件路径错误。并且不同地方使用的文件拼接不一样，有的是 <code>/</code> ，有的是 <code>\\</code> ，而 path 模块会对这些进行处理。</p><p><code>__dirname</code>：这个是 node 内置的一个变量，获取到的就是当前文件的文件目录的绝对路径。</p><p><code>__filename</code>：这个和 <code>__dirname</code> 一致，但是它获取到的是文件的绝对路径，相当于：<code>__dirname + &#39;/文件&#39;</code> 。</p><h2 id="vite-加载静态资源" tabindex="-1"><a class="header-anchor" href="#vite-加载静态资源" aria-hidden="true">#</a> vite 加载静态资源</h2><p>vite 对静态资源基本上是开箱即用的，除了一些特殊情况。</p><p>vite 配置某些特定文件夹的别名，方便我们进行一个静态资源的引入：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* vite.base.config.js */</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vite&quot;</span>
<span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">&quot;path&quot;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token punctuation">{</span>
			<span class="token string-property property">&quot;@&quot;</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;./src&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			<span class="token comment">// 配置 src 文件夹的别名，这样我们以后在使用时可以用 @ 来代替 src 这个目录，如：src/assets 写作 @/assets</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="resolve-alias-设置别名的原理" tabindex="-1"><a class="header-anchor" href="#resolve-alias-设置别名的原理" aria-hidden="true">#</a> resolve.alias 设置别名的原理</h2><p>它会通过我们配置的别名和实际目录去查找到其他文件中的别名，然后对实际目录进行拼接完整路径后将别名替换为实际目录。</p><p>即本质上来说就是一个字符串替换的过程。</p><h2 id="vite-在生产环境对静态资源的处理" tabindex="-1"><a class="header-anchor" href="#vite-在生产环境对静态资源的处理" aria-hidden="true">#</a> vite 在生产环境对静态资源的处理</h2><p>打包后的静态资源为什么包含 hash ：因为浏览器的缓存机制是，只要文件名没有修改，哪怕文件内容进行了修改，他也会直接使用缓存中的文件，而不会向服务器发起请求。这个 hash 保证了每次打包后，被修改了的文件的文件名与上一次不一样，则可以让浏览器读取到最新的文件内容。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* vite.prod.config.js */</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vite&quot;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">base</span><span class="token operator">:</span> <span class="token string">&quot;./&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 配置打包后文件读取路径，这里是相对路径，也可以使用 / 即为绝对路径，或者使用网络路径也行</span>
	<span class="token literal-property property">build</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">rollupOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
			<span class="token comment">// 配置 rollup 的一些构建策略</span>
			<span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
				<span class="token comment">// 控制输出</span>
				<span class="token literal-property property">assetFileNames</span><span class="token operator">:</span> <span class="token string">&quot;[hash]-[name]-[ext]&quot;</span><span class="token punctuation">,</span>
				<span class="token comment">// 控制输出的文件的文件名的构成，hash + 原文件名 + 原文件后缀。这里默认为 [name]-[hash]-[ext]</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token literal-property property">assetsInlineLimit</span><span class="token operator">:</span> <span class="token number">4096000</span><span class="token punctuation">,</span> <span class="token comment">// 4000kb大小内的静态资源都进行处理</span>
		<span class="token literal-property property">outDir</span><span class="token operator">:</span> <span class="token string">&quot;dist&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 配置打包后的文件保存目录，默认为 dist</span>
		<span class="token literal-property property">assetsDir</span><span class="token operator">:</span> <span class="token string">&quot;static&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 配置输出目录中的静态资源目录，默认为 assets</span>
		<span class="token literal-property property">emptyOutDir</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 清除输出目录中的所有文件，默认为 true</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="vite-插件" tabindex="-1"><a class="header-anchor" href="#vite-插件" aria-hidden="true">#</a> vite 插件</h2><p>插件、中间件等其实就是在程序的生命周期中不同阶段执行一些操作。</p><h2 id="vite-和-ts-的结合" tabindex="-1"><a class="header-anchor" href="#vite-和-ts-的结合" aria-hidden="true">#</a> vite 和 ts 的结合</h2><p>在默认状态下，编辑器的识别到的某些 ts 语法上的错误并不会影响项目的正常运行，如给 number 类型赋值 string 类型等。这样我们某些时候可能会忽视这样的一个错误，但是这样可能会导致后面的代码出现其他无法正常运行的问题，因此，我们需要在出现这样的错误时，就让这些错误直接阻塞项目运行，以鞭策我们重视这个错误并修改这个错误以防止后续的连锁反应。</p><p>这样我们需要使用一个 vite 插件：<code>vite-plugin-checker</code> ：</p><ol><li><p>安装插件：选择相对应的管理包方法进行安装即可</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pnpm add vite-plugin-checker -D
yarn add vite-plugin-checker -D
npm i vite-plugin-checher -D
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在 vite 的配置文件中使用：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* vite.dev.config.js */</span>

<span class="token keyword">import</span> checker <span class="token keyword">from</span> <span class="token string">&quot;vite-plugin-checher&quot;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vite&quot;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
		<span class="token function">checker</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">typescript</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 开启 ts 的检查</span>
	<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在 <code>tsconfig.json</code> 文件中去配置相关的 ts 检查规则：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
	<span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token property">&quot;skipLibCheck&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 是否跳过对 node_modules 目录的检查</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>同样的，vite 在默认情况下，这样类型的错误也不会导致我们项目打包失败，但是我们不希望这样的情况存在，我们希望在出现错误时，我们无法打包成功，以避免线上项目因为这些错误而崩溃。</p><p>在 <code>package.json</code> 文件中对 build 命令进行修改：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// package.json</span>

<span class="token punctuation">{</span>
	<span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token property">&quot;bulid&quot;</span><span class="token operator">:</span> <span class="token string">&quot;tsc --noEmit &amp;&amp; vite build&quot;</span>
		<span class="token comment">// 这表示要先执行 tsc 命令，在执行这个命令不出错的情况下才会执行打包命令</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ts-和环境变量" tabindex="-1"><a class="header-anchor" href="#ts-和环境变量" aria-hidden="true">#</a> ts 和环境变量</h3><ol><li><p>在默认情况下，使用 <code>i<wbr>mport.meta.env</code> 程序会报错，因为这是更为高级的 es 语法。而在默认情况下，ts 文件会被编译成 es3，所以我们需要在 <code>tsconfig.js</code> 文件中配置将 ts 文件编译成更高级的 es 标准。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// tsconfig.js</span>

<span class="token punctuation">{</span>
	<span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ESNext&quot;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在完成第一步之后使用 <code>i<wbr>mport.meta.env</code> 依然会出问题，在 env 后面无法点出语法提示，因为我们还需要一个**声明文件<code>env.d.ts</code>**去声明环境变量：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">/* env.d.ts */</span>
<span class="token comment">// 三斜线指令</span>
<span class="token comment">/// &lt;reference types=&quot;vite/client&quot; /&gt;</span>

<span class="token keyword">interface</span> <span class="token class-name">ImportMetaEnv</span> <span class="token punctuation">{</span>
	<span class="token keyword">readonly</span> <span class="token constant">VITE_APP_TITLE</span><span class="token operator">:</span> <span class="token builtin">string</span>
	<span class="token comment">// 更多环境变量...</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">ImportMeta</span> <span class="token punctuation">{</span>
	<span class="token keyword">readonly</span> env<span class="token operator">:</span> ImportMetaEnv
<span class="token punctuation">}</span>

<span class="token comment">// 这个文件的文件名也是约定熟成的，当 vite 发现这个文件后，就会将这个文件中我们声明的类型与其原有类型进行合并</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>`,47),k={href:"https://cn.vitejs.dev/guide/env-and-mode.html#env-files",target:"_blank",rel:"noopener noreferrer"},m=t(`<h2 id="性能优化" tabindex="-1"><a class="header-anchor" href="#性能优化" aria-hidden="true">#</a> 性能优化</h2><ol><li><p>开发时态的构建速度优化：从敲下 dev 命令后到项目最终启动的时间。</p><p>因为 vite 是按需加载的，因此我们并不需要太过关注这方面。</p></li><li><p>页面性能指标：和我们怎么写代码有关</p><ul><li>首屏渲染时长 <ol><li>懒加载：写代码实现</li><li>http 优化：强缓存和协商缓存 <ul><li>强缓存：服务器给响应头追加一些字段(expires)，客户端会记住这些字段，在 expires 失效前，无论怎么刷新页面，浏览器都不会重新请求页面，而会从缓存中取</li><li>协商缓存：是否使用缓存要和后端商量，当服务端打上协商缓存的标记后，客户端在下次刷新页面需要重新请求资源时会发送一个协商请求给服务端，如果服务端说需要变化，则会相应具体内容，否则会响应 304</li></ul></li></ol></li><li>页面中最大元素的渲染时长</li></ul></li><li><p>js 逻辑：</p><ul><li><p>要注意副作用的清除：如计时器</p></li><li><p>在写法上的注意事项：如 requestAnimationFrame、requestIdleCallback</p><ol><li>浏览器是一秒 60 帧，即 16.67ms 更新一次（执行 js 逻辑、重绘重排等），而这两个 API 就可以卡浏览器帧率，在这两个 API 传进去的回调函数会在这期间去执行，以避免画面造成卡顿</li></ol></li><li><p>防抖节流：如果技术力不是很强的情况下，不建议自己手写防抖节流，可以使用 lodash 中的，这是别人已经写好的最优的效果。</p></li><li><p>数组循环方法，同样的，如果数据量较大的情况下，可以不使用数组原生的 forEach 之类的方法，使用 lodash 中的，它会做一些其他的事情来优化整个执行过程。</p></li><li><p>对作用域的控制，如 for 循环：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 因为在 for 循环本身的作用域中不存在 arr，所以它会去找父级作用域要，那么每次 for 循环的 i 变化时，这个 arr.length 都会执行一次，会对性能造成一定的影响</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">let</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 这样，在 for 循环本身的作用域中就会存在 len 这个变量，那么当 i 每次变化时就只会与 len 进行比对，而不会重复执行 arr.length，在数据量大的情况下对性能会有一定程度的优化</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>等</p></li></ul></li><li><p>css：</p><ul><li>多关注继承属性，能继承的属性就不要重复书写</li><li>尽量避免过深的 css 嵌套等</li></ul></li><li><p>构建优化：vite(rollup)、webpack</p><ul><li>优化体积 <ol><li>压缩</li><li>treeshaking</li><li>图片资源压缩</li><li>cdn 加载</li><li>分包</li><li>等</li></ol></li></ul></li><li><p>等</p></li></ol><h2 id="vite-构建优化-分包策略" tabindex="-1"><a class="header-anchor" href="#vite-构建优化-分包策略" aria-hidden="true">#</a> vite 构建优化-分包策略</h2><p>因为 vite 每次打包的文件会自带 hash，这样就会导致每次的文件名都不一样，而浏览器的缓存策略是只要静态资源的文件名变化了就会重新请求，没变化则直接从缓存中取，这样就会导致我们在代码中引用的一些库，它一般情况下是不会变化的，但是因为在打包后放入了一个会变化的文件中，那么每次这些不会常规更新的代码都会重复请求，影响浏览器性能，因此就需要进行分包。</p><p>分包就是将一些不会常规更新的文件进行单独打包。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* vite.prod.config.js */</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vite&quot;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">build</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">rollupOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
			<span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
				<span class="token function-variable function">manualChunks</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
					console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span>
					<span class="token keyword">if</span> <span class="token punctuation">(</span>id<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&quot;node_modules&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
						<span class="token keyword">return</span> <span class="token string">&quot;vendor&quot;</span>
						<span class="token comment">// 这会将 node_modules 下我们引用的模块打包到一个叫 vendor.[hash].js 文件中，其他的 js 文件会从这个 js 文件中导入需要的方法，因此这个文件在浏览器第一次请求时缓存下来了，而我们后续一般也不会对 node_modules 中的源代码进行修改，因此在打包后这个文件名也不会变化，所以浏览器并不会重新请求这个文件，这样就优化了性能</span>
					<span class="token punctuation">}</span>
				<span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="vite-构建优化-gzip-压缩" tabindex="-1"><a class="header-anchor" href="#vite-构建优化-gzip-压缩" aria-hidden="true">#</a> vite 构建优化-gzip 压缩</h2><p>将所有的静态文件进行压缩，以达到减少体积的目的。</p><p>使用 gzip 压缩后的文件会携带一个 <code>.gz</code> 后缀，浏览器通过响应头知道有 gzip 压缩的文件后，识别到这个后缀的文件后就会对其进行解压，但是浏览器解压也是需要时间的，所有，如果打包后的文件如果不是很大的话，尽量不要使用 gzip 压缩，也许会适得其反。</p><p>使用一个插件：<code>vite-plugin-compression</code></p><p><code>npm i vite-plugin-compression -D</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* vite.prod.config.js */</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vite&quot;</span>
<span class="token keyword">import</span> viteCompression <span class="token keyword">from</span> <span class="token string">&quot;vite-plugin-compression&quot;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">viteCompression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="vite-构建优化-动态导入" tabindex="-1"><a class="header-anchor" href="#vite-构建优化-动态导入" aria-hidden="true">#</a> vite 构建优化-动态导入</h2><p>动态导入是 es6 的新特性。</p><p>一般用在路由部分。</p><p>vite 支持使用特殊的 <code>i<wbr>mport.meta.glob</code> 函数从文件系统导入多个模块。这种导入形式匹配到的文件默认是懒加载的，通过动态导入实现的。</p>`,16),b={href:"https://cn.vitejs.dev/guide/features.html#glob-import",target:"_blank",rel:"noopener noreferrer"},g={href:"https://cn.vitejs.dev/guide/features.html#dynamic-import",target:"_blank",rel:"noopener noreferrer"},h=t(`<h2 id="性能优化-cdn-加速" tabindex="-1"><a class="header-anchor" href="#性能优化-cdn-加速" aria-hidden="true">#</a> 性能优化-cdn 加速</h2><p>cdn 的好处在于，在请求时，它会找离自己最近的服务器要资源，而不是找我们的服务器要资源，因此能减少与我们的服务器的交互，减小服务器压力，减小打包体积，并且也能优化浏览器加载程序的速度。</p><p>我们可以将依赖的第三方模块全部写为 cdn 的形式，保证自己代码的一个小体积。</p><p>使用插件：<code>vite-plugin-cdn-import</code></p><p><code>npm i vite-plugin-cdn-import -D</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* vite.prod.config.js */</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vite&quot;</span>
<span class="token keyword">import</span> viteCDNPlugin <span class="token keyword">from</span> <span class="token string">&quot;vite-plugin-cdn-import&quot;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
		<span class="token function">viteCDNPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
			<span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
				<span class="token punctuation">{</span>
					<span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;lodash&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 要使用 cdn 的模块名，即我们 import 的时候写的模块名称</span>
					<span class="token keyword">var</span><span class="token operator">:</span> <span class="token string">&quot;_&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 这个是模块全局导出的变量名，如 lodash 为 _ ，JQuery 为 $</span>
					<span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js&quot;</span><span class="token punctuation">,</span> <span class="token comment">// cdn 地址</span>
				<span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token punctuation">]</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里使用的 cdn 为 jsdelivr 。</p><h2 id="vite-处理跨域" tabindex="-1"><a class="header-anchor" href="#vite-处理跨域" aria-hidden="true">#</a> vite 处理跨域</h2><p><img src="`+r+`" alt="image-20221012191804383"></p><p>当我们在 https://www.baidu.com:443/index.html 这个站点里面要访问 https://www.baidu.com:444/api/userinfo 这个 api 时是会跨域的，因为它们的端口号不相同，这就叫跨域。</p><p>协议、域名、端口号，这三个中的任意一个或多个不相同即会造成跨域。跨域是服务器响应了，但是浏览器拿到结果后不交给我们。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* vite.config.js */</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vite&quot;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">server</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">{</span>
			<span class="token string-property property">&quot;/api&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
				<span class="token comment">// 以后遇到 /api 头的请求时，将其代理到 https://www.baidu.com</span>
				<span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&quot;https://www.baidu.com&quot;</span><span class="token punctuation">,</span>
				<span class="token literal-property property">changeOrigin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
				<span class="token function-variable function">rewrite</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\/api</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 是否要重写 api 路径</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+u+'" alt="image-20221012194556766"></p><p>这就是代理的流程，这样可以解决请求跨域问题。</p><h2 id="vite-分析打包后各个文件大小" tabindex="-1"><a class="header-anchor" href="#vite-分析打包后各个文件大小" aria-hidden="true">#</a> vite 分析打包后各个文件大小</h2><p>因为 vite 打包是基于<code>rollup</code>的，因此我们可以使用<code>rollup-plugin-visualizer</code>插件来生成打包后的内容大小。如图：</p><p><img src="'+p+`" alt="image-20230225220900276"></p><ol><li><p>下载依赖</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install rollup-plugin-visualizer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>在 vite 文件中进行配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* vite.config.js */</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> visualizer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;rollup-plugin-visualizer&#39;</span>

<span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">visualizer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      	<span class="token literal-property property">open</span><span class="token operator">:</span><span class="token boolean">true</span>
 	<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>上面两步完成后，使用<code>npm run build</code>类似的命令后，项目就会自动打开上图的页面到浏览器，以便我看查看哪些文件打包后偏大，可以针对性进行优化。</p><h2 id="vite-打包的部分优化配置" tabindex="-1"><a class="header-anchor" href="#vite-打包的部分优化配置" aria-hidden="true">#</a> vite 打包的部分优化配置</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">build</span><span class="token operator">:</span><span class="token punctuation">{</span>
       <span class="token literal-property property">chunkSizeWarningLimit</span><span class="token operator">:</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token comment">// 规定触发警告的 chunk 大小。（以 kbs 为单位）</span>
       <span class="token literal-property property">cssCodeSplit</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// css 拆分</span>
       <span class="token literal-property property">sourcemap</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 不生成sourcemap</span>
       <span class="token literal-property property">minify</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 是否禁用最小化混淆，esbuild打包速度最快，terser打包体积最小。</span>
       <span class="token literal-property property">assetsInlineLimit</span><span class="token operator">:</span> <span class="token number">4096</span> <span class="token comment">// 小于这个值的导入或引用资源将被转换为 base64 编码，以避免额外的 http 请求。设置为 0 可以完全禁用此项。 4096 为 4kb</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21);function f(y,q){const s=l("ExternalLinkIcon");return i(),c("div",null,[v,n("p",null,[n("a",k,[a("官方文档"),e(s)])]),m,n("p",null,[n("a",b,[a("Glob 导入"),e(s)])]),n("p",null,[n("a",g,[a("动态导入"),e(s)])]),h])}const x=o(d,[["render",f],["__file","vite3.html.vue"]]);export{x as default};
